{
    "queries": [
        {
            "description": "How to retrieve rows with the maximum `count` value for each `a_id`?",
            "sql": "SELECT t.*\nFROM `project.dataset.mytable` t\nWHERE t.count = (SELECT MAX(t1.count) FROM `project.dataset.mytable` t1 WHERE t1.a_id = t.a_id)"
        },
        {
            "description": "How to select the row with the highest count for each a_id?",
            "sql": "SELECT t.* EXCEPT(rn)\nFROM (\n    SELECT t.*, RANK() OVER(PARTITION BY a_id ORDER BY count DESC) rn\n    FROM `project.dataset.mytable` t\n) t\nWHERE rn = 1"
        },
        {
            "description": "How to retrieve rows that match a set of rows?",
            "sql": "WITH input AS (\n    SELECT STRUCT([5.0,6,7] AS row, 'column2' AS value) AS test\n)\nSELECT\n    match_rows([4.0,4,6],[4,7,8]),\n    match_rows(test.row, test.row)\nFROM input"
        },
        {
            "description": "How to multiply two numbers using UDF in BigQuery SQL?",
            "sql": "CREATE TEMP FUNCTION multiplyInputs(x FLOAT64, y FLOAT64)\nRETURNS FLOAT64\nLANGUAGE js AS \"\"\"\n    return x * y;\n\"\"\";"
        },
        {
            "description": "How to define a JavaScript UDF to check if there are common elements between two arrays and then use it to compare two arrays in BigQuery?",
            "sql": "CREATE TEMP FUNCTION match_rows(arr1 ARRAY<FLOAT64>, arr2 ARRAY<FLOAT64>)\nRETURNS BOOL\nLANGUAGE js AS \n\"\"\"\nvar common_el = [];\nfor (let i = 0; i < arr1.length; i++) {\n  for (let j = 0; j < arr2.length; j++) {\n    if (arr1[i] === arr2[j]) {\n      common_el.push(arr1[i]);\n    }\n  }\n}\nreturn common_el.length > 0;\n\"\"\";\nWITH input AS (\n  SELECT STRUCT([5.0,6,7] AS row, 'column2' AS value) AS test\n)\nSELECT\n  match_rows([4.0,4,6],[4.0,5,7]) AS check_1,\n  match_rows(test.row, test.row) AS check_2\nFROM input"
        },
        {
            "description": "How to retrieve the total number of distinct IDs grouped by month from January 1, 2017, to June 1, 2020?",
            "sql": "SELECT DATE_TRUNC(DATE(KeyPartitionDate), MONTH) AS month, COUNT(DISTINCT Id) AS num_of_Ids\nFROM `project.dataset.table`\nWHERE DATE(KeyPartitionDate) BETWEEN '2017-01-01' AND '2020-06-01'\nGROUP BY DATE_TRUNC(DATE(KeyPartitionDate), MONTH)"
        },
        {
            "description": "How many purchases within the last 90/180/270 days do users have?",
            "sql": "SELECT email, first_item_purchased,\n  MAX(purchases_within_90_days) OVER(PARTITION BY email) AS purchases_within_90_days,\n  MAX(purchases_within_180_days) OVER(PARTITION BY email) AS purchases_within_180_days,\n  MAX(purchases_within_270_days) OVER(PARTITION BY email) AS purchases_within_270_days\nFROM `project.dataset.table`"
        },
        {
            "description": "How many purchases within three date ranges did users make before their first purchase?",
            "sql": "SELECT email,\n  SUM(CASE WHEN first_item_purchased IS NULL THEN 1 ELSE 0 END) AS purchases_within_90_days,\n  SUM(CASE WHEN first_item_purchased IS NULL THEN 0 WHEN DATE_DIFF(DATE(date), DATE(first_item_purchased), DAY) < 90 THEN 1 ELSE 0 END) AS purchases_within_90_days,\n  SUM(CASE WHEN first_item_purchased IS NULL THEN 0 WHEN DATE_DIFF(DATE(date), DATE(first_item_purchased), DAY) < 180 THEN 1 ELSE 0 END) AS purchases_within_180_days,\n  SUM(CASE WHEN first_item_purchased IS NULL THEN 0 WHEN DATE_DIFF(DATE(date), DATE(first_item_purchased), DAY) < 270 THEN 1 ELSE 0 END) AS purchases_within_270_days\nFROM tbl\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve all rows from the result set with V2 locations that include or match the string '%Gabon%'?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE V2locations LIKE '%Gabon%'"
        },
        {
            "description": "How to filter rows based on Regexp Match?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE REGEXP_CONTAINS(V2locations, r'Gabon|Angola|Zimbabwe')"
        },
        {
            "description": "How to retrieve data from a table that is backed by a view that is backed by an authorized view?",
            "sql": "SELECT *\nFROM `project.dataset.table`"
        },
        {
            "description": "How to update the ViewItem column with the SessionStart value for rows where the ViewItem value is initially greater than the SessionStart value?",
            "sql": "UPDATE `project.dataset.table`\nSET ViewItem = SessionStart\nWHERE (event_date, user_pseudo_id)\nIN (\n  SELECT AS STRUCT event_date, user_pseudo_id\n  FROM `project.dataset.table`\n  WHERE ViewItem > SessionStart\n  GROUP BY event_date, user_pseudo_id\n  ORDER BY event_date, user_pseudo_id\n)"
        },
        {
            "description": "How much revenue did each company earn in 2015 if they earned more than $30,000,000,000?",
            "sql": "SELECT EXTRACT(YEAR FROM trip_end_timestamp) AS trip_year, company,\n       SUM(trip_total) AS total_revenue\nFROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`\nWHERE EXTRACT(YEAR FROM trip_end_timestamp) = 2015\nGROUP BY trip_year, company\nHAVING total_revenue >= 30000000000;"
        },
        {
            "description": "How to select all columns except two (instance and line_items) from a table, unnest a nested array column (line_items), and then filter the results based on a condition?",
            "sql": "SELECT * EXCEPT(instance, line_items)\nFROM (\n  SELECT *, ROW_NUMBER() OVER(PARTITION BY id) AS instance\n  FROM `project.dataset.shopify.orders`\n), UNNEST(line_items) AS item\nWHERE instance = 1"
        },
        {
            "description": "How to retrieve the default value of a JSON object stored in BigQuery?",
            "sql": "SELECT JSON_EXTRACT_SCALAR(el, '$.default_value') AS default_value\nFROM `project.dataset.table`,\nUNNEST(JSON_EXTRACT_ARRAY(json)) el\nWHERE JSON_EXTRACT_SCALAR(el, '$.key') = 'expiry_date'"
        },
        {
            "description": "How to retrieve the default value for the expiry_date key from a JSON array extracted from a BigQuery table?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT '''\n[   {\n      \"key\":\"expiry_date\",\n      \"type\":\"date\",\n      \"label\":\"Expiry Date\",\n      \"required\":false,\n      \"default_value\":\"2029-12-15\"\n   },   {\n      \"key\":\"brand\",\n      \"type\":\"text\",\n      \"label\":\"Brand\",\n      \"required\":false,\n      \"default_value\":\"clipsal\"\n   }  \n  ''' json\n)\nSELECT\n  JSON_EXTRACT_SCALAR(el, '$.default_value') AS default_value\nFROM `project.dataset.table`,\nUNNEST(JSON_EXTRACT_ARRAY(json)) el\nWHERE\n  JSON_EXTRACT_SCALAR(el, '$.key') = 'expiry_date'"
        },
        {
            "description": "How to retrieve the default value for the 'expiry_date' key from the JSON column named 'json' in each row?",
            "sql": "SELECT *, (\n  SELECT JSON_EXTRACT_SCALAR(el, '$.default_value')\n  FROM UNNEST(JSON_EXTRACT_ARRAY(json)) el\n  WHERE JSON_EXTRACT_SCALAR(el, '$.key') = 'expiry_date'\n) AS default_value\nFROM `project.dataset.table`"
        },
        {
            "description": "How to retrieve the row with the fifth highest salary?",
            "sql": "SELECT w.*\nFROM (\n  SELECT w.*, DENSE_RANK() OVER (ORDER BY salary DESC) AS seqnum\n  FROM `project.dataset.table` w\n) w\nWHERE seqnum = 5;"
        },
        {
            "description": "How to join two tables ACT and BOUND in BigQuery using common columns ID, FieldID, FieldCropYear, and UpdateUTC?",
            "sql": "SELECT *\nFROM `xxx.yyy.111` AS ACT\nINNER JOIN `xxx.yyy.222` AS BOUND\nUSING(ID, FieldID, FieldCropYear, UpdateUTC)"
        },
        {
            "description": "How to retrieve records from table `xxx.yyy.111` that match the records in table `xxx.yyy.222` based on the `FieldID` and `FieldCropYear` columns, while excluding the `ID` and `UpdateUTC` columns from `xxx.yyy.222` and renaming the `ID` column to `actID` and the `UpdateUTC` column to `actUpdateUTC`?",
            "sql": "SELECT *\nFROM `xxx.yyy.111` AS ACT\nINNER JOIN (\n  SELECT * EXCEPT (ID, UpdateUTC), ID AS actID, UpdateUTC AS actUpdateUTC\n  FROM `xxx.yyy.222`\n) AS BOUND\nUSING(FieldID, FieldCropYear)"
        },
        {
            "description": "How to retrieve the number of user ratings below 1 and above 10, grouped by User ID?",
            "sql": "SELECT User_ID,\n       COUNTIF(Rating < 0) AS rating_below_1,\n       COUNTIF(Rating > 10) AS rating_above_10\nFROM `project.dataset.table`\nGROUP BY User_ID;"
        },
        {
            "description": "How to count rows where the 'Rating' column is less than -1 or more than 10?",
            "sql": "SELECT User_ID,\n       COUNTIF(SAFE_CAST(Rating AS INT64) < 0) AS rating_below_1,\n       COUNTIF(SAFE_CAST(Rating AS INT64) > 10) AS rating_above_10\nFROM `project.dataset.table`\nGROUP BY User_ID;"
        },
        {
            "description": "How to retrieve the previous bidend value for each customer2, excluding bidend that is null?",
            "sql": "SELECT t.*, LAG(bidend IGNORE NULLS) OVER (PARTITION BY customer2 ORDER BY row) AS prev_bidend\nFROM t;"
        },
        {
            "description": "How to retrieve for each customer and bid the max bid amount?",
            "sql": "SELECT t.*,\n       MAX(bidend) OVER (PARTITION BY customer2, bid_id) AS max_bid\nFROM t;"
        },
        {
            "description": "How to create multiple views dynamically using BigQuery SQL?",
            "sql": "DECLARE x INT64 DEFAULT 0;\nDECLARE rs ARRAY<STRING>;\nSET rs = (\n  WITH data AS (SELECT i FROM `fh-bigquery.public_dump.numbers_255` WHERE i < 4)\n  SELECT ARRAY_AGG(\n    'CREATE OR REPLACE VIEW `temp.number' || i\n    || '` AS SELECT i FROM `fh-bigquery.public_dump.numbers_255` WHERE i=' || i\n  )\n  FROM data\n);\nLOOP\n  EXECUTE IMMEDIATE(SELECT rs[OFFSET(x)]);\n  SET x = x + 1;\n  IF x >= ARRAY_LENGTH(rs) THEN\n    LEAVE;\n  END IF;\nEND LOOP;"
        },
        {
            "description": "How to retrieve a list of distinct values for the `FieldID` field grouped by `DateTime`, `SerialNumber`, `geometry`, `FarmName`, and `FieldName` where the count of distinct `FieldID` values is greater than 2?",
            "sql": "SELECT DateTime, SerialNumber, geometry, FarmName, FieldName,\nARRAY_AGG(DISTINCT FieldID) AS FieldID_distinct\nFROM `xxx.yyy.zzz`\nGROUP BY 1, 2, 3, 4, 5\nHAVING COUNT(DISTINCT FieldID) > 2\nORDER BY DateTime ASC;"
        },
        {
            "description": "How to retrieve 10 item descriptions, prices, if they're printed, and each of their variants' IDs and amounts?",
            "sql": "SELECT\n  basket.id AS bId,\n  foodType, price,\n  printed,\n  v.id AS vId,\n  v.amount AS vAmount\nFROM (SELECT * FROM `project.dataset.table` LIMIT 10)\nLEFT JOIN UNNEST(variations) AS v"
        },
        {
            "description": "How to calculate the rolling sum of a specific number of rows?",
            "sql": "#standardSQL\nSELECT *, SUM(no_of_time) OVER(rolling_3_month_window) AS rolling_3_month\nFROM `project.dataset.table`\nWINDOW rolling_3_month_window AS (\n  PARTITION BY username, pagevisited\n  ORDER BY DATE_DIFF(PARSE_DATE('%m/%d/%Y', mmddyyyy), '1970-01-01', MONTH)\n  RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING\n)"
        },
        {
            "description": "How to calculate the rolling 3-month sum of 'no_of_time' for each unique combination of 'username' and 'pagevisited'?",
            "sql": "#standardSQL\nWITH `project.dataset.table` AS (\n  SELECT '1/1/2019' mmddyyyy, 'Homepage' pagevisited, 'A' username, 1 no_of_time, 'January' month UNION ALL\n  SELECT '2/21/2019', 'AccountPage', 'A', 1, 'February' UNION ALL\n  SELECT '2/25/2019', 'AccountPage', 'B', 5, 'February' UNION ALL\n  SELECT '3/1/2019', 'Homepage', 'A', 3, 'March' UNION ALL\n  SELECT '4/2/2019', 'cartpage', 'B', 2, 'April' UNION ALL\n  SELECT '5/2/2019', 'AccountPage', 'A', 1, 'May' UNION ALL\n  SELECT '6/2/2019', 'Submisison', 'C', 1, 'June' UNION ALL\n  SELECT '5/5/2019', 'Homepage', 'D', 2, 'May' UNION ALL\n  SELECT '5/2/2019', 'Articles', 'E', 2, 'May' UNION ALL\n  SELECT '7/25/2019', 'cartpage', 'E', 2, 'July' UNION ALL\n  SELECT '8/12/2019', 'Articles', 'A', 1, 'August' UNION ALL\n  SELECT '9/23/2019', 'Articles', 'A', 6, 'September'\n)\nSELECT *, SUM(no_of_time) OVER(rolling_3_month_window) AS rolling_3_month\nFROM `project.dataset.table`\nWINDOW rolling_3_month_window AS (\n  PARTITION BY username, pagevisited\n  ORDER BY DATE_DIFF(PARSE_DATE('%m/%d/%Y', mmddyyyy), '1970-01-01', MONTH)\n  RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING\n)"
        },
        {
            "description": "How to calculate the rolling 3-month average of the 'no_of_time' column, grouped by 'username' and 'month'?",
            "sql": "SELECT mmddyyyy, pagevisited, username, no_of_time, month,\nAVG(no_of_time) OVER (PARTITION BY username ORDER BY month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_3_month\nFROM Row"
        },
        {
            "description": "How to retrieve the `date_formatted` and `fullvisitorId` columns from a table?",
            "sql": "SELECT date_formatted, fullvisitorId\nFROM `project.dataset.table`"
        },
        {
            "description": "How to retrieve a list of partitioned tables and their corresponding partitioning configuration for a given BigQuery dataset?",
            "sql": "SELECT\n  table_id,\n  partition_type,\n  DATE(FORMAT_TIMESTAMP('%s', partition_last_modified)) AS last_modified,\n  DATE(FORMAT_TIMESTAMP('%s', partition_expiration_time)) AS expiration_time,\n  partitioning_field\nFROM\n  INFORMATION_SCHEMA.PARTITIONS\nWHERE\n  table_catalog = 'project'\n  AND table_schema = 'dataset'\n  AND partition_type = 'DAY'\nORDER BY\n  last_modified DESC;"
        },
        {
            "description": "How to extract the date in YYYY-MM-DD format and full visitor ID from a BigQuery table?",
            "sql": "SELECT\n  FORMAT_TIMESTAMP('%Y-%m-%d', date) AS date_formatted,\n  fullVisitorId\nFROM\n  `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE\n  _TABLE_SUFFIX BETWEEN '20161201' AND '20170101'"
        },
        {
            "description": "How to retrieve all rows where the field \"date_formatted\" matches the provided date literal, December 30, 2016?",
            "sql": "DECLARE dt DATE DEFAULT DATE(2016,12,30);\nSELECT *\nFROM `project.dataset.table_name`\nWHERE date_formatted = dt"
        },
        {
            "description": "How to create a partitioned table in BigQuery with a date partition column?",
            "sql": "CREATE TABLE `project.dataset.table_name` (_time TIMESTAMP, dummy_column STRING)\nPARTITION BY DATE(_time)\nAS\nSELECT TIMESTAMP '2020-06-15 23:57:00 UTC' AS _time, 'a' AS dummy_column UNION ALL\nSELECT TIMESTAMP '2020-06-15 23:58:00 UTC' AS _time, 'b' AS dummy_column UNION ALL\nSELECT TIMESTAMP '2020-06-15 23:59:00 UTC' AS _time, 'c' AS dummy_column UNION ALL\nSELECT TIMESTAMP '2020-06-16 00:00:00 UTC' AS _time, 'd' AS dummy_column UNION ALL\nSELECT TIMESTAMP '2020-06-16 00:00:01 UTC' AS _time, 'e' AS dummy_column UNION ALL\nSELECT TIMESTAMP '2020-06-16 00:00:02 UTC' AS _time, 'f' AS dummy_column"
        },
        {
            "description": "How to retrieve all rows from a table where the _time field is equal to a specified date?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE DATE(_time) = '2020-06-15'"
        },
        {
            "description": "How to retrieve the IDs and counts of rows in table `t` that contain a `visitnumber` smaller than the smallest `visitnumber` in the same `id` with a `type` of 'shop'?",
            "sql": "SELECT id, COUNT(*)\nFROM `project.dataset.t`\nWHERE visitnumber < (\n  SELECT MIN(t2.visitnumber)\n  FROM `project.dataset.t` t2\n  WHERE t2.id = t.id AND type = 'shop'\n)\nGROUP BY id;"
        },
        {
            "description": "How to retrieve the number of visits that happened before the first shop visit for each customer?",
            "sql": "SELECT id, COUNTIF(visitnumber < visitnumber_shop)\nFROM (\n  SELECT t.*,\n         MIN(CASE WHEN type = 'shop' THEN visitnumber END) OVER (PARTITION BY id) AS visitnumber_shop\n  FROM `project.dataset.t`\n) t\nGROUP BY id;"
        },
        {
            "description": "How to retrieve the Google Analytics data with the maximum value of params.value.string_value for a given user?",
            "sql": "SELECT ga.*, MAX(CASE WHEN params.key = 'item_id' THEN params.value.string_value END) OVER (PARTITION BY uid) AS grade\nFROM `project.dataset.Google_Analytics` ga;"
        },
        {
            "description": "How to insert and update data in a target table when there is a match and update conditions are met, or insert a row if there is no match?",
            "sql": "MERGE `test.organization_user` T\nUSING `test.user_details` S\nON T.user_id = S.user_id\nWHEN MATCHED AND (\n  IFNULL(T.organization,'') <> IFNULL(S.organization,'') OR\n  IFNULL(T.contact_number,0) <> IFNULL(S.contact_number,0)\n)\nTHEN\n  UPDATE SET\n    T.organization = S.organization,\n    T.contact_number = S.contact_number\nWHEN NOT MATCHED THEN\n  INSERT ROW"
        },
        {
            "description": "How to retrieve the first conversion date for each client by partitioning by client_ID and ordering by DATE ascending?",
            "sql": "IFNULL(CAST(FIRST_VALUE(DATE) OVER (PARTITION BY client_ID ORDER BY DATE ASC) AS STRING), 'whatever default value you have in mind') AS first_conversion_date"
        },
        {
            "description": "How to retrieve all rows from a table where STOCK is greater than 0 or the time is within the last 14 days?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE STOCK > 0 OR TIME >= DATETIME_ADD(CURRENT_DATETIME(), INTERVAL -14 DAY)"
        },
        {
            "description": "How to retrieve the latest channel for a conversation, even if the latest message in the conversation doesn't have a channel?",
            "sql": "SELECT a.timestamp, a.conversation,\n  COALESCE(\n    a.channel,\n    (SELECT MAX(c.channel) FROM Messages c\n         WHERE c.conversation = a.conversation\n         AND c.timestamp =\n           (SELECT MAX(c2.timestamp) FROM Messages c2\n                WHERE c2.conversation = a.conversation\n                AND c2.channel IS NOT NULL\n                AND c2.timestamp < a.timestamp)),\n    (SELECT MAX(c.channel) FROM Messages c\n         WHERE c.conversation = a.conversation\n         AND c.timestamp =\n           (SELECT MIN(c2.timestamp) FROM Messages c2\n                WHERE c2.conversation = a.conversation\n                AND c2.channel IS NOT NULL))) AS channel\nFROM Messages a;"
        },
        {
            "description": "How to retrieve all rows from table2 that have an id with an entry in table1 at an earlier timestamp?",
            "sql": "SELECT t2.*\nFROM `project.dataset.table2` t2\nJOIN (\n  SELECT t1.id, MIN(t1.log_time) AS min_log_time\n  FROM `project.dataset.table1` t1\n  GROUP BY t1.id\n) t1\nON t2.id = t1.id AND t2.timestamp < t1.min_log_time;"
        },
        {
            "description": "How to retrieve rows where the log time is less than the minimum log time for the same ID in another table?",
            "sql": "SELECT t2.*\nFROM `project.dataset.table2` t2\nWHERE t2.log_time < (\n  SELECT MIN(t1.log_time)\n  FROM `project.dataset.table1` t1\n  WHERE t1.id = t2.id\n);"
        },
        {
            "description": "How to count the number of events that occurred before the first timestamp_1 event for each session, grouped by user_id?",
            "sql": "SELECT user_id, COUNTIF(timestamp < timestamp_1)\nFROM (\n  SELECT e.*, s.user_id,\n         MIN(CASE WHEN e.flag = 1 THEN e.timestamp END) OVER (PARTITION BY e.session_id) AS timestamp_1\n  FROM `project.dataset.events` e\n  JOIN `project.dataset.sessions` s\n  ON s.session_id = e.session_id\n) e\nGROUP BY user_id;"
        },
        {
            "description": "How to retrieve the minimum timestamp where the flag column equals 1 for each user?",
            "sql": "MIN(CASE WHEN e.flag = 1 THEN e.timestamp END) OVER (PARTITION BY s.user_id) AS timestamp_1"
        },
        {
            "description": "How to group data from a table and get a representative value for each group?",
            "sql": "#standardSQL\nSELECT AS VALUE ANY_VALUE(t)\nFROM `project.dataset.table` t\nGROUP BY FORMAT('%t', (SELECT AS STRUCT * EXCEPT(acquisitionDate) FROM UNNEST([t])))"
        },
        {
            "description": "How to retrieve the unique rows with any value of the specified columns?",
            "sql": "#standardSQL\nWITH `project.dataset.table` AS (\n  SELECT 1 id, 'aaa' info, 1 acquisitionDate UNION ALL\n  SELECT 1, 'aaa', 2 UNION ALL\n  SELECT 2, 'ccc', 3 UNION ALL\n  SELECT 2, 'ccc', 4\n)\nSELECT AS VALUE ANY_VALUE(t)\nFROM `project.dataset.table` t\nGROUP BY FORMAT('%t', (SELECT AS STRUCT * EXCEPT(acquisitionDate) FROM UNNEST([t])))"
        },
        {
            "description": "How to retrieve a row by its row id?",
            "sql": "SELECT *\nFROM `project.dataset.table_name`\nWHERE row_id = 2"
        },
        {
            "description": "How to retrieve each unique row of a table, ordering the table by a timestamp column in descending order?",
            "sql": "SELECT AS VALUE ARRAY_AGG(t ORDER BY acquisitionDate DESC LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY FORMAT('%t', (SELECT AS STRUCT * EXCEPT(acquisitionDate) FROM UNNEST([t])))"
        },
        {
            "description": "How to retrieve acquisition dates for rows with specific ids?",
            "sql": "SELECT id, info, acquisitionDate\nFROM `project.dataset.table`\nWHERE id IN (1, 2);"
        },
        {
            "description": "How to retrieve the most recent values across multiple repeated fields?",
            "sql": "#standardSQL\nSELECT\n  ARRAY_AGG(x ORDER BY acquisitionDate DESC LIMIT 1)[OFFSET(0)].*,\n  ARRAY_AGG(acquisitionDate) AS acquisitionDates\nFROM `project.dataset.table` t,\nUNNEST([(SELECT AS STRUCT * EXCEPT(acquisitionDate) FROM UNNEST([t]))]) x\nGROUP BY FORMAT('%t', x)"
        },
        {
            "description": "How to retrieve the first and last dates in a series for specific entity IDs?",
            "sql": "SELECT\n  row_id,\n  info,\n  MIN(acquisitionDates) AS first_acquisition_date,\n  MAX(acquisitionDates) AS last_acquisition_date\nFROM\n  UNNEST(\n    DATA_MAP(info, acquisitionDates)\n  ) AS entry,\n  UNNEST(entry.value) AS acquisitionDates\nWHERE\n  entry.key = info\nGROUP BY\n  row_id,\n  info"
        },
        {
            "description": "How to count the number of positive, negative, and null or empty attributes in a table?",
            "sql": "SELECT\n  COUNTIF(result.value > 0) AS positive_attributes,\n  COUNTIF(result.value < 0) AS negative_attributes,\n  COUNTIF(IFNULL(result.value, 0) = 0) AS null_or_zero_attributes\nFROM `project.dataset.table`,\nUNNEST(event_data_results) AS result\nWHERE EXISTS (\n  SELECT 1\n  FROM UNNEST(event_keys) AS key\n  WHERE key.value = 'attribute'\n)"
        },
        {
            "description": "How to retrieve the part of the day for each user, where the part of day is based on either the request timestamp, or on a derived Time column from the request timestamp?",
            "sql": "WITH data AS (\n  SELECT 98 AS User_ID, DATETIME '2008-12-25 05:30:00.000000' AS Request_Timestamp, 'something!' AS channel UNION ALL\n  SELECT 99 AS User_ID, DATETIME '2008-12-25 22:30:00.000000' AS Request_Timestamp, 'something!' AS channel\n)\nSELECT User_ID, time,\nARRAY_AGG(Time ORDER BY cnt DESC LIMIT 1)[OFFSET(0)] AS part_of_day1,\nCASE\n  WHEN time BETWEEN '04:00:00' AND '12:00:00' THEN 'morning'\n  WHEN time < '04:00:00' OR time > '20:00:00' THEN 'night'\nEND AS part_of_day\nFROM (\n  SELECT User_ID,\n         TIME_TRUNC(TIME(Request_Timestamp), SECOND) AS time,\n         COUNT(*) AS cnt\n  FROM data\n  GROUP BY User_ID, Channel, Request_Timestamp\n)\nGROUP BY User_ID, Time;"
        },
        {
            "description": "How to retrieve a list of table names affected by DDL queries?",
            "sql": "WITH sample_data AS (\n  SELECT 1 AS id, 'CREATE TABLE tbl1 ...' AS query UNION ALL\n  SELECT 2 AS id, 'CREATE OR REPLACE TABLE tbl1 ...' AS query UNION ALL\n  SELECT 3 AS id, 'DROP TABLE IF EXISTS tbl1; CREATE TABLE tbl1 ...' AS query UNION ALL\n  SELECT 4 AS id, 'INSERT INTO tbl2 ...' AS query UNION ALL\n  SELECT 5 AS id, 'INSERT INTO tbl2 ...' AS query UNION ALL\n  SELECT 6 AS id, 'UPDATE tbl3 SET col1 = ...' AS query UNION ALL\n  SELECT 7 AS id, 'UPDATE tbl3 SET col1 = ...' AS query UNION ALL\n  SELECT 8 AS id, 'DELETE tbl4 ...' AS query\n)\nSELECT\n  *, REGEXP_EXTRACT(query, r\"(?:(?:(?:CREATE(?:(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+OR(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+REPLACE)?|DROP)(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+TABLE(?:(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+IF(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+EXISTS)?|UPDATE|DELETE|INSERT(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+INTO)(?:\\s*\\/\\*.*\\*\\/\\s*?)*\\s+([\\^\\s\\/*;]+)\") AS table_name\nFROM sample_data"
        },
        {
            "description": "How to retrieve the most frequently used language for each user?",
            "sql": "#standardSQL\nSELECT\n  User_ID,\n  ARRAY_AGG(Language ORDER BY cnt DESC LIMIT 1)[OFFSET(0)] AS most_frequent_language\nFROM (\n  SELECT\n    User_ID,\n    Language,\n    COUNT(*) AS cnt\n  FROM `project.dataset.language`\n  WHERE Language IS NOT NULL\n  GROUP BY User_ID, Language\n)\nGROUP BY User_ID"
        },
        {
            "description": "How to retrieve the maximum precision and scale for a given decimal field?",
            "sql": "SELECT MAX(precision) AS max_precision, MAX(scale) AS max_scale\nFROM (\n  SELECT PARSE_DECIMAL(value) AS decimal_value\n  FROM UNNEST([STRUCT(CAST(NULL AS BYTES) AS value)]) AS temp(value)\n)"
        },
        {
            "description": "How to retrieve an array of subscriptions and engagements for each customer?",
            "sql": "SELECT c.*,\n       (\n         SELECT ARRAY_AGG(s)\n         FROM `project.dataset.substriptions` s\n         WHERE s.user_id = c.user_id\n       ) AS subscriptions,\n       (\n         SELECT ARRAY_AGG(e)\n         FROM `project.dataset.engagements` e\n         WHERE e.user_id = c.user_id\n       ) AS engagements\nFROM `project.dataset.customers` c"
        },
        {
            "description": "How to compute the product of two numbers and divide the result by a third number?",
            "sql": "SELECT CAST('0.029' AS NUMERIC) * 50 / 100"
        },
        {
            "description": "How to retrieve the distinct count of days for a given column from a table where the column contains the value 'null' and order it in a descending fashion?",
            "sql": "SELECT\n  CASE WHEN day IN ('Monday', 'Mndy') THEN 'Monday' ELSE day END AS day,\n  COUNT(*) AS Total\nFROM\n  `project.dataset.table`\nWHERE day != 'null'\nGROUP BY day\nORDER BY Total DESC;"
        },
        {
            "description": "How to retrieve the time (rounded to the nearest second) of the request for each conversation?",
            "sql": "SELECT TIME_TRUNC(TIME(Request_Timestamp), SECOND) AS Time\nFROM `project.dataset.conversation`"
        },
        {
            "description": "How to multiply a number by a percentage?",
            "sql": "SELECT CAST('0.029' AS NUMERIC) * 50 / 100"
        },
        {
            "description": "How to retrieve a count of days of the week, with any misspellings corrected?",
            "sql": "SELECT\n  CASE WHEN day IN ('Monday', 'Mndy') THEN 'Monday' ELSE day END AS day,\n  COUNT(*) AS Total\nFROM\n  `project.dataset.table`\nWHERE day != 'null'\nGROUP BY day\nORDER BY Total DESC;"
        },
        {
            "description": "How to retrieve the time, truncated to the second, from a table?",
            "sql": "SELECT TIME_TRUNC(TIME(Request_Timestamp), SECOND) AS Time\nFROM `project.dataset.conversation`"
        },
        {
            "description": "How to generate a deterministic bucket number given customer information, algorithm index, and test ID parameters?",
            "sql": "CREATE TEMP FUNCTION getDeterministicBuckets(customerId INT64, algorithmIndex INT64, testId INT64)\nRETURNS STRUCT<bucketNumber INT64, CustomerId INT64>\nLANGUAGE js AS \"\"\"\n  return {bucketNumber: Sha1.getDeterministicBuckets(customerId, algorithmIndex, testId), CustomerId: customerId};\n\"\"\";"
        },
        {
            "description": "How to retrieve the deterministic bucket number of a given value, given the number of buckets and the upper bound of the last bucket?",
            "sql": "SELECT getDeterministicBuckets(7354430, 4, 5947) AS x"
        },
        {
            "description": "How to retrieve the 250 top co-occurrences of people with the name 'Tsiparas' in the GDELT database between March 3rd and 4th, 2015, and sort the results in descending order of the number of co-occurrences?",
            "sql": "SELECT a.name, b.name, COUNT(*) AS COUNT\nFROM (FLATTEN(\n  SELECT GKGRECORDID, UNIQUE(REGEXP_REPLACE(SPLIT(V2Persons,';'), r',.*', '')) name\n  FROM [gdelt-bq:gdeltv2.gkg]\n  WHERE DATE>20150302000000 \n  AND DATE < 20150304000000 \n  AND V2Persons LIKE '%Tsipras%' \n,name)) a\nJOIN EACH (\n  SELECT GKGRECORDID, UNIQUE(REGEXP_REPLACE(SPLIT(V2Persons,';'), r',.*', '')) name\n  FROM [gdelt-bq:gdeltv2.gkg]\n  WHERE DATE>20150302000000 \n  AND DATE < 20150304000000 \n  AND V2Persons LIKE '%Tsipras%'\n) b\nON a.GKGRECORDID=b.GKGRECORDID\nWHERE a.name<b.name\nGROUP EACH BY 1,2\nORDER BY 3 DESC\n;"
        },
        {
            "description": "How to replace the first value of duplicate rows with an empty string?",
            "sql": "SELECT * EXCEPT(new_value1) REPLACE(new_value1 AS value1) \nFROM (\n  SELECT *, IF(timestamp = MIN(timestamp) OVER(PARTITION BY id1, id2, id3), CAST(value1 AS STRING), '') new_value1\n  FROM `project.dataset.table`\n)"
        },
        {
            "description": "How to retrieve all data from the `other_table` table where the `device` column matches one of the comma-separated device values in the `device` column of the table `t`.?",
            "sql": "select * from (select 124 as line_item_id, '203; 100; 6; 2' as device) t cross join unnest(split(device, '; ')) d join other_table ot on ot.device = d;"
        },
        {
            "description": "How to retrieve all records of the main table, unnest the tickers column, and join the results with the unnested rates column, matching the offset values.?",
            "sql": "SELECT * FROM `main_table` t CROSS JOIN UNNEST(t.tickers) WITH OFFSET tn LEFT JOIN UNNEST(t.rates) WITH OFFSET rn ON tn = rn"
        },
        {
            "description": "How to retrieve details about foo.baz and bar.qux events (within the past 96 hours)?",
            "sql": "WITH events AS (  SELECT        concat(module, '_', replace(lower(action), ' ', '_')) type,        detail,        cast(IF(id=0, null, id) as string) id,        timestamp,        userId,        pageName,  FROM  fe.logs l  WHERE l.timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 96 HOUR)        AND devicetype in ('desktop', 'mobile', 'tablet')        AND osname in ('Windows', 'Android', 'Mac OS', 'iOS')        AND (module='bar' AND action='qux')        OR (module='foo' AND action='baz') )SELECT TO_JSON_STRING(e) payloadfrom events e"
        },
        {
            "description": "How to retrieve the date in the format 'dd-mm-yyyy' by parsing a string in the format '%m-%Y'.?",
            "sql": "with parse_date AS (SELECT PARSE_DATE(\"%m-%Y\", '08-2019') as date)\nSELECT FORMAT_TIMESTAMP(\"%d-%m-%Y\", CAST(date as TIMESTAMP)) from parse_date"
        },
        {
            "description": "How to retrieve the most recent daily data from the AEMO2 database.?",
            "sql": "WITH\nmaxdate AS (\nSELECT\n  MAX(DATE(SETTLEMENTDATE)) as mx\nFROM\n  `biengine-252003.aemo2.daily`)\nSELECT\n  *\nFROM\n  `biengine-252003.aemo2.daily`\nWHERE\n  DATE(SETTLEMENTDATE) = (SELECT mx FROM maxdate LIMIT 1)"
        },
        {
            "description": "How to retrieve a list of vehicles and their corresponding trips, grouped by vehicle ID?",
            "sql": "SELECT vehicle_id, ARRAY_AGG(STRUCT(direction, trip)) trips\nFROM (\n  SELECT vehicle_id, direction, ARRAY_AGG(STRUCT(time, x, y) ORDER BY time) trip\n  FROM dataset\n  GROUP BY vehicle_id, direction\n)\nGROUP BY vehicle_id"
        },
        {
            "description": "How to retrieve all occurrences of the number 2 from the unnested array using the WITH OFFSET clause.?",
            "sql": "SELECT * FROM UNNEST([0, 1, 1, 2, 3, 5]) value with OFFSET n WHERE value = 2"
        },
        {
            "description": "How to retrieve the number of users for each week from their first login, along with the ratio of users in each week compared to the week with the most users.?",
            "sql": "select weeks_from_first_login, count, \n       count / max(count) over () as ratio\nfrom t;"
        },
        {
            "description": "How to retrieve the number of users by weeks from first login, along with the ratio to the first week's count.?",
            "sql": "select weeks_from_first_login, count,  count / first_value(count) over (order by weeks_from_first_login) as ratio from t;"
        },
        {
            "description": "How to retrieve the latest data from a BigQuery table with a name pattern of `ga_realtime_*` for the current day.?",
            "sql": "SELECT\n  field1,\n  field2,\n  field3\nFROM\n  `my_dataset.ga_realtime_*`\nWHERE\n  _TABLE_SUFFIX = FORMAT_DATE('%Y%m%d', CURRENT_DATE())"
        },
        {
            "description": "How to retrieve names from specific states?",
            "sql": "SELECT name, state\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE state IN UNNEST(SPLIT(%s))\nLIMIT 2"
        },
        {
            "description": "How to how to retrieve the domain and subdomain from a URL?",
            "sql": "SELECT url, \n  REGEXP_EXTRACT(url, \"^(?:https?:\\/\\/)?(?:[^\\/]*\\.)?([^\\/]*)\") AS domain_and_subdomain\nFROM [bigquery-public-data:samples.github_nested] \nLIMIT 100"
        },
        {
            "description": "How to retrieve the number of days until the next status change for each record in table 't'.?",
            "sql": "select t.*, row_number() over (partition by status, grp order by date date desc) as days_to_next_state\nfrom (select t.*, date_add(date, interval - seqnum day) as grp\n      from (select t.*, row_number() over (partition by status, order by date) as seqnum\n            from t\n           ) t\n     ) t"
        },
        {
            "description": "How to convert temperatures from Fahrenheit to Celsius in BigQuery?",
            "sql": "SELECT\n  ROUND((max-32)*5/9,1) celsius\nFROM\n  `bigquery-public-data.noaa_gsod.gsod19*`\nWHERE _TABLE_SUFFIX = '49'"
        },
        {
            "description": "How to parse a string in the format 'YYYYDDD' into a DATETIME, taking into account the day of year specified by DDD?",
            "sql": "CREATE TEMP FUNCTION PARSE_DATETIME_WITH_DAYS(x STRING) AS (DATETIME_ADD(PARSE_DATETIME('%Y%j', x), INTERVAL CAST(SUBSTR(x, -3) AS INT64) - 1 DAY));\nSELECT PARSE_DATETIME_WITH_DAYS('2013243')"
        },
        {
            "description": "How to retrieve the sensor1 and sensor2 readings for the same timestamp, or for timestamps where sensor1 reading is less than sensor2 reading?",
            "sql": "SELECT\n  s1.sensor1_time, \n  s2.sensor2_time,\n  s1.sensor1_value,\n  s2.sensor2_value\nFROM sensor1 s1\nJOIN (\n  SELECT sensor2_time, \n    LEAD(sensor2_time) OVER(ORDER BY sensor2_time) AS sensor2_time2,\n    sensor2_value\n  FROM sensor2\n) s2\nON s1.sensor1_time >= sensor2_time AND IFNULL(s1.sensor1_time < sensor2_time2, TRUE)"
        },
        {
            "description": "How to retrieve sensor1 and sensor2 data from different tables, where the sensor1 time is greater than or equal to the sensor2 time and less than the next sensor2 time.?",
            "sql": "SELECT\n  s1.sensor1_time, \n  s2.sensor2_time,\n  s1.sensor1_value,\n  s2.sensor2_value\nFROM sensor1 s1\nJOIN (\n  SELECT sensor2_time, \n    LEAD(sensor2_time) OVER(ORDER BY PARSE_TIME('%I:%M%p', sensor2_time)) AS sensor2_time2,\n    sensor2_value\n  FROM sensor2\n) s2\nON PARSE_TIME('%I:%M%p', s1.sensor1_time) >= PARSE_TIME('%I:%M%p', sensor2_time) \nAND IFNULL(PARSE_TIME('%I:%M%p', s1.sensor1_time) < PARSE_TIME('%I:%M%p', sensor2_time2), TRUE)"
        },
        {
            "description": "How to retrieve a table by joining the values from two subtables, sensor1 and sensor2, with the same timestamp.?",
            "sql": "SELECT `sensor1`.`sensor1_time`, `sensor1`.`sensor1_value`, `sensor2`.`sensor2_time`, `sensor2`.`sensor2_value`\nFROM `sensor1`\nJOIN `sensor2`\nON `sensor1`.`sensor1_time` = `sensor2`.`sensor2_time`"
        },
        {
            "description": "How to retrieve the sensor values for each sensor, grouped by time, with the sensor time being the most recent value for that sensor.?",
            "sql": "SELECT\n  MAX(CASE\n    WHEN sensor_time = sensor1_time\n    THEN sensor1_value\n    WHEN sensor_time = sensor2_time\n    THEN sensor2_value\n    ELSE NULL\n  END) AS most_recent_value,\n  sensor_time\nFROM (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY sensor_time ORDER BY sensor_time) AS rn\n  FROM your_table\n) subquery\nWHERE\n  rn = 1\nGROUP BY\n  sensor_time"
        },
        {
            "description": "How to generate a CREATE OR REPLACE TABLE DDL statement for a given table?",
            "sql": "WITH Components AS (\n  SELECT\n    CONCAT('`', table_catalog, '.', table_schema, '.', table_name, '`') AS table_name,\n    ARRAY_AGG(\n      STRUCT(column_name, data_type, is_nullable, is_partitioning_column, clustering_ordinal_position)\n      ORDER BY ordinal_position\n    ) AS columns,\n    (SELECT ARRAY_AGG(STRUCT(option_name, option_value))\n     FROM mydataset.INFORMATION_SCHEMA.TABLE_OPTIONS AS t2\n     WHERE t.table_name = t2.table_name) AS options\n  FROM mydataset.INFORMATION_SCHEMA.TABLES AS t\n  LEFT JOIN mydataset.INFORMATION_SCHEMA.COLUMNS\n  USING (table_catalog, table_schema, table_name)\n  WHERE table_type = 'BASE TABLE'\n  GROUP BY table_catalog, table_schema, t.table_name\n)\nSELECT\n  CONCAT(\n    'CREATE OR REPLACE TABLE ', table_name, '\n',\n    MakeColumnList(columns),\n    MakePartitionByClause(columns),\n    MakeClusterByClause(columns),\n    MakeOptionList(options))\nFROM Components"
        },
        {
            "description": "How to retrieve an enquiry reference along with the name and duration of the first and second destination associated with it.?",
            "sql": "SELECT EnquiryReference, \n  Destinations[OFFSET(0)].Name AS Destination1,\n  Destinations[SAFE_OFFSET(1)].Name AS Destination2,\n  Destinations[OFFSET(0)].Duration AS Duration1,\n  Destinations[SAFE_OFFSET(1)].Duration AS Duration2\nFROM `project.dataset.table`"
        },
        {
            "description": "How to how to retrieve row data as a pre-aggregated bigtable row using DOT to access deeply nested fields.?",
            "sql": "SELECT\n  row_id,\n  params.key,\n  params.value\nFROM `my_dataset.my_table`"
        },
        {
            "description": "How to retrieve data from nested JSON strings using a user-defined JS function?",
            "sql": "CREATE TEMPORARY FUNCTION parseJson(y STRING)\nRETURNS ARRAY<STRING>\nLANGUAGE js AS \"\"\"\n  var z = new Array();\n  processKey(JSON.parse(y), '');\n  function processKey(node, parent) {\n    Object.keys(node).map(function(key) {\n      if (!node[key]) {\n        value = 'n/a'\n      } else {\n        value = node[key].toString();\n      }\n      if (value !== '[object Object]') {\n        if (parent !== '' && parent.substr(parent.length-1) !== '.') {\n          z.push(parent + '.' + key + ':' + value)\n        } else {\n          z.push(key + ':' + value)\n        }\n      } else {\n        if (parent !== '' && parent.substr(parent.length-1) !== '.') {parent += '.'};\n        processKey(node[key], parent + key);\n      };\n    });         \n  };\n  return z\n\"\"\";\nWITH `my_table` AS (\n  SELECT 1 id, '{\"sku_types\":{\"id\":\"5433306\",\"product_code\":\"adfklj_ewkj\"},\"additional_info\":\"Face 30 ml\",\"stock_level\":\"20+\"}' AS json_string UNION ALL \n  SELECT 2, '{\"additional_info\":\"Face 100 ml\",\"offer_info\":\"30%\"}' AS json_string union all\n  SELECT 3 as id , '{\"offer_info\":\"30%\", \"price\":null}' AS json_string  \n)\nSELECT id, \n  ARRAY(\n    SELECT AS STRUCT SPLIT(kv, ':')[OFFSET(0)] key, SPLIT(kv, ':')[SAFE_OFFSET(1)] value\n    FROM UNNEST(parseJson(json_string)) kv\n  ) params\nFROM my_table"
        },
        {
            "description": "How to retrieve rows from BigQuery where the 'stock_level' contains a '+' sign.?",
            "sql": "SELECT * FROM `bigquery-public-data.utility_us.openaq` WHERE stock_level LIKE '%+'"
        },
        {
            "description": "How to retrieve decrypted data using AES_CBC_PKCS?",
            "sql": "SELECT\n  AEAD.DECRYPT_STRING(\n    KEYS.ADD_KEY_FROM_RAW_BYTES(\n      b'', 'AES_CBC_PKCS', FROM_BASE64('dfrBArd8b6YZFDGTYrZtQa==')),\n    FROM_BASE64('/FCM1XMvr+rHwZx'), '');"
        },
        {
            "description": "How to retrieve the plaintext value for the encrypted data using a key stored in BigQuery.?",
            "sql": "WITH EncryptedInput AS (\n  SELECT FROM_HEX('deed2a88e73dccaa30a9e6e296f62be27db30db16f76d3f42c85d31db3f46376') AS ciphertext,\n    b'1234567890123456' AS key UNION ALL\n  SELECT FROM_HEX('deed2a88e73dccaa30a9e6e296f62be2ea3f4c2ac2c8863306fd9ff87e10497b61d86111fafd0d0fe0046d7e199044ec'),\n    b'1234567890123456' UNION ALL\n  SELECT FROM_HEX('0102030405060708090a0b0c0d0e0f1073d8712936ea9899952e97284288c1cd7b7cbfff0a53ae87a19454f7d84082a07a25fc01031b5e08c6b7ce6520989b82'),\n    b'98765432101234567890123456789012' UNION ALL\n  SELECT NULL, b'1234567890123456' UNION ALL\n  SELECT FROM_HEX('deed2a88e73dccaa30a9e6e296f62be27db30db16f76d3f42c85d31db3f46376'),\n    NULL\n)\nSELECT AEAD.DECRYPT_STRING(KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'AES_CBC_PKCS', key), ciphertext, '') AS plaintext\nFROM EncryptedInput;"
        },
        {
            "description": "How to retrieve the top 100 channels with the highest transaction counts for the specified date range?",
            "sql": "SELECT\n  PARSE_DATE('%Y%m%d', date) date,  \n  channelGrouping AS channel,\n  sum(totals.visits) visits, \n  IFNULL(SAFE_DIVIDE(sum(totals.transactions),sum(totals.visits)),0) conversion_rate, \n  IFNULL(sum(totals.transactions),0) as transaction, \n  IFNULL(sum(totals.transactionRevenue),0) as revenue, \n  IFNULL(sum(totals.transactionRevenue)/ sum(totals.transactions),0) as aov\nFROM\n  `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\nGROUP BY date, channel\nORDER BY transaction desc \nLIMIT\n  100"
        },
        {
            "description": "How to retrieve rows from the audit_log table for all tables edited on or after a certain date, where the date is specified as a string in the format \"YYYYMMDD\".?",
            "sql": "SELECT\n  timestamp,\n  user,\n  object_id\nFROM\n  `x.com:projectx.audit_log.audit_log*`\nWHERE\n    _TABLE_SUFFIX >= \"20190401\"\n  and event = \"EDITED\""
        },
        {
            "description": "How many iOS Live Chat and Direct Message events occurred each day?",
            "sql": "SELECT\n  'iOS' as app_source,\n  h.eventInfo.eventCategory,\n  h.eventinfo.eventaction,\n  h.eventinfo.eventlabel,\n  COUNT(1) events,\n  COUNT(DISTINCT CONCAT(fullvisitorid, CAST(visitstarttime AS string))) uniqueEvents\nFROM\n   `xxxxxxxx-xxxx.xxxxxxxx.ga_sessions_*` t,\n  UNNEST(hits) h\nWHERE\n  h.type='EVENT'\n  and (h.eventInfo.eventCategory = 'Live' and h.eventInfo.eventLabel = 'Team Chat')\n  or (h.eventInfo.eventCategory = 'Messages' and h.eventInfo.eventLabel = 'Direct Message')\n  and date >= \"20190801\"\nGROUP BY\n  1,2,3,4\nORDER BY\n  events DESC"
        },
        {
            "description": "How to retrieve the JSON strings (with year, month and week values) for each product from a table with one JSON column?",
            "sql": "SELECT id, name, product_id,\nARRAY(\n  SELECT AS STRUCT year, ARRAY_AGG(STRUCT(month, weeks)) months\n  FROM (\n    SELECT year, month, ARRAY_AGG(STRUCT(week, value)) weeks \n    FROM (\n      SELECT\n        REGEXP_EXTRACT(kv, r'y(\\d{4})') year, \n        REGEXP_EXTRACT(kv, r'm(\\d{2})') month, \n        IFNULL(REGEXP_EXTRACT(kv, r'w\\d{2}'), 'w0') week,\n        REGEXP_EXTRACT(kv, r': (\\d*)') value\n      FROM UNNEST(REGEXP_EXTRACT_ALL(json, r'\"y\\d{4}m\\d{2}(?:w\\d{2})?\": \\d*')) kv\n    )\n    GROUP BY year, month\n  )\n  GROUP BY year\n) AS json\nFROM `bigquery-public-data.samples.shakespeare`"
        },
        {
            "description": "How to retrieve the other products purchased by users who purchased product GGOEYOCR077799 between April 1, 2017 and April 20, 2017, ordered by quantity purchased.?",
            "sql": "SELECT productSKU AS other_purchased_products, COUNT(productSKU) AS quantity\nFROM (\n  SELECT fullVisitorId, prod.productSKU, hit.eCommerceAction.action_type \n  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n  UNNEST(hits) hit, UNNEST(hit.product) prod\n  WHERE _TABLE_SUFFIX BETWEEN '20170401' AND '20170420'\n) \nWHERE fullVisitorId IN (\n  SELECT fullVisitorId\n  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n  UNNEST(hits) hit, UNNEST(hit.product) prod\n  WHERE _TABLE_SUFFIX BETWEEN '20170401' AND '20170420'\n  AND prod.productSKU LIKE '%GGOEYOCR077799%'\n  AND hit.eCommerceAction.action_type = '6'\n  GROUP BY fullVisitorId \n)\nAND productSKU IS NOT NULL\nAND productSKU !='GGOEYOCR077799'\nAND action_type = '6'\nGROUP BY other_purchased_products\nORDER BY quantity DESC"
        },
        {
            "description": "How to retrieve the first row of the SQL query results?",
            "sql": "SELECT * FROM (SELECT * FROM t1 ORDER BY Row LIMIT 1)"
        },
        {
            "description": "How to retrieve Employee pairs mapped to their Supervisor, where the Employee with no supervisors is mapped to their first-level subordinates.?",
            "sql": "SELECT t.Supervisor,\n  IF(t.Supervisor = t5.Supervisor, \n    STRUCT(Employee2 AS Employee1, NULL AS Employee2),\n    STRUCT(t5.Supervisor AS Employee1, Employee2 AS Employee2)\n  ).* \nFROM (\n  SELECT t1.Employee Supervisor,\n    COALESCE(t4.Employee, t3.Employee, t2.Employee) Employee2\n  FROM `project.dataset.table` t1\n  LEFT JOIN `project.dataset.table` t2 ON t2.Supervisor = t1.Employee\n  LEFT JOIN `project.dataset.table` t3 ON t3.Supervisor = t2.Employee\n  LEFT JOIN `project.dataset.table` t4 ON t4.Supervisor = t3.Employee\n  WHERE t1.Supervisor IS NULL\n) t\nLEFT JOIN `project.dataset.table` t5 ON t5.Employee = t.Employee2"
        },
        {
            "description": "How to count distinct employees in each row?",
            "sql": "SELECT ROW,COUNT(DISTINCT Employee1)  AS EmployeeCount\nFROM Row_Supervisor_Employee\nGROUP BY ROW"
        },
        {
            "description": "How to how to create a dataframe from a JSON object with Pandas using BigQuery SQL?",
            "sql": "SELECT\n(JSON_VALUE(value, '$.date') AS date),\n(JSON_VALUE(value, '$.rates') AS rates) \nFROM UNNEST([struct(date STRING, rates ARRAY<STRUCT<exchange STRING, rate FLOAT64>>)]) AS t(value)"
        },
        {
            "description": "How to retrieve the hour of day with the most purchases for each country.?",
            "sql": "WITH cte AS (\nSELECT country\n     , time_trunc(time, hour) AS hourofday\n     , COUNT(id) AS purchases\n     , RANK() OVER(PARTITION BY country ORDER BY COUNT(id) DESC) AS rnk\nFROM t\nGROUP BY country, time_trunc(time, hour)\n)\nSELECT *\nFROM cte\nWHERE rnk = 1"
        },
        {
            "description": "How to retrieve the dataset ID, table ID, and other information for a destination BigQuery table.?",
            "sql": "SELECT\n  destination_dataset_id,\n  destination_table_id,\n  write_disposition,\n  destination_uri\nFROM\n  `bigquery-public-data.google_cloud_analytics.ga_sessions_*`\nLIMIT 10;"
        },
        {
            "description": "How to extract values from nested JSON strings using regular expressions?",
            "sql": "SELECT params, \n  REGEXP_EXTRACT(params, r'{ifnotmobile:(.*?)}') AS ifnotmobile,\n  REGEXP_EXTRACT(params, r'{ifmobile:(.*?)}') AS ifmobile\nFROM `project.dataset.table`"
        },
        {
            "description": "How to use multiple BigQuery parameters in a single query with CASE statements to conditionally apply the values based on specific criteria?",
            "sql": "SELECT * FROM UNNEST([STRUCT<track STRING> (CASE\n  WHEN ifnotmobile IS NOT NULL THEN ifnotmobile\n  WHEN ifmobile IS NOT NULL THEN ifmobile\nEND), \nSTRUCT<nccoupon STRING> (CASE\n  WHEN nccoupon IS NOT NULL THEN nccoupon\nEND))])"
        },
        {
            "description": "How to retrieve the URL and value from table `t1` for each item URL and value from table `t2` where the item URL is a substring of the URL in `t1`.?",
            "sql": "with t1 as (\n  select 'google.com' as url, 1 as value union all\n  select 'google.com/s1', 2\n ),\n t2 as (\n  select 'google.com/example' as item_url, 3 as item_value union all\n  select 'google.com/s1/example', 4\n )\nselect t2.item_url, t2.item_value, array_agg(t1 order by length(t1.url) desc limit 1)[offset(0)].*\nfrom t1 JOIN\n     t2\n     ON t2.item_url like concat(t1.url, '%')\ngroup by t2.item_url, t2.item_value;"
        },
        {
            "description": "How to retrieve all information for the longest matching URL in t1 where t2.item_url starts with t1.url?",
            "sql": "SELECT t12.* EXCEPT (seqnum)\nFROM (SELECT t2.*, t1.*, \n             ROW_NUMBER() OVER (PARTITION BY t2.item_url, t2.item_value order by length(t1.url) desc) as seqnum \n      from t1 JOIN \n           t2 \n           ON t2.item_url like concat(t1.url, '%') \n     ) t12\nWHERE seqnum = 1;"
        },
        {
            "description": "How to retrieve the most specific matching item from t1 for each item in t2 where the item_url in t2 contains the url in t1.?",
            "sql": "SELECT t2.*, \n       (SELECT t1\n        FROM t1\n        WHERE t2.item_url LIKE CONCAT(t1.url, '%')\n        ORDER BY LENGTH(t1.url) DESC\n        LIMIT 1\n       ).* \nFROM t2"
        },
        {
            "description": "How to retrieve data from table 'person', excluding the 'person_id' column, after performing inner joins with tables 'hospital' and 'reading' based on the 'hosp_id' column.?",
            "sql": "select * EXCEPT (person_id) from person a inner join hospital b using (hosp_id) inner join reading c using (hosp_id)"
        },
        {
            "description": "How to retrieve all the rows from the table `project.dataset.table` where the `trip_start_timestamp` is between '2015-12-23' and '2015-12-27'?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT TIMESTAMP('2015-12-27 06:15:00 UTC') trip_start_timestamp UNION ALL\n  SELECT TIMESTAMP('2015-12-26 06:15:00 UTC')\n)\nSELECT\n  *\nFROM\n  `project.dataset.table`\nWHERE\n  trip_start_timestamp >= '2015-12-23'\n  AND trip_start_timestamp <= '2015-12-27'"
        },
        {
            "description": "How to retrieve rows from a table where the CAST of trip_start_timestamp AS DATE is within a specified range of dates.?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT TIMESTAMP('2015-12-27 06:15:00 UTC') trip_start_timestamp UNION ALL\n  SELECT TIMESTAMP('2015-12-26 06:15:00 UTC')\n)  SELECT *\nFROM `project.dataset.table`\nWHERE CAST(trip_start_timestamp AS DATE) >= '2015-12-23'\nAND CAST(trip_start_timestamp AS DATE) <= '2015-12-27'"
        },
        {
            "description": "How to retrieve the maximum number of completed transactions per row.?",
            "sql": "SELECT\n  MAX(IF((hi.Info.Action='complete'),1, 0)) WITHIN RECORD AS transact\nFROM table"
        },
        {
            "description": "How to retrieve the maximum completion status for each entry in the 'hi' column?",
            "sql": "SELECT \n  (SELECT MAX(IF(Info.Action='complete',1, 0)) FROM UNNEST(hi)) AS transact\nFROM table"
        },
        {
            "description": "How to retrieve employee benefits based on their relationship to the employee?",
            "sql": "SELECT \n  EmployeeName,\n  IF(Relationship IS NULL, 'Self', Relationship) Relationship, \n  IFNULL(Name, EmployeeName) Name, \n  MAX(IF(BenefitCode = 'DEN', IFNULL(BenefitOption, BenefitCode), NULL)) AS DEN,\n  MAX(IF(BenefitCode = 'MED', IFNULL(BenefitOption, BenefitCode), NULL)) AS MEDICAL,\n  MAX(IF(BenefitCode = 'VIS', IFNULL(BenefitOption, BenefitCode), NULL)) AS VISION  \nFROM `project.dataset.table`\nGROUP BY Name, EmployeeName, Relationship"
        },
        {
            "description": "How to retrieve employees' health insurance coverage and their relationships to the people they cover?",
            "sql": "SELECT\n  EmployeeName,\n  Relationship,\n  Name,\n  CASE\n    WHEN MEDICAL IS NOT NULL\n    THEN 'MEDICAL'\n    WHEN VISION IS NOT NULL\n    THEN 'VISION'\n    ELSE 'None'\n  END AS Coverage\nFROM EmployeeInsurance"
        },
        {
            "description": "How to retrieve a list of employee names and their benefits, where the benefits are an array of structs containing the name, relationship, and benefit options (DEN, MEDICAL, VISION) for each benefit.?",
            "sql": "SELECT EmployeeName,\n  ARRAY_AGG(STRUCT(Name, Relationship, DEN, MEDICAL, VISION)) benefits\nFROM (\n  SELECT \n    EmployeeName,\n    IF(Relationship IS NULL, 'Self', Relationship) Relationship, \n    IFNULL(Name, EmployeeName) Name, \n    MAX(IF(BenefitCode = 'DEN', IFNULL(BenefitOption, BenefitCode), NULL)) AS DEN,\n    MAX(IF(BenefitCode = 'MED', IFNULL(BenefitOption, BenefitCode), NULL)) AS MEDICAL,\n    MAX(IF(BenefitCode = 'VIS', IFNULL(BenefitOption, BenefitCode), NULL)) AS VISION  \n  FROM `project.dataset.table`\n  GROUP BY Name, EmployeeName, Relationship \n) \nGROUP BY EmployeeName"
        },
        {
            "description": "How to retrieve rows from the same table with multiple matching rows per group?",
            "sql": "SELECT\n  EmployeeName,\n  benefits.Name,\n  benefits.Relationship,\n  benefits.DEN,\n  benefits.MEDICAL,\n  benefits.VISION\nFROM\n  `benefits-demo.hr.employee_benefits`\nORDER BY\n  EmployeeName, benefits.Name\nLIMIT 10"
        },
        {
            "description": "How to retrieve distinct rows for a given column in BigQuery?",
            "sql": "SELECT * EXCEPT(ct) FROM (SELECT *, COUNT() OVER(PARTITION BY mnt) AS ct ) WHERE ct=1 or zel='X'"
        },
        {
            "description": "How to retrieve the name of a file without the extension.?",
            "sql": "SELECT\nname_with_extension,\nREGEXP_EXTRACT(name_with_extension, r'.*\\.(.*)') AS name"
        },
        {
            "description": "How to retrieve the name of a file excluding its extension?",
            "sql": "SELECT name_with_extension, \n  SUBSTR(name_with_extension, 1, LENGTH(name_with_extension) - STRPOS(REVERSE(name_with_extension), '.')) name\nFROM `project.dataset.table`"
        },
        {
            "description": "How to assign a randomly chosen user ID to any row with a non-null pseudo user ID that does not yet have a user ID?",
            "sql": "UPDATE `project.dataset.table` t\nSET user_id = map.user_id\nFROM (\n  SELECT user_pseudo_id, MIN(user_id) user_id\n  FROM `project.dataset.table`\n  WHERE NOT user_id IS NULL\n  GROUP BY user_pseudo_id\n) map\nWHERE t.user_pseudo_id = map.user_pseudo_id\nAND t.user_ID IS NULL"
        },
        {
            "description": "How to create nested arrays of structs using ARRAY_AGG and STRUCT?",
            "sql": "CREATE OR REPLACE TABLE dataset.tempTable as (select column1, column2, column3, ARRAY_AGG(STRUCT(ArrayObjectColumn1, ArrayObjectColumn2, ArrayObjectColumn3)) as InsideArrayOfStructs FROM sourceDataset.sourceTable GROUP BY column1, column2, column3) CREATE OR REPLACE TABLE dataset.finalTable as (select column1, ARRAY_AGG(STRUCT(column2, column3, InsideArrayOfStructs)) as OutsideArrayOfStructs FROM dataset.tempTable GROUP BY Column1)"
        },
        {
            "description": "How to split a string into multiple rows and join the rows with the original table?",
            "sql": "SELECT acname, amount, domain\nFROM `project.dataset.dummy`,\nUNNEST(SPLIT(domains)) domain"
        },
        {
            "description": "How to retrieve data from a table and unnest a delimited string field into multiple rows?",
            "sql": "WITH `project.dataset.dummy` AS (\n  SELECT 'abc' acname, 100 amount, 'a,b,c' domains UNION ALL\n  SELECT 'pqr', 300, 'p,q,r' UNION ALL\n  SELECT 'lmn', 500, 'l,m,n'\n)\nSELECT acname, amount, domain\nFROM `project.dataset.dummy`,\nUNNEST(SPLIT(domains)) domain"
        },
        {
            "description": "How to group all rows by the 'acname' column and calculate the sum of the 'amount' column?",
            "sql": "SELECT acname, SUM(amount) AS total_amount FROM Row GROUP BY acname"
        },
        {
            "description": "How to aggregate columns into a JSON string?",
            "sql": "SELECT FORMAT('{%s}', STRING_AGG(FORMAT('\"%d\":\"%d\"', column1, column2))) AS Weeksales\nFROM `project.dataset.table`"
        },
        {
            "description": "How to retrieve a comma-separated list of dates represented as strings, sourced from the 't' table and grouped by weeks.?",
            "sql": "SELECT STRING_AGG(FORMAT('%T', t)) AS Weeksales\nFROM `project.dataset.table` t"
        },
        {
            "description": "How to create a single week sales figure from an array of daily figures?",
            "sql": "SELECT FORMAT('%t', ARRAY_AGG(t)) AS Weeksales\nFROM `project.dataset.table` t"
        },
        {
            "description": "How to extract specific purchase information for all users whose purchase dates fall within their respective specified date ranges.?",
            "sql": "SELECT p.*\nFROM `purchases` p\nJOIN `users` u\nON p.userId = u.userId\nAND p.purchase_date BETWEEN u.start AND u.end"
        },
        {
            "description": "How to retrieve the child with the least number of toys for each parent?",
            "sql": "WITH `project.dataset.table` AS (\nSELECT 1 id, STRUCT([STRUCT('mike' AS name, ['woody'] AS toys)] AS children) AS person    UNION ALL\nSELECT 2 id, STRUCT([STRUCT('nik', ['buzz', 'bobeep']), ('john', ['car', 'buzz', 'bobeep'])] AS children) AS person   UNION ALL\nSELECT 3 id, STRUCT([STRUCT('vincent', IF(TRUE,[],['']))] AS children) AS person\n)\nSELECT * \n  REPLACE(\n    (SELECT AS STRUCT * \n        REPLACE (\n          (SELECT ARRAY_AGG(t) FROM\n          (SELECT * REPLACE((SELECT toy FROM UNNEST(toys) toy WITH OFFSET ORDER BY OFFSET LIMIT 1) AS toys) FROM UNNEST(children)) t)\n          AS children)\n      FROM UNNEST([person]))\n  AS person)\nFROM `project.dataset.table`"
        },
        {
            "description": "How many children does each person have?",
            "sql": "SELECT person.name, ARRAY_LENGTH(person.children) AS num_children\nFROM UNNEST(GENERATE_ARRAY(1, 3)) AS id\nCROSS JOIN (SELECT STRUCT(name) AS name, STRUCT(name) AS children) AS person;"
        },
        {
            "description": "How to retrieve the number of children per person in the table.?",
            "sql": "SELECT person.name, ARRAY_LENGTH(person.children)"
        },
        {
            "description": "How to retrieve the number of unique users who appear in the same groups across multiple tables.?",
            "sql": "SELECT times_show_up, \n  COUNT(DISTINCT user_id) number_of_users, \n  group_name1, group_name2\nFROM (\n  SELECT COUNTIF(a.user_id = b.user_id) times_show_up, \n    b.user_id, \n    group_name1, group_name2\n  FROM table1 a\n  CROSS JOIN table2 b\n  GROUP BY user_id, group_name1, group_name2\n) \nGROUP BY times_show_up, group_name1, group_name2"
        },
        {
            "description": "How to retrieve the number of paying customers in each of the last 30 months.?",
            "sql": "select t AS month, count(distinct d.id) AS paying_customers\nfrom unnest(generate_timestamp_array( date_timestamp(current_timestamp, interval -30*2 day),\n                                current_timestamp,\n                                interval 30 day\n                               )\n           ) ts left join\n     my_data d\n     on d.current_period_end > timestamp(ts, interval 30 day) and\n        d.current_period_start < t\ngroup by ts\norder by ts;"
        },
        {
            "description": "How to retrieve an array of all of the DISTINCT h2 values for each unique h1 value in table t.?",
            "sql": "select h1, array_agg(DISTINCT h2)\nfrom t\ngroup by h1;"
        },
        {
            "description": "How to delete all rows in the SandboxTable table from July 1st, 2018 to July 31st, 2018?",
            "sql": "DELETE\nFROM Sandbox.SandboxTable\nwhere\nDate >= '2018-07-01T00:00:00' AND Date <= '2018-07-31T23:59:59'"
        },
        {
            "description": "How to retrieve the average dead time in minutes in the last week across all stores?",
            "sql": "SELECT week, store, AVG(minutes) AS avg_dead_time_in_minutes\nFROM (\n  SELECT store, week, \n    TIMESTAMP_DIFF(created, LAG(created) OVER(PARTITION BY week, store ORDER BY created), MINUTE) AS minutes\n  FROM (\n    SELECT store, week, \n      PARSE_TIMESTAMP('%F %T', CONCAT(local_created_day, ' ', local_created)) AS created\n    FROM `project.dataset.table`\n  )\n) GROUP BY week, store\nHAVING NOT avg_dead_time_in_minutes IS NULL"
        },
        {
            "description": "How to retrieve the week and store for rows having an average dead time greater than 100 minutes.?",
            "sql": "SELECT\n  week,\n  store,\n  avg_dead_time_in_minutes\nFROM\n  TABLE\nWHERE\n  avg_dead_time_in_minutes > 100"
        },
        {
            "description": "How to retrieve the ratings and burger types chosen by users in the last 10 days.?",
            "sql": "WITH rate AS\n (SELECT user_id, event_name, param.value.string_value AS rating \n  FROM `table.events_*`, UNNEST(event_params) AS param\n  WHERE event_name IN (\"clicked_on_feedback\")\n    AND event_timestamp > UNIX_MICROS(TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 10 DAY))\n    AND param.key = \"rating\"\n ), brgr AS \n (SELECT user_id, event_name, param.value.string_value AS burger_type\n  FROM `table.events_*`, UNNEST(event_params) AS param\n  WHERE event_name IN (\"burger_chosen\")\n    AND event_timestamp > UNIX_MICROS(TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 10 DAY))\n    AND param.key = \"burger_type\")\nSELECT rate.user_id, rate.event_name AS event_name_1, rate.rating,\n       brgr.event_name AS event_name_2, brgr.burger_type\nFROM rate  \nINNER JOIN brgr ON rate.user_id = brgr.user_id"
        },
        {
            "description": "How to retrieve the first 10 rows of the 'test' table in the 'datasetId' dataset, located in the 'projectId' project?",
            "sql": "SELECT * from projectId.datasetId.test limit 10"
        },
        {
            "description": "How to retrieve the median salary for all female employees, grouped by their manager.?",
            "sql": "SELECT\n  manager,\n  fhoffa.x.median(ARRAY_AGG(salary)) AS median_of_women_salaries\nFROM employees_table\nWHERE gender = 'woman'\nGROUP BY manager"
        },
        {
            "description": "How to retrieve the difference between the maximum value in May 2017 and the maximum value in January 2017 for each ID?",
            "sql": "select id,\n       (max(case when yearmonth = 201705 then value end) -\n        max(case when yearmonth = 201701 then value end) -\n       )\nfrom t\nwhere yearmonth in (201705, 201701)\ngroup by id;"
        },
        {
            "description": "How to create a BigQuery partitioned and clustered table named `mytable` from the contents of an existing table?",
            "sql": "CREATE OR REPLACE TABLE `mydataset.mytable`\nPARTITION BY DATE(timestamp_column)\nCLUSTER BY col1\nAS\nSELECT *\nFROM `original.table`"
        },
        {
            "description": "How to retrieve data partitioned by date column and clustered by column in multiple rows, unnest an array column into rows?",
            "sql": "CREATE OR REPLACE TABLE `mydataset.mytable`\nPARTITION BY DATE(timestamp_column)\nCLUSTER BY col1_u\nAS\nSELECT *, col1_u\nFROM `original.table`, UNNEST(col1) col1_u"
        },
        {
            "description": "How to create a BigQuery table with partition and clustering?",
            "sql": "CREATE OR REPLACE TABLE `mydataset.mytable`\nPARTITION BY ts_year\nCLUSTER BY col1_u\nAS\nSELECT *, col1_u, TIMESTAMP_TRUNC(ts_column, YEAR) ts_year\nFROM `original.table`, UNNEST(col1) col1_u"
        },
        {
            "description": "How to retrieve the total and segmented unique pageviews across all page titles in a dataset.?",
            "sql": "SELECT\npageTitle,\nSUM(unique_pageviews) AS unique_pageviews,\nSUM(CASE WHEN traffic_channel = 'Organic' THEN unique_pageviews ELSE 0 END) AS Organic,\nSUM(CASE WHEN traffic_channel = 'Email'   THEN unique_pageviews ELSE 0 END) AS Email,\nSUM(CASE WHEN traffic_channel = 'Paid'    THEN unique_pageviews ELSE 0 END) AS Paid\nFROM yourTable\nGROUP BY\n    pageTitle;"
        },
        {
            "description": "How to retrieve latitude and longitude from a geometry column?",
            "sql": "SELECT\n  ST_X(locationCoords) as longitude,\n  ST_Y(locationCoords) as latitude\nFROM\n  dataTable"
        },
        {
            "description": "How to extract column values when records have multiple values separated by a delimiter or pattern?",
            "sql": "WITH data AS (select urls as url from YOUR_TABLE_NAME)\nSELECT\n  REGEXP_EXTRACT(url, r\"([\\d]+)\")\n  AS ids\nFROM data;"
        },
        {
            "description": "How to determine if a customer has booked before a specific enquiry date?",
            "sql": "with first_booking as (  select CustomerID, min(Enquirydate) as first_booking_date from <dataset>.<table> where Booked = TRUE group by 1 )\nselect  a.Enquirydate,  a.Booked,  a.CustomerID,  case when b.first_booking_date is not null then 'Yes' else 'No' end as has_booked_before from <dataset>.<table> a  left join first_booking b on a.CustomerID = b.CustomerID and b.first_booking_date < a.Enquirydate"
        },
        {
            "description": "How to retrieve all distinct values of trip_start_timestamp from a table named `project.dataset.table` where trip_start_timestamp is greater than '2019-08-12'.?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT CURRENT_TIMESTAMP() trip_start_timestamp UNION ALL\n  SELECT TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY), DAY) UNION ALL\n  SELECT TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 DAY)\n)\nSELECT trip_start_timestamp\nFROM `project.dataset.table`\nWHERE trip_start_timestamp > '2019-08-12'"
        },
        {
            "description": "How to retrieve all trip start timestamps that occurred on or after August 12, 2019?",
            "sql": "SELECT trip_start_timestamp\nFROM `project.dataset.table`\nWHERE trip_start_timestamp >= '2019-08-12'"
        },
        {
            "description": "How to retrieve records from a table and add a column indicating whether the customer had booked before the current booking date.?",
            "sql": "with first_booking as (\n  select CustomerID, min(Enquirydate) as first_booking_date from <dataset>.<table> where Booked = TRUE group by 1\n)\nselect\n  a.Enquirydate,\n  a.Booked,\n  a.CustomerID,\n  case when b.first_booking_date is not null then 'Yes' else 'No' end as has_booked_before\nfrom <dataset>.<table> a\nleft join first_booking b on a.CustomerID = b.CustomerID and b.first_booking_date < a.Enquirydate"
        },
        {
            "description": "How to retrieve the trip start timestamps from all trips that started on or after August 12, 2019.?",
            "sql": "SELECT trip_start_timestamp\nFROM `project.dataset.table`\nWHERE trip_start_timestamp >= '2019-08-12'"
        },
        {
            "description": "How to retrieve the top 50 Stack Overflow users with their display name, score, view count, the title of their most popular questions, and the date that question was posted?",
            "sql": "SELECT display_name name, score, view_count, title, DATE \nFROM `bigquery-public-data.stackoverflow.users` AS u  \nINNER JOIN (\n  SELECT owner_user_id, DATE(creation_date) DATE, view_count, score, title \n  FROM `bigquery-public-data.stackoverflow.stackoverflow_posts` a\n  JOIN (\n    SELECT MAX(DATE(creation_date)) max_date\n    FROM `bigquery-public-data.stackoverflow.stackoverflow_posts`\n  ) b\n  ON DATE(creation_date) = max_date\n  WHERE view_count IS NOT NULL AND owner_user_id IS NOT NULL AND title IS NOT NULL\n) AS p\nON u.id = p.owner_user_id \nORDER BY score DESC\nLIMIT 50"
        },
        {
            "description": "How to calculate the turnover of employees by dividing the terms by the average headcount?",
            "sql": "SELECT *, terms/((start_headcount+end_headcount)/2) AS turnover  \nFROM (\n  <query for your first step>\n)"
        },
        {
            "description": "How to parse a string representing a BigQuery STRUCT data type into a JavaScript object?",
            "sql": "CREATE FUNCTION parse(structString STRING) RETURNS STRUCT<type STRING>\nAS (  \n  let tokenizer = /([a-z_]\\w*)|\\S|$/gi;\n  function next(identifier, expected) {\n    let match = tokenizer.exec(structString);\n    function error(expected) {\n      throw `Expected ${expected} but got ${match[0]} at ${match.index}`;\n    }\n    match[0] = match[0] || \"<EOF>\";\n    if (identifier && !match[1]) error(identifier);\n    if (expected && !expected.includes(match[0])) error(expected.join(\" or \"))\n    return match[0];\n  }\n  function getType() {\n    let fieldType = next(\"type identifier or STRUCT or ARRAY\");\n    if (fieldType === \"STRUCT\") {\n      next(null, [\"<\"] );\n      fieldType = {};\n      do {\n        fieldType[next(\"field identifier\")] = getType();\n      } while (next(null, [\",\", \">\"]) === \",\");\n    } else if (fieldType === \"ARRAY\") {\n      next(null, [\"<\"] );\n      fieldType = [getType()];\n      next(null, [\">\"]);\n    }\n    return fieldType;\n  }\n  let result = getType();\n  next(null, [\"<EOF>\"] );\n  return result;\n);\n\n// Sample input & call\nlet structString = \"STRUCT<name STRING, email STRING, time_sec INT64, tz_offset INT64, date STRUCT<seconds INT64, nanos INT64>, phones ARRAY<STRING>>\";\nlet obj = parse(structString);\nconsole.log(obj);"
        },
        {
            "description": "How to extract the quarter-of-hour timestamp of a given timestamp?",
            "sql": "SELECT ts, \n  TIMESTAMP_SECONDS(UNIX_SECONDS(ts) - MOD(UNIX_SECONDS(ts), 15 * 60)) ts_rounded_to_quarter_of_hour\nFROM `project.dataset.table`"
        },
        {
            "description": "How to round a TIMESTAMP value to the nearest quarter of an hour?",
            "sql": "CREATE TEMP FUNCTION TIMESTAMP_TRUNC_TO_QUATER_OF_HOUR(ts TIMESTAMP) AS ((  SELECT TIMESTAMP_SECONDS(ts_seconds_since_epoch - MOD(ts_seconds_since_epoch, 15 * 60))  FROM UNNEST([UNIX_SECONDS(ts)]) ts_seconds_since_epoch));SELECT ts,   TIMESTAMP_TRUNC_TO_QUATER_OF_HOUR(ts) AS ts_rounded_to_quarter_of_hourFROM `project.dataset.table`"
        },
        {
            "description": "How to retrieve timestamps rounded down to the nearest quarter of an hour (15 minutes) from a given table.?",
            "sql": "CREATE TEMP FUNCTION TIMESTAMP_TRUNC_TO_QUATER_OF_HOUR(ts TIMESTAMP) AS ((  SELECT TIMESTAMP_SECONDS(ts_seconds_since_epoch - MOD(ts_seconds_since_epoch, 15 * 60))  FROM UNNEST([UNIX_SECONDS(ts)]) ts_seconds_since_epoch));\nWITH `project.dataset.table` AS (\n  SELECT TIMESTAMP '2019-07-05 21:11:28 UTC' ts UNION ALL    \n  SELECT '2019-07-05 21:17:05 UTC' UNION ALL                 \n  SELECT '2019-07-05 20:29:56 UTC' UNION ALL                 \n  SELECT '2019-07-05 21:55:39 UTC'                           \n)\nSELECT ts, \n  TIMESTAMP_TRUNC_TO_QUATER_OF_HOUR(ts) AS ts_rounded_to_quarter_of_hour\nFROM `project.dataset.table`"
        },
        {
            "description": "How many employees worked at the company on January 1, 2018, regardless of when they were hired?",
            "sql": "SELECT\n  Supervisor,\n  COUNTIF(\n    (Last_hire_date < DATE '2018-01-01' AND term_date >=  DATE '2018-01-01' ) \n    OR \n    (Last_hire_date < DATE'2018-01-01' AND term_date IS NULL)\n  ) AS start_headcount\nFROM \n  `T1`\nGROUP BY\n  1\nORDER BY\n  1 ASC"
        },
        {
            "description": "How many employees worked under each Supervisor in 2018?",
            "sql": "SELECT\n  Supervisor,\n  COUNT(DISTINCT \n    IF(\n      (Last_hire_date < DATE '2018-01-01' AND term_date >=  DATE '2018-01-01' ) \n      OR \n      (Last_hire_date < DATE'2018-01-01' AND term_date IS NULL),\n      EmpID,\n      NULL\n    )\n  ) AS start_headcount  \nFROM \n  `T1`\nGROUP BY\n  1\nORDER BY\n  1 ASC"
        },
        {
            "description": "How to cast numeric values to floating point values and vice versa in BigQuery?",
            "sql": "SELECT\n  12345678901234567890.0 float_value_a,\n  CAST(12345678901234567890.0 AS NUMERIC) numeric_value_b,\n  CAST('12345678901234567890' AS NUMERIC) numeric_value_c,\n  CAST('12345678901234567890' AS FlOAT64) float_value_d"
        },
        {
            "description": "How to retrieve the Levenshtein (edit) distance between two input strings.?",
            "sql": "CREATE OR REPLACE FUNCTION SQUAD_V11.levenshteinDistance(s STRING, t STRING)\nRETURNS INT64\nLANGUAGE js AS \"\"\"\n  var _extend = function(dst) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    for (var i=0; i<sources.length; ++i) {\n      var src = sources[i];\n      for (var p in src) {\n        if (src.hasOwnProperty(p)) dst[p] = src[p];\n      }\n    }\n    return dst;\n  };\n  var Levenshtein = {\n    get: function(str1, str2) {\n      // base cases\n      if (str1 === str2) return 0;\n      if (str1.length === 0) return str2.length;\n      if (str2.length === 0) return str1.length;\n      // two rows\n      var prevRow  = new Array(str2.length + 1),\n          curCol, nextCol, i, j, tmp;\n      // initialise previous row\n      for (i=0; i<prevRow.length; ++i) {\n        prevRow[i] = i;\n      }\n      // calculate current row distance from previous row\n      for (i=0; i<str1.length; ++i) {\n        nextCol = i + 1;\n        for (j=0; j<str2.length; ++j) {\n          curCol = nextCol;\n          // substution\n          nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );\n          // insertion\n          tmp = curCol + 1;\n          if (nextCol > tmp) {\n            nextCol = tmp;\n          }\n          // deletion\n          tmp = prevRow[j + 1] + 1;\n          if (nextCol > tmp) {\n            nextCol = tmp;\n          }\n          // copy current col value into previous (in preparation for next iteration)\n          prevRow[j] = curCol;\n        }\n        // copy last col value into previous (in preparation for next iteration)\n        prevRow[j] = nextCol;\n      }\n      return nextCol;\n    }\n  };\n  var the_s;\n  try {\n    the_s = decodeURI(s).toLowerCase();\n  } catch (ex) {\n    the_s = s.toLowerCase();\n  }\n  try {\n    the_t = decodeURI(t).toLowerCase();\n  } catch (ex) {\n    the_t = t.toLowerCase();\n  }\n  return Levenshtein.get(the_s, the_t) \"\"\""
        },
        {
            "description": "How to get a simple edit distance between two strings?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT 'mikhail' string1, 'mike' string2 UNION ALL\n  SELECT 'jon', 'john'\n)\nSELECT string1, string2, SQUAD_V11.levenshteinDistance(string1, string2) changes\nFROM `project.dataset.table`"
        },
        {
            "description": "How to retrieve information from a table where the number of changed letters of `string2` from `string1` is less than or equal to a specified number.?",
            "sql": "SELECT Row, string1, string2, changes FROM t WHERE changes <= 3;"
        },
        {
            "description": "How to retrieve the total inventory value for each order, grouped by order source and date?",
            "sql": "SELECT\n  `order`.source AS order_source,\n  `order`.key AS order_key,\n  ANY_VALUE(`order`.date) AS order_date,\n  order_product.key AS key,\n  ANY_VALUE(order_product.sku) AS sku,\n  ANY_VALUE(order_product.name) AS name,\n  ANY_VALUE(order_product.quantity) AS quantity,\n  ANY_VALUE(order_product.subtotal) AS revenue,\n  SUM((SELECT SUM(inventory_value) FROM UNNEST(moved_quants))) AS inventory_value\n FROM \n  `analytics.spr.stock_move_shipments`\n GROUP BY\n  `order`.source,\n  `order`.key,\n  order_product.key"
        },
        {
            "description": "How to retrieve all unique questions and related answers posted by users in the specified dataset and table where timezone is set to 1 and the timestamp contains the date '2019-08-06', along with the position of each result within the specified partition.?",
            "sql": "SELECT * EXCEPT(pos) \nFROM ( \n  SELECT *, \n    ROW_NUMBER() OVER(PARTITION BY poll_id, user_id ORDER BY count DESC, timestamp DESC) AS pos \n  FROM `project.dataset.table` \n  WHERE NOT answer IS NULL \n  AND NOT user_id IS NULL \n  AND timezone = 1 \n  AND SUBSTR(timestamp, 1, 10) = '2019-08-06' \n) \nWHERE pos = 1"
        },
        {
            "description": "How to retrieve the age and gender of users who answered 'no' to a poll with id 1?",
            "sql": "SELECT\n  age,\n  gender\nFROM\n  `bigquery-public-data.stackoverflow.posts_questions`\nWHERE\n  poll_id = 1 AND\n  answer = 'no'"
        },
        {
            "description": "How to how To: Update all payment lines by replacing payment methods in gift test 1 data.?",
            "sql": "UPDATE `xxx.xxx.gift_test_1`\nSET PaymentLines = ARRAY(\n    SELECT AS STRUCT * \n      REPLACE(IF(PaymentMethod = 'gift_card', 'gift_card', PaymentType) AS PaymentType)\n    FROM UNNEST(PaymentLines) AS pay\n  )\nWHERE true"
        },
        {
            "description": "How to count the frequency of each value in a table, partitioned by three columns and ranked within each partition?",
            "sql": "WITH cte AS (\nSELECT A, B, C,\n(ROW_NUMBER() OVER (PARTITION BY A, B, C ORDER BY A, B, C) - 1) / t2.th AS rn\nFROM yourTable t1\nINNER JOIN threshholds t2\nON t1.A = t2.A\n)\nSELECT A, B, C, COUNT(*) AS count\nFROM cte\nGROUP BY A, B, C, rn\nORDER BY A, B, C, COUNT(*) DESC;"
        },
        {
            "description": "How to update the 'hits' ARRAY field, changing every case of the eventAction 'click' to 'UX'?",
            "sql": "UPDATE `my_sample_table`\nSET hits = ARRAY(\n  SELECT AS STRUCT * REPLACE(\n    (SELECT AS STRUCT eventInfo.* REPLACE(\n      IF(eventInfo.eventAction='click','UX', eventInfo.eventCategory) AS eventCategory\n    )\n  ) AS eventInfo)\n  FROM UNNEST(hits)\n)\nWHERE TRUE"
        },
        {
            "description": "How to retrieve the names of all video games in the table.?",
            "sql": "SELECT\n  Videogame\nFROM\n  TABLE()"
        },
        {
            "description": "How to retrieve the number of users who worked on each video game by a specific developer, distinguishing developers with fictitious names.?",
            "sql": "SELECT F.Identifier, F.Videogame, F.Developer,\nCASE WHEN S.String='1581' THEN 'Made by billy'\n     WHEN S.String='1903' THEN 'Made by bob'\n     WHEN S.String='5849' THEN 'Made by lilly'\n     ELSE 'worked on by someone else' END AS Final_Name,\n     COUNT(DISTINCT S.User_ID) AS COUNT\nFROM `project.dataset.table1` AS F\nJOIN `project.dataset.table2` AS S\nON F.Identifier=S.Identifier\nGROUP BY F.Identifier, F.Videogame, F.Developer, Final_Name"
        },
        {
            "description": "How to retrieve the count of video games developed by each developer, and the count of video games worked on by each person, grouped by videogame?",
            "sql": "SELECT\n  Videogame,\n  Developer,\n  Final_Name,\n  COUNT(*) AS Count\nFROM `bigquery-public-data.stackoverflow.posts_questions`\nWHERE\n  Tags like '%videogame%'\nGROUP BY\n  Videogame,\n  Developer,\n  Final_Name"
        },
        {
            "description": "How to retrieve the first job created by each user?",
            "sql": "SELECT \n  MIN(create_time) create_time, \n  MIN(jobid) jobid, \n  user\nFROM `project.dataset.table`\nGROUP BY user"
        },
        {
            "description": "How to retrieve the user who created each job.?",
            "sql": "SELECT\n  jobid,\n  user\nFROM `project.dataset.table`\nWHERE\n  NOT jobid IS NULL\nGROUP BY\n  jobid"
        },
        {
            "description": "How to retrieve users and the last job they created?",
            "sql": "SELECT\n  MAX(create_time) AS create_time,\n  jobid,\n  user\nFROM\n  `bigquery-public-data.samples.github_nested`\nGROUP BY\n  jobid,\n  user"
        },
        {
            "description": "How many UK sellers doubled their sales from the first to second week?",
            "sql": "with uk_sellers as (\n select * from <dataset>.Seller where country = 'UK'\n),\nfirst_week_uk as (\n  select seller_id, sum(Price*Quantity) as first_week_total\n  from <dataset>.Transaction\n  inner join uk_sellers using(seller_id)\n  where transaction_date between '2015-12-05' and '2015-12-11'\n  group by 1\n),\nsecond_week_uk as (\n  select seller_id, sum(Price*Quantity) as second_week_total\n  from <dataset>.Transaction\n  inner join uk_sellers using(seller_id)\n  where transaction_date between '2015-12-12' and '2015-12-18'\n  group by 1\n)\nselect count(distinct seller_id) as the_answer\nfrom first_week_uk\ninner join second_week_uk using(seller_id)\nwhere second_week_total >= 2*first_week_total"
        },
        {
            "description": "How to calculate the sum of values in column X only if Y is True?",
            "sql": "SELECT SUM(CASE WHEN Y = TRUE THEN X ELSE 0 END)"
        },
        {
            "description": "How to find the users that were stopped at a precise date and time?",
            "sql": "WITH\n#Select all the previous state for each user\nselect_previous AS (\nSELECT\n  time,\n  user,\n  state,\n  LAG(state) OVER (PARTITION BY user ORDER BY time) AS previous_state\nFROM\n  `gbl-imt-homerider-basguillaueb.bqml_test.user_up_sof`), #Keep only the state change date\nstate_change AS (\nSELECT\n  *\nFROM\n  select_previous\nWHERE\n  previous_state != state\n  OR previous_state IS NULL\n), #Select the latest time registered before the wanted timeline\nmax_time AS(\nSELECT\n  MAX(time) AS time,\n  user\nFROM\n  state_change\nWHERE\n  time < TIMESTAMP(\"2019-08-01 00:08:00\")\nGROUP BY\n  user)\n#Join the state change list with the latest time registered per user. Keep only the state stop\nSELECT\n  state_change.*\nFROM\n  max_time\nJOIN\n  state_change\nON\n  max_time.time = state_change.time\n  AND max_time.user = state_change.user\nWHERE\n  state = \"stop\""
        },
        {
            "description": "How to calculate the total time a user has spent in a particular state, in this case, the 'offline time'?",
            "sql": "WITH\n  #Select all the previous state for each user\n  select_previous AS (\n  SELECT\n    time,\n    user,\n    state,\n    LAG(state) OVER (PARTITION BY user ORDER BY time) AS previous_state\n  FROM\n    `gbl-imt-homerider-basguillaueb.bqml_test.user_up_sof`),\n  #Keep only the state change date\n  state_change AS (\n  SELECT\n    *\n  FROM\n    select_previous\n  WHERE\n    previous_state != state\n    OR previous_state IS NULL ),\n  #get the previous date change\n  time_previous_change AS (\n  SELECT\n    *, LAG(time) OVER (PARTITION BY user ORDER BY time) AS previous_time\n  FROM\n    state_change )\n  #perform a sum of the timeDiff, only when the state is start and the previous is stop (offline time)\nSELECT\n  user,\n  SUM(timestamp_diff (time,\n      previous_time,\n      second)) AS elapsed_in_second\nFROM\n  time_previous_change\nWHERE\n  state=\"start\"\n  AND previous_state=\"stop\"\nGROUP BY\n  user"
        },
        {
            "description": "How to retrieve records in order of their last appearance while ensuring that rows with the same ID and webID are grouped together and their occurrences are numbered.?",
            "sql": "select *,row_number() over(partition by id,webid order by date) cnt\nfrom table\norder by date,id"
        },
        {
            "description": "How to retrieve the distinct count of employee IDs grouped by tenure group, ordered by tenure group with '6-12' appearing first.?",
            "sql": "SELECT\ntenure_group, count (distinct EmpID )as count\nFROM\n  `T1`\ngroup by time_group\norder by \nCASE \n  WHEN time_group = '6-12' THEN '06-12'\n  ELSE time_group \nEND asc"
        },
        {
            "description": "How to retrieve the sum of bitcoin_total and dash_total for each week.?",
            "sql": "SELECT DATE_TRUNC(day, WEEK) AS day, \n  SUM(bitcoin_total) AS bitcoin_total, \n  SUM(dash_total) AS dash_total\nFROM `project.dataset.table`\nGROUP BY day"
        },
        {
            "description": "How many units of Dash were in circulation on 2008-12-28?",
            "sql": "SELECT dash_total FROM `bigquery-public-data.crypto_bitcoin.daily` WHERE day = \"2008-12-28\""
        },
        {
            "description": "How many days have passed from registration until sign in for users who signed in more than 30 days after registration?",
            "sql": "SELECT Signed_In.user_id, \nTIMESTAMP_DIFF(Registered.original_timestamp, Signed_In.original_timestamp, HOUR) AS days_difference\nFROM `test_db.Signed_In` signed_in\nJOIN `test_db.Registered` registered\nON Signed_In.user_id = Registered.user_id \nWHERE DATE_DIFF(Registered.original_timestamp, Signed_In.original_timestamp, Day) > '30'\nGROUP BY 1,2\nORDER BY 2 DESC"
        },
        {
            "description": "How to retrieve model weights with standardized feature values.?",
            "sql": "SELECT * FROM ML.WEIGHTS(MODEL `mydataset.mymodel`, STRUCT(true AS standardize))"
        },
        {
            "description": "How to retrieve the most recent result for each ticket.?",
            "sql": "SELECT AS VALUE ARRAY_AGG(t ORDER BY `date` DESC LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY ticket_id"
        },
        {
            "description": "How to retrieve the latest record for each ticket ID.?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT\n    1 ticket_id,\n    'help' subject,\n    'open' status,\n    DATE '2019-08-01' `date`\n  UNION ALL\n  SELECT 1, 'help', 'closed', '2019-08-02'\n  UNION ALL\n  SELECT 2, 'problem', 'open', '2019-08-01'\n  UNION ALL\n  SELECT 2, 'problem', 'open', '2019-08-02'\n  UNION ALL\n  SELECT 2, 'problem', 'open', '2019-08-03'\n  UNION ALL\n  SELECT 2, 'problem', 'open', '2019-08-04' \n)\nSELECT\n  AS VALUE ARRAY_AGG(t ORDER BY `date` DESC LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY\n  ticket_id"
        },
        {
            "description": "How to retrieve alert logs with all fields.?",
            "sql": "SELECT * FROM `log_name`.`table_name`;"
        },
        {
            "description": "How to retrieve item, unit of measure, and factor from a table using a nested SPLIT operator?",
            "sql": "SELECT item, u AS UOM, f AS Factor\nFROM `project.dataset.data`\nLEFT JOIN UNNEST(SPLIT(UOM, '/')) u WITH OFFSET\nJOIN UNNEST(SPLIT(Factor, '/')) f WITH OFFSET\nUSING(OFFSET)"
        },
        {
            "description": "How to retrieve the conversion factor for a particular unit of measure.?",
            "sql": "SELECT Row, item, UOM, Factor FROM UNNEST([ STRUCT<Row INT64, item STRING, UOM STRING, Factor INT64> (1, \"aaa\", \"EA\", 1), STRUCT<Row INT64, item STRING, UOM STRING, Factor INT64> (2, \"aaa\", \"BX\", 10), STRUCT<Row INT64, item STRING, UOM STRING, Factor INT64> (3, \"aaa\", \"PA\", 100), STRUCT<Row INT64, item STRING, UOM STRING, Factor INT64> (4, \"bbb\", \"EA\", 1), STRUCT<Row INT64, item STRING, UOM STRING, Factor INT64> (5, \"bbb\", \"PA\", 50) ]) AS Conversion_Factors WHERE item = \"aaa\" AND UOM = \"BX\""
        },
        {
            "description": "How many months between two dates?",
            "sql": "select (year1 * 12 + month1) - (year2 * 12 + month2)"
        },
        {
            "description": "How to retrieve the student for each class with the smallest difference between the start time and their desired start time?",
            "sql": "with joined as (\n  select \n    Student, \n    Class,\n    StartTime,\n    DesiredStartTime, \n    ABS(TIMESTAMP_DIFF(StartTime,DesiredStartTime, MINUTE)) as abs_difference_mins\n  from <dataset>.Class\n  cross join <dataset>.Student\n),\nranked as (\n  select\n    StartTime,\n    Class,\n    Student,\n    row_number() over(partition by Student order by abs_difference_mins asc) as ranked_by_mins_diff\n  from joined\n)\nselect * except(ranked_by_mins_diff)\nfrom ranked\nwhere ranked_by_mins_diff = 1"
        },
        {
            "description": "How to retrieve all rows from the 'DHT11Data' table where the temperature is greater than 24 degrees Celsius.?",
            "sql": "SELECT * FROM `iotcoretutorial-xxxxxx.DHT11.DHT11Data` WHERE temperature > 24"
        },
        {
            "description": "How to calculate the current age of individuals from different dates of birth using a SQL function?",
            "sql": "CREATE TEMP FUNCTION Age(dob DATE) AS ((SELECT diff - IF(DATE_ADD(dob, INTERVAL diff YEAR) > CURRENT_DATE(), 1, 0) FROM UNNEST([DATE_DIFF(CURRENT_DATE(), dob, YEAR)]) diff));\nWITH TestData AS (SELECT 'John Smith' AS Name, DATE '1976-08-12' AS DateOfBirth UNION ALL SELECT 'Joe the Plumber', '1976-07-12') SELECT Name, DateOfBirth, Age(DateOfBirth) AS Age FROM TestData"
        },
        {
            "description": "How to retrieve the organization name, array of unique types and counts of elements, dominant type, and all dominant types from a table with an array column named 'elements'?",
            "sql": "select\norg_name,\narray(\n    select as struct\n        elem as name,\n        count(*) as count\n    from\n        unnest(elements) as elem\n    group by\n        elem\n    order by\n        count\n) as types,\n(\n    select\n        elem\n    from\n        unnest(elements) as elem\n    group by\n        elem\n    order by\n        count(*) desc\n    limit\n        1\n) as dominant_type,\narray(\n    select\n        elem\n    from\n        (\n            select\n                elem,\n                count(*) as count,\n                rank() over(partition by\n                                    elem\n                                order by\n                                    count(*) desc) as rank\n            from\n                unnest(elements) as elem\n            group by\n                elem\n        )\n    where\n        rank = 1\n) as all_dominant_types\nfrom\ntable"
        },
        {
            "description": "How to retrieve all rows in a table except for duplicate rows?",
            "sql": "SELECT TO_JSON_STRING(a) FROM `project.dataset.tableA` a\nEXCEPT DISTINCT\nSELECT TO_JSON_STRING(b) FROM `project.dataset.tableB` b"
        },
        {
            "description": "How to retrieve sales data for a specific time period and calculate the percentage growth compared to the previous month?",
            "sql": "WITH data AS (\n  SELECT * FROM UNNEST([\n    STRUCT(DATE('2018-01-01') AS date, 300 AS sales)\n    , ('2018-02-01', 200)\n    , ('2018-03-01', 500)\n    , ('2018-04-01', 900)\n    , ('2019-01-01', 100)])\n)\nSELECT *, ROUND(100*(sales-previous_month)/previous_month,2) pct_growth\nFROM (\n  SELECT *,\n    (SELECT sales FROM data WHERE date=DATE_ADD(d.date, INTERVAL -1 MONTH)) previous_month\n  FROM data d\n) \nWHERE previous_month IS NOT null\nORDER BY date DESC"
        },
        {
            "description": "How to retrieve the sales and their percentage growth over the previous month for all rows in the public-data-for-testing.sample_data.sample_data_sales table.?",
            "sql": "WITH data AS (\nSELECT * FROM  `public-data-for-testing.sample_data.sample_data_sales`\n)\nSELECT *, ROUND(100*(sales-previous_month)/previous_month,2) pct_growth\nFROM (\n  SELECT * \n    , (SELECT sales \n       FROM data \n       WHERE date=DATE_ADD(d.date, INTERVAL -1 MONTH)\n       AND Origin_MSA=d.Origin_MSA\n      ) previous_month\n  FROM data d\n) \nWHERE previous_month IS NOT null\nORDER BY date DESC"
        },
        {
            "description": "How to retrieve all rows where at least one brand in the \"brands\" column matches any brand in the \"brand_list\" table.?",
            "sql": "select *\nfrom transactions\nwhere exists (\n  select 1 from brand_list, unnest(brands) as other_brand\n  where brand = other_brand\n)"
        },
        {
            "description": "How to retrieve records from a CTE where the day was the 27th of the month?",
            "sql": "with myCTE as (\n  SELECT\n  user_info.email,\n  extract(year from timestamp_seconds(time_stamp)) AS Year,\n  extract(month from timestamp_seconds(time_stamp)) AS Month,\n  extract(day from timestamp_seconds(time_stamp)) AS Day\n  FROM Mixpanel.events_log\n  JOIN Mixpanel.user_info ON user_info.user_id = events_log.user_id\n  WHERE time_stamp IN\n  (SELECT \n  min(time_stamp) AS time_stamp\n  FROM Mixpanel.events_log\n  INNER JOIN \n  Mixpanel.user_info on events_log.user_id = user_info.user_id\n  WHERE event = 'change_screen' AND screen = 'canvas'\n  GROUP BY user_info.email)\n)\nselect * from myCTE where Day = 27"
        },
        {
            "description": "How to retrieve product wise name count along with total count of product names partitioned by product?",
            "sql": "SELECT name, product,\n       COUNT(*),\n       SUM(COUNT(*)) OVER (PARTITION BY product)\nFROM products\nGROUP BY 1, 2\nORDER BY 1"
        },
        {
            "description": "How to parse a comma-separated string into a JSON format with columns for field name and values?",
            "sql": "SELECT\n  ARRAY(\n    SELECT REGEXP_EXTRACT(x, r'^(.*?):')\n    FROM UNNEST(SPLIT(GCAM,',')) AS x\n    WHERE REGEXP_EXTRACT(x, r'^(.*?):') IS NOT NULL\n  ) AS GCAM_field,\n   ARRAY(\n    SELECT REGEXP_EXTRACT(x, r':(.*?)$')\n    FROM UNNEST(SPLIT(GCAM,',')) AS x\n    WHERE REGEXP_EXTRACT(x, r':(.*?)$') IS NOT NULL\n  ) AS GCAM_value\nFROM `gdelt-bq.gdeltv2.gkg_partitioned`\nWHERE _PARTITIONTIME BETWEEN TIMESTAMP('2019-02-02') AND TIMESTAMP('2019-02-02')"
        },
        {
            "description": "How to retrieve unique GCAM fields and values from GKG Partitioned table for a given partition date?",
            "sql": "SELECT\n  ARRAY(\n    SELECT SPLIT(x, ':')[SAFE_OFFSET(0)]\n    FROM UNNEST(SPLIT(GCAM,',')) AS x\n    WHERE SPLIT(x, ':')[SAFE_OFFSET(0)] IS NOT NULL\n  ) AS GCAM_field,\n   ARRAY(\n    SELECT SPLIT(x, ':')[SAFE_OFFSET(1)]\n    FROM UNNEST(SPLIT(GCAM,',')) AS x\n    WHERE SPLIT(x, ':')[SAFE_OFFSET(1)] IS NOT NULL\n  ) AS GCAM_value\nFROM `gdelt-bq.gdeltv2.gkg_partitioned`\nWHERE _PARTITIONTIME BETWEEN TIMESTAMP('2019-02-02') AND TIMESTAMP('2019-02-02')"
        },
        {
            "description": "How to extract the hour from a timestamp with microsecond precision in US/Eastern time zone?",
            "sql": "select\nextract(\nhour from\ntimestamp_micros(\n    cast(1563456789.012345 * 1000000 as int64)\n) at time zone 'US/Eastern')"
        },
        {
            "description": "How many distinct employees were hired in the period between 2018-01-01 and today and have either terminated or are still active?",
            "sql": "select\nSupervisorName,\ncount(distinct if(TerminationDate is null, EmpNO, null)) as active,\ncount(distinct if(TerminationDate is null, null, EmpNO)) as terminated,\ncount(distinct EmpNO) as dist_total,\ncount(*) as total\nfrom \n`Table1`\nwhere\nLastHireDate between    date'2018-01-01'\nand current_date()\ngroup by\n1\norder by\n1, 4 desc"
        },
        {
            "description": "How to perform an SQL query that retrieves data from a nested array of structs and uses UNNEST to iterate through a subset of values in each struct?",
            "sql": "WITH test as (\n  SELECT * FROM UNNEST([\n    STRUCT(4 as value, [1, 3, 5, 7, 9, 100, 150, 40] as rangeOfValues)\n    ,(15, [1, 3, 5, 7, 9, 100, 150, 40])\n    ,(50, [1, 3, 5, 7, 9, 100, 150, 40])\n    ,(160, [1, 3, 5, 7, 9, 100, 150, 40])\n  ])\n)\nSELECT  \n  value,\n  (SELECT MAX(r) FROM UNNEST(rangeOfValues) r WHERE r<value ) nextLowest,\n  (SELECT MIN(r) FROM UNNEST(rangeOfValues) r WHERE r>value ) nextBiggest\nFROM test"
        },
        {
            "description": "How to retrieve the latest value within a given time range, partitioned by sample_date_time and finger_print_hash and max created_date_time within each sample_date_time and finger_print_hash?",
            "sql": "SELECT\n  label_list,\n  created_date_time,\n  MAX(sample_date_time) OVER() AS sample_date_time_max, \n  MAX(created_date_time) OVER (PARTITION By sample_date_time, finger_print_hash ORDER BY sample_date_time) AS created_date_time_max,\n  sample_date_time,\n  station,\n  (SELECT name\n  FROM UNNEST(label_list)\n  WHERE type = \"CHL\") as channel,\n  value\nFROM my.mart\nWHERE sample_date_time BETWEEN \"2019-07-25 23:00:00.000000+00:00\" AND \"2019-07-26 04:00:00.000000+00:00\"\nAND station = '[myGuid]'\nAND uom = \"[myUom]\"\nAND is_good_status = true"
        },
        {
            "description": "How to retrieve EMPLOYER values with special characters replaced with empty strings.?",
            "sql": "SELECT REGEXP_REPLACE(EMPLOYER, r'[^a-zA-Z\\d\\s]', '')\nFROM fec.work\nWHERE REGEXP_CONTAINS(EMPLOYER, r'[^a-zA-Z\\d\\s]')"
        },
        {
            "description": "How to update columns in a table based on the values of another column?",
            "sql": "update FRIDAY.Joined_table\nSET\nCost = CASE WHEN Channel = 'SEA' THEN Paid_Costs \nWHEN Channel = 'Performance-Display' THEN DBM_Costs ELSE Cost END,\nClicks = CASE WHEN Channel = 'SEA' THEN Paid_Clicks ELSE Clicks END,\nimpressions = CASE WHEN Channel = 'SEA' THEN Paid_Impressions ELSE Impressions END\nWhere New_Ids IS NOT NULL"
        },
        {
            "description": "How to retrieve specific data from a BigQuery table using a parameterized query?",
            "sql": "SELECT name, date FROM table WHERE id = @id"
        },
        {
            "description": "How to retrieve the latest event for each station, finger_print_hash combination within a given sample period.?",
            "sql": "WITH MaxRownumbers AS (\nSELECT\n  *, \n  ROW_NUMBER() OVER (PARTITION BY sample_date_time, finger_print_hash ORDER BY sample_date_time) AS row_number, \n  ROW_NUMBER() OVER (PARTITION BY sample_date_time, finger_print_hash ORDER BY created_date_time DESC) AS row_number_desc,\n  MAX(created_date_time) OVER (PARTITION BY sample_date_time, finger_print_hash ORDER BY sample_date_time) AS created_date_time_max\nFROM\n  my.mart \nWHERE\n  sample_date_time BETWEEN \"2019-07-25 23:00:00.000000+00:00\" AND \"2019-07-26 04:00:00.000000+00:00\"\n  AND station = '[myGuid]'\n  AND uom = \"[myUom]\"\n  AND is_good_status = true\n) \nSELECT\n  label_list,\n  created_date_time,\n  sample_date_time_max,\n  created_date_time_max,\n  sample_date_time,\n  station,\n  (\n    SELECT\n      name\n    FROM\n      UNNEST(label_list)\n    WHERE\n      type = \"CHL\"\n  ) as channel,\n  value\nFROM\n  MaxRownumbers\nWHERE\n  row_number = row_number_desc  \n  AND created_date_time = created_date_time_max"
        },
        {
            "description": "How to retrieve employers from the fec.work table where employer names contain non-alphanumeric characters?",
            "sql": "SELECT REGEXP_REPLACE(EMPLOYER, r'[^a-zA-Z\\d\\s]', '')\nFROM fec.work\nWHERE REGEXP_CONTAINS(EMPLOYER, r'[^a-zA-Z\\d\\s]')"
        },
        {
            "description": "How to retrieve the cost, clicks, and impressions for each channel, manipulating data based on the 'SEA', 'Performance-Display' and other channels.?",
            "sql": "update FRIDAY.Joined_table\nSET\nCost = CASE WHEN Channel = 'SEA' THEN Paid_Costs \nWHEN Channel = 'Performance-Display' THEN DBM_Costs ELSE Cost END,\nClicks = CASE WHEN Channel = 'SEA' THEN Paid_Clicks ELSE Clicks END,\nimpressions = CASE WHEN Channel = 'SEA' THEN Paid_Impressions ELSE Impressions END\nWhere New_Ids IS NOT NULL"
        },
        {
            "description": "How to retrieve specific data from a table based on an ID.?",
            "sql": "SELECT name, date FROM table WHERE id = @id"
        },
        {
            "description": "How to retrieve all rows, except row number, in a subquery where the row number is 2 for each order ID in a table.?",
            "sql": "SELECT * EXCEPT(row_number)\nFROM (SELECT*,ROW_NUMBER() OVER (PARTITION BY orderid) row_number\nFROM `TABLE`)\nWHERE row_number = 2"
        },
        {
            "description": "How to remove the words 'HOUSEWIFE' and 'HOMEMAKER' from a comma-separated string?",
            "sql": "with test as (\n  select 'EMPLOYER' as my_str             union all \n  select 'RETIRED/HOMEMAKER' as my_str    union all \n  select 'HOMEMAKER/HOMEMAKER' as my_str  union all \n  select 'SELF-EMPLOYED/HOMEMAKER' as my_str\n)\nselect \n  my_str,\n  REPLACE(REPLACE(my_str, 'HOUSEWIFE', ' '), 'HOMEMAKER', ' ') as replaced_str,\n  REGEXP_REPLACE(my_str, r'HOUSEWIFE|HOMEMAKER', ' ') as regexed_str\nfrom test"
        },
        {
            "description": "How to retrieve from a nested array, unique IDs for a specific product, year, and customers j, k, l.?",
            "sql": "SELECT month, customer, product, sales,\n  arr[OFFSET(0)] unique_id1,\n  arr[SAFE_OFFSET(1)] unique_id2,\n  arr[SAFE_OFFSET(2)] unique_id3\nFROM (\n  SELECT month, customer, product, SUM(sales) sales,\n    ARRAY_AGG(unique_id ORDER BY month DESC LIMIT 3) arr\n  FROM `project.dataset.table`\n  WHERE customer IN ('j','k','l') AND product = 'm' AND year = 2019\n  GROUP BY month, customer, product\n)"
        },
        {
            "description": "How to retrieve a list of unique property IDs and a comma-separated list of all food items connected to them?",
            "sql": "select id, string_agg(food) as foods\nfrom `project.dataset.table`\ngroup by id"
        },
        {
            "description": "How many photos were taken by Cham's camera on each day?",
            "sql": "SELECT count(*) as Cham_camera, date(t2.time) as time2, t2.tagID from\nsc_analytics.ugc_post_created as t2"
        },
        {
            "description": "How to extract specific part matching the pattern 'u1=(.+?);u2' from a given string?",
            "sql": "select\nother_data,\nregexp_extract(other_data, ';u1=(.+?);u2') as some_part\nfrom\nunnest([\n        'dc_pre=CLXk_aigyOMCFQb2dwod4dYCZw;gtm=2wg7f1;gcldc=;gclaw=;gac=UA-5815571-8:;auiddc=;u1=OVERDRFT;u2=undefined;u3=undefined;u4=undefined;u5=SSA;u6=undefined;u7=na;u8=undefined;u9=undefined;u10=undefined;u11=undefined;~oref=https://www.online.bank.co.za/onlineContent/ga_bridge.html',\n        'dc_pre=COztt4-tyOMCFcji7Qod440PCw;gtm=2wg7f1;gcldc=;gclaw=;gac=UA-5815571-8:;auiddc=;u1=DDA13;u2=undefined;u3=undefined;u4=undefined;u5=SSA;u6=undefined;u7=na;u8=undefined;u9=undefined;u10=undefined;u11=undefined;~oref=https://www.online.support.co.za/onlineContent/ga_bridge.html'\n    ]) as other_data"
        },
        {
            "description": "How to retrieve the total revenue for a given ID for the past week including current day, with six month partitions and current day as the upper bound for each partition.?",
            "sql": "SELECT *, \n  SUM(revenue) OVER(\n    PARTITION BY id ORDER BY UNIX_DATE(transaction_date) \n    RANGE BETWEEN 6 PRECEDING AND CURRENT ROW\n  ) rollup_revenue \nFROM `project.dataset.temp`"
        },
        {
            "description": "How to retrieve the monthly minimum and maximum revenue for a particular row.?",
            "sql": "SELECT\n  ROW_ID()\n  MIN(revenue) OVER (ORDER BY transaction_date ASC) AS min_revenue,\n  MAX(revenue) OVER (ORDER BY transaction_date ASC) AS max_revenue\nFROM (SELECT * FROM `bigquery-public-data.utility_us.country_code_iso`\nORDER BY transaction_date ASC)"
        },
        {
            "description": "How to aggregate traffic by month for specific years, such as 2016 and 2017?",
            "sql": "SELECT\n  EXTRACT(MONTH FROM date) AS month,\n  SUM(IF(EXTRACT(YEAR FROM date) = 2016, CAST(traffic AS INT64), 0) AS traffic_2016,\n  SUM(IF(EXTRACT(YEAR FROM date) = 2017, CAST(traffic AS INT64), 0) AS traffic_2017,\nFROM\n  data.source\nGROUP BY month"
        },
        {
            "description": "How to compare total traffic in 2016 and 2017 on a monthly basis?",
            "sql": "SELECT\n  *\nFROM\n(SELECT\n  EXTRACT(MONTH FROM date) AS month,\n  SUM(CAST(traffic AS INT64)) AS traffic_2016\nFROM\n  data.source\nWHERE\n  EXTRACT(MONTH FROM date) = 2016\nGROUP BY month) \nJOIN\n(SELECT\n  EXTRACT(MONTH FROM date) AS month,\n  SUM(CAST(traffic AS INT64)) AS traffic_2017\nFROM\n  data.source\nWHERE\n  EXTRACT(MONTH FROM date) = 2017\nGROUP BY month)\nUSING(month)"
        },
        {
            "description": "How to retrieve food items at specific timestamps.?",
            "sql": "SELECT * FROM dataset.table WHERE timestamp = 0 OR timestamp = 1"
        },
        {
            "description": "How to find the previous food entry for each ID in a sequence?",
            "sql": "select id, food, prev_food\nfrom (select t.id, t.food,\n             lag(t.food) over (partition by t.id order by t.timestamp) as prev_food,\n             dense_rank() over (order by t.timestamp desc) as seqnum\n      from t\n     ) t\nwhere seqnum = 1;"
        },
        {
            "description": "How to retrieve the latest two foods associated with each ID, ordered by timestamp.?",
            "sql": "select id,\n       array_agg(food order by timestamp desc limit 1)[safe_ordinal(1)],\n       array_agg(food order by timestamp desc limit 2)[safe_ordinal(2)]\nfrom t\ngroup by id;"
        },
        {
            "description": "How to retrieve the indexed abstract keywords, their counts, and positions for a given object ID.?",
            "sql": "SELECT ObjectID, \n  ARRAY(\n    SELECT AS STRUCT \n      key, \n      ARRAY_LENGTH(SPLIT(value)) `count`, \n      value positions \n    FROM UNNEST(REGEXP_EXTRACT_ALL(JSON_EXTRACT(indexed_abstract, '$.InvertedIndex'), r'\"[^\"}+\":\\[\\d,]*?]')) pair,\n    UNNEST([STRUCT(REPLACE(SPLIT(pair, ':')[OFFSET(0)], '\"', '') AS key, SPLIT(pair, ':')[OFFSET(1)] AS value)])\n  ) keyword\nFROM `project.dataset.table`"
        },
        {
            "description": "How to retrieve the keyword count for breast cancer patients where the keyword 'metastatic' appears as the first term in the 'keyword.positions' array.?",
            "sql": "SELECT keyword.key,\n  keyword.count,\n  ROW_NUMBER() OVER (PARTITION BY keyword.key ORDER BY keyword.positions[OFFSET(0)] ASC) AS first_position\nFROM Row\nWHERE keyword.key = 'metastatic' AND ARRAY_LENGTH(keyword.positions) >= 1\nGROUP BY keyword.key, keyword.count\nHAVING first_position = 1\nORDER BY keyword.count DESC;"
        },
        {
            "description": "How to retrieve the count of products that were moved from stores with no establishment date to stores with an establishment date?",
            "sql": "SELECT COUNT(a.product_id) AS count_of_products\nFROM product_table a\nINNER JOIN store_table b\n    ON a.destination_store_id = b.store_id\nINNER JOIN store_table c\n    ON a.original_store_id = c.store_id\nWHERE\n    b.establishment_date IS NULL AND\n    c.establishment_date IS NOT NULL;"
        },
        {
            "description": "How to get the difference between the current time and the current time in a given timezone?",
            "sql": "WITH `project.dataset.table` AS (\n  SELECT 'Australia/Victoria' tz_string\n)SELECT  tz_string, DATETIME_DIFF(CURRENT_DATETIME(tz_string), CURRENT_DATETIME(), hour) tz_hours\nFROM `project.dataset.table`"
        },
        {
            "description": "How many hours ahead of UTC is the Victoria Time Zone in Australia?",
            "sql": "SELECT\ntz_string,\ntz_hours\nFROM `bigquery-public-data.utility_us.time_zones`\nWHERE\ntz_string = \"Australia/Victoria\""
        },
        {
            "description": "How to retrieve the results of a group by query in array format.?",
            "sql": "select array_agg(t)\nfrom t\ngroup by from, to, subject, extract(year from timestamp);"
        },
        {
            "description": "How to retrieve the sender, recipient, subject, year, and a list of message IDs for each unique combination of sender, recipient, and subject, grouped by year?",
            "sql": "select from, to, subject, extract(year from timestamp) as year,\n       array_agg(id)\nfrom t\ngroup by from, to, subject, extract(year from timestamp);"
        },
        {
            "description": "How to retrieve the row with `f0_` equal to `Laptop`.?",
            "sql": "SELECT\nf0_\nFROM\nUNNEST([STRUCT<f0_ STRING>('Laptop')]) AS f0_"
        },
        {
            "description": "How to retrieve all data from an external table?",
            "sql": "SELECT * FROM my_dataset.my_external_table"
        },
        {
            "description": "How to retrieve the array of lines of table1 that have the same line_id, purch_id, warehouse_id, and is_proposed as the ones in table2?",
            "sql": "UPDATE \ntable1 as base\nSET \nlines = \nARRAY(\nSELECT AS STRUCT \nb.line_id,\ns.purch_id,\nARRAY(\nSELECT AS STRUCT\nwh.warehouse_id,\nsh.is_proposed,\nFROM UNNEST(b.warehouses) as wh \nINNER JOIN UNNEST(s.warehouses) as sh \nON wh.warehouse_id = sh.warehouse_id) \nFROM UNNEST(base.lines) as b\nINNER JOIN UNNEST(supply.lines) as s\nON b.line_id = s.line_id)\nFROM \ntable2 as supply\nWHERE \nbase.date = supply.date\nAND\nbase.sales_id = supply.sales_id"
        },
        {
            "description": "How to update nested ARRAY elements in an existing table using subqueries?",
            "sql": "UPDATE dataset.table\nSET\n  OL = ARRAY(SELECT AS STRUCT ID + 2 AS ID, GROSS + 3 AS GROSS FROM UNNEST(OL)),\n  PL = ARRAY(SELECT AS STRUCT 1 AS ID, GROSS + 3 AS GROSS FROM UNNEST(PL))"
        },
        {
            "description": "How to retrieve the count of dates in a month that fall on each day of the week.?",
            "sql": "WITH weekdays AS (SELECT ['SUNDAY','MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY'] AS wk)\nSELECT wk[ORDINAL(pos)] weekday, COUNT(1) cnt\nFROM weekdays, \n  UNNEST(GENERATE_DATE_ARRAY('2019-01-01','2019-01-31')) day, \n  UNNEST([EXTRACT(DAYOFWEEK FROM day)]) pos\nGROUP BY pos, weekday\nORDER BY pos"
        },
        {
            "description": "How many visits happened on each day of the week?",
            "sql": "SELECT weekday, COUNT(*) AS cnt\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE DATE(_PARTITION_DATE) BETWEEN '2016-08-01' AND '2017-08-01'\nGROUP BY weekday"
        },
        {
            "description": "How to retrieve a subset of columns from 'tab1' joining the 'spyros.week_ref' table using 'year' and 'week' as join keys.?",
            "sql": "SELECT tab1.year\n      ,tab1.week\n      ,tab1.col3\n      ,tab1.col4\n      ,tab1.col5\n      ,tab1.col6\n      ,tab1.total\n      ,tab1.col7\n      ,week_ref.first_week_day\n      ,week_ref.last_week_day\nFROM dtsetname.tab1 tab1\nJOIN (SELECT DISTINCT year, week, first_week_day, last_week_day FROM spyros.week_ref) week_ref\nON (week_ref.year = tab1.year AND week_ref.week = tab1.week)"
        },
        {
            "description": "How to retrieve the JSON fields from a table and check if a specific field exists using the 'IFNULL' function.?",
            "sql": "SELECT\n  IFNULL(SourceSystem, \"No such field\") AS SourceSystem\nFROM\n  `bigquery-public-data.stackoverflow.posts_questions`"
        },
        {
            "description": "How to retrieve individual values from an array of structs in BigQuery?",
            "sql": "SELECT id, `desc`, total,\n  arr[OFFSET(0)].account AS first_account, \n  arr[OFFSET(0)].total AS first_account_total,\n  arr[SAFE_OFFSET(1)].account AS second_account, \n  arr[SAFE_OFFSET(1)].total AS second_account_total\nFROM (\n  SELECT id, `desc`, SUM(total) total, \n    ARRAY_AGG(STRUCT(account, total) ORDER BY total DESC LIMIT 2) arr\n  FROM `project.dataset.table`\n  GROUP BY id, `desc`\n)"
        },
        {
            "description": "How to replace a value in table `PROJECT.DATASET.TABLE` using the CAST() function?",
            "sql": "SELECT * REPLACE(CAST(XXXhas AS NUMERIC) AS XXXhas) FROM `PROJECT.DATASET.TABLE`"
        },
        {
            "description": "How to extract year, week, first weekday, and last weekday from a range of dates?",
            "sql": "WITH dates AS (SELECT GENERATE_DATE_ARRAY('2018-01-01', '2019-12-31') as date_array )\nselect extract(year from d) as year, d,\n       EXTRACT(week from d) as week,\n       date_trunc(d, week) as first_week_day,\n       date_add(date_trunc(d, week), interval 6 day) as last_week_day\nfrom dates cross join\n     unnest(date_array) d\nORDER BY d;"
        },
        {
            "description": "How to retrieve the records that meet specific criteria, including customers who have bought macs and products that are either macs or windows.?",
            "sql": "SELECT * FROM `project.dataset.table` WHERE custname IN (SELECT DISTINCT custname FROM `project.dataset.table` WHERE product = 'mac') AND product IN ('mac', 'windows')"
        },
        {
            "description": "How to retrieve a list of all customers who have at least one 'mac' product in their purchase history, and who have also purchased a 'windows' product.?",
            "sql": "SELECT * FROM UNNEST((SELECT ARRAY_AGG(t) FROM `project.dataset.table` t GROUP BY custname HAVING COUNTIF(product = 'mac') > 0)) WHERE product IN ('mac', 'windows')"
        },
        {
            "description": "How to retrieve all columns from multiple tables in the dataset using FULL OUTER JOINs.?",
            "sql": "SELECT * \nFROM `project.dataset.content` \nFULL OUTER JOIN `project.dataset.all_domains` USING(domain) \nFULL OUTER JOIN `project.dataset.color` USING(domain) \nFULL OUTER JOIN `project.dataset.language` USING(domain) \nFULL OUTER JOIN `project.dataset.type` USING(domain)"
        },
        {
            "description": "How to retrieve the current week number from the current date?",
            "sql": "select extract(week from current_date)"
        },
        {
            "description": "How to identify the FirstName, LastName, and EmailAddress of customers with bookings ranked between 5th and 7th?",
            "sql": "SELECT * FROM (SELECT      EmailAddress    , FirstName    , LastName    , RANK() OVER (ORDER BY BookingDate) AS rank   FROM `project.dataset.table`)  WHERE rank BETWEEN 5 AND 7"
        },
        {
            "description": "How to retrieve an array of details for each product.?",
            "sql": "select\n  prd.key_web,\n  ARRAY_AGG(STRUCT(\n    dat_log,\n    prd.nrb_fp,\n    prd.tps_fp,\n    prd.univ,\n    prd.suniv,\n    prd.fam,\n    prd.sfam)) AS details\nfrom\n  product as prd\ngroup by\n  key_web"
        },
        {
            "description": "How to retrieve the unnested values of a delimited field in a table?",
            "sql": "SELECT A,B,C,D,E\nFROM `project.dataset.table`,\nUNNEST(SPLIT(E,'|')) E"
        },
        {
            "description": "How to retrieve the values in the first and second columns from the Raw table and convert the second column to a string.?",
            "sql": "WITH Raw AS (\nselect \"product1_name\" AS a, 2.0 AS b\nunion all\nselect \"product2_name\", 3.0\n)\nselect\n  [a, CAST(b AS STRING)]\nFROM\n  Raw"
        },
        {
            "description": "How to retrieve the concatenated values of the columns 'a' and 'b' in the 'Raw' table into an array, while ensuring that 'b' is represented as a string.?",
            "sql": "WITH Raw AS (\n  select [\"a\", \"b\", \"c\"] AS a, 2.0 AS b\n  union all\n  select [\"b\", \"c\"], 3.0\n)\nselect\n  ARRAY_CONCAT(a, [CAST(b AS STRING)])\nFROM\n  Raw"
        },
        {
            "description": "How to retrieve events with treated analytics data within a 5 minute window?",
            "sql": "SELECT \n  ed.minute_index, \n  event, \n  ARRAY_AGG(ad) window_treated\nFROM `my_project.my_dataset.event_data` ed\nJOIN `my_project.my_dataset.analytics_data` ad\nON ad.minute_index BETWEEN ed.minute_index AND ed.minute_index + 5\nGROUP BY ed.minute_index, event"
        },
        {
            "description": "How to create a new linear regression model named `deleting.stringtest` from a sample dataset?",
            "sql": "CREATE MODEL `deleting.stringtest`\nOPTIONS ( model_type='linear_reg')\nAS \nSELECT 'hello' text, 1 label\nUNION ALL\nSELECT 'goodbye' text, 2 label\nUNION ALL\nSELECT 'hello goodbye my friend' text, 2 label"
        },
        {
            "description": "How to obtain model weights for a string test model?",
            "sql": "SELECT * \nFROM ML.WEIGHTS(MODEL `deleting.stringtest`)"
        },
        {
            "description": "How to retrieve the latest plan, usage, and timestamp for each customer ID?",
            "sql": "with data as (\nSELECT\nt1.customer_id,\nlog.plan,\nt1.usage,\nt1.timestamp,\nlog.timestamp as logt,\nROW_NUMBER() OVER (PARTITION BY t1.customer_id, t1.timestamp  ORDER BY  log.timestamp DESC) seqnum\nFROM\nresource t1\nFULL JOIN log\nON log.customer_id = t1.customer_id AND log.timestamp <= t1.timestamp \n)\nselect * from data where seqnum = 1"
        },
        {
            "description": "How many activities did each user do after their first activity?",
            "sql": "SELECT activity_date,\n       COUNT(*) AS cnt\nFROM\n  (SELECT user_id,\n          activity_date,\n          MIN(activity_date) OVER (PARTITION BY user_id) AS first_activity_date\n   FROM [project_id:dataset.events])\nWHERE activity_date != first_activity_date\nGROUP BY 1\nORDER BY 1;"
        },
        {
            "description": "How to retrieve information from the Files object by filtering by its mode.?",
            "sql": "SELECT file_name,\n       MODE\nFROM Files\nWHERE MODE IN ('rb',\n               'r+b',\n               'rb+')\nORDER BY file_name;"
        },
        {
            "description": "How to retrieve the correct value for `self.mode` when opening a file in write mode with the Gzip File format.?",
            "sql": "SELECT CASE\n           WHEN mode.startswith(('w', 'a', 'x')) THEN 2\n           ELSE 1\n       END AS MODE\nFROM UNNEST([('file_name', 'mode')]) AS t(file_name, MODE)\nWHERE file_name = 'path/to/file.gz';"
        },
        {
            "description": "How to retrieve the first element of an array?",
            "sql": "SELECT array[offset(0)];"
        },
        {
            "description": "How to retrieve the ordinal of array elements.?",
            "sql": "SELECT array[ordinal(1)];"
        },
        {
            "description": "How many distinct years are represented in the table?",
            "sql": "SELECT COUNT(DISTINCT YEAR)\nFROM t1;"
        },
        {
            "description": "How to retrieve daily, weekly, and monthly DAU?",
            "sql": "SELECT date ,isdepositor ,\n             'Level' AS Category ,\n             subcategory ,\n             dau\nFROM `DWH.vT_DAU`\nCROSS JOIN\n  (SELECT 'Daily' subcategory\n   UNION ALL SELECT 'Weekly'\n   UNION ALL SELECT 'Monthly');"
        },
        {
            "description": "How to retrieve the number of daily, weekly, and monthly active users (DAUs), segregated by their depositor status?",
            "sql": "SELECT date ,isdepositor ,\n             'Level' AS Category ,\n             subcategory ,\n             dau\nFROM `DWH.vT_DAU`,\n     UNNEST(['Daily', 'Weekly', 'Monthly']) subcategory;"
        },
        {
            "description": "How to how to get timestamp values in milliseconds.?",
            "sql": "SELECT TIMESTAMP_TO_MSEC(timestamp_column)\nFROM [YOUR_DATASET:YOUR_TABLE];"
        },
        {
            "description": "How to retrieve the UNIX epoch time, in seconds, for the given timestamp column.?",
            "sql": "SELECT UNIX_SECONDS(timestamp_column)\nFROM `yourdataset.yourtable`;"
        },
        {
            "description": "How to select specific event names and the distinct 'review_meta_name' values, and retrieve the counts of events where the name is 'review_meta_click_purchase_product' and 'review_meta_with_product', grouped by date for the last 30 days?",
            "sql": "SELECT event.date,\n       event.name AS event_name,\n       event_param.value.string_value AS review_meta_name,\n       count(CASE\n                 WHEN event.name = 'review_meta_click_purchase_product' THEN 1\n             END) AS ct_purchase,\n       count(CASE\n                 WHEN event.name = 'review_meta_with_product' THEN 1\n             END) AS ct_product\nFROM `com_zibann_littlehome_debugEug_ANDROID.app_events_20180403`,\n     UNNEST(event_dim) AS event,\n     UNNEST(event.params) AS event_param\nWHERE DATE(TIMESTAMP_MICROS(event.timestamp_micros)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n  AND event.name IN ('review_meta_click_purchase_product',\n                     'review_meta_with_product')\n  AND event_param.key = \"review_meta_name\"\nGROUP BY event.date,\n         event.name,\n         event_param.key,\n         event_param.value.string_value;"
        },
        {
            "description": "How to retrieve the internal rate of return (IRR) for cash flows grouped by ID.?",
            "sql": "SELECT id,\n       IRRCalc(ARRAY_AGG(cash_flow), ARRAY_AGG(date_delta)) AS IRR\nFROM INPUT\nGROUP BY id;"
        },
        {
            "description": "How to retrieve the online type of a row, grouped by row id?",
            "sql": "SELECT Row_id,\n       Online.TypeA\nFROM [BigQuery table];"
        },
        {
            "description": "How to retrieve the unique Online.TypeA values where there are multiple Online.TypeB and Online.TypeC values?",
            "sql": "SELECT DISTINCT Online.TypeA\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the total number of times each combination of user and artist has played a song.?",
            "sql": "SELECT userGUID AS UID,\n       artistGUID AS aid,\n       COUNT(1) AS plays\nFROM [mydataset.stats]\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How many times have each user listened to each artist?",
            "sql": "SELECT u.uid AS UID,\n       a.aid AS aid,\n       plays\nFROM\n  (SELECT userGUID,\n          artistGUID,\n          COUNT(1) AS plays\n   FROM [mydataset.stats]\n   GROUP BY 1,\n            2) AS s\nJOIN\n  (SELECT userGUID,\n          ROW_NUMBER() OVER() AS UID\n   FROM [mydataset.stats]\n   GROUP BY 1) AS u ON u. userGUID = s.userGUID\nJOIN\n  (SELECT artistGUID,\n          ROW_NUMBER() OVER() AS aid\n   FROM [mydataset.stats]\n   GROUP BY 1) AS a ON a.artistGUID = s.artistGUID;"
        },
        {
            "description": "How to retrieve a list of provided aids with the aid and play count, grouping by uid from the aggs table partitioned by aid.?",
            "sql": "SELECT 'SELECT uid,' + GROUP_CONCAT_UNQUOTED('SUM(IF(aid=' + STRING(aid) + ',plays,NULL)) as a' + STRING(aid)) + ' FROM [mydataset.aggs] GROUP EACH BY uid'\nFROM\n  (SELECT aid\n   FROM [mydataset.aggs]\n   GROUP BY aid\n   HAVING aid > 0\n   AND aid < 2001);"
        },
        {
            "description": "How to retrieve plays for specific app versions grouped by user?",
            "sql": "SELECT UID,\n       SUM(IF(aid=1, plays, NULL)) a1,\n       SUM(IF(aid=3, plays, NULL)) a3,\n       SUM(IF(aid=2, plays, NULL)) a2,\n       SUM(IF(aid=4, plays, NULL)) a4 . . .\nFROM [mydataset.aggs] GROUP EACH BY UID;"
        },
        {
            "description": "How to generate dynamic SQL to select data from multiple BigQuery tables based on column values?",
            "sql": "SELECT 'SELECT x.uid uid,' + GROUP_CONCAT_UNQUOTED('a' + STRING(aid)) + ' FROM [mydataset.pivot_1_2000] AS x\nJOIN EACH [mydataset.pivot_2001_4000] AS y ON y.uid = x.uid\n'\nFROM\n  (SELECT aid\n   FROM [mydataset.aggs]\n   GROUP BY aid\n   HAVING aid < 4001\n   ORDER BY aid);"
        },
        {
            "description": "How to retrieve data from multiple pivot tables where the aid value is less than 6001, with each pivot table's data grouped and concatenated by uid.?",
            "sql": "SELECT 'SELECT x.uid uid,' + GROUP_CONCAT_UNQUOTED('a' + STRING(aid)) + ' FROM [mydataset.pivot_1_4000] AS x\nJOIN EACH [mydataset.pivot_4001_6000] AS y ON y.uid = x.uid\n'\nFROM\n  (SELECT aid\n   FROM [mydataset.aggs]\n   GROUP BY aid\n   HAVING aid < 6001\n   ORDER BY aid);"
        },
        {
            "description": "How to retrieve the uid and 6000 attributes from the table.?",
            "sql": "SELECT UID,\n       a1,\n       a2,\n       a3, ..., a5999,\n                a6000\nFROM <TABLE>;"
        },
        {
            "description": "How to retrieve the arrays of cash flow and date delta values from the 'Input' table.?",
            "sql": "SELECT cash_flow,\n       date_delta, ARRAY<FLOAT64> [cash_flow], ARRAY<INT64> [date_delta]\nFROM INPUT;"
        },
        {
            "description": "How to retrieve the number of items from a JSON-encoded attribute stored as a string in the database.?",
            "sql": "SELECT JSON_EXTRACT(REPLACE(attributes, \"# of items\", \"'number of items'\"), \"$['number of items']\") AS num_items\nFROM [project:dataset.test];"
        },
        {
            "description": "How to retrieve custom dimension at index 100 and associated referrer and custom dimension at index 200 for all hits associated with each visitId in the session table?",
            "sql": "SELECT visitId,\n       ARRAY\n  (SELECT AS STRUCT refferer,\n     (SELECT value\n      FROM UNNEST(hit.customDimensions) dim\n      WHERE INDEX = 200) cd_index_200\n   FROM UNNEST(hits) hit) hits,\n\n  (SELECT value\n   FROM UNNEST(customDimensions) dim\n   WHERE INDEX = 100) cd_index_100\nFROM `project.dataset.session_data`;"
        },
        {
            "description": "How to retrieve the total visits and whether each date had an 'Add to Cart' event.?",
            "sql": "SELECT date,\n  (SELECT coalesce(LOGICAL_OR(eventinfo.eventcategory = 'Enhanced Ecommerce'\n                              AND eventinfo.eventaction = 'Add to Cart'), FALSE)\n   FROM t.hits) hasAdd2CartEvent,\n             SUM(totals.visits) AS sessions\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*` t\nGROUP BY 1,\n         2\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to retrieve the total count of sessions that added something to the cart?",
            "sql": "SELECT date, SUM(totals.visits) AS sessions\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*` t\nWHERE\n    (SELECT coalesce(LOGICAL_OR(eventinfo.eventcategory = 'Enhanced Ecommerce'\n                                AND eventinfo.eventaction = 'Add to Cart'), FALSE)\n     FROM t.hits)\nGROUP BY 1\nORDER BY 1;"
        },
        {
            "description": "How to create a temporary function called `IRRCalc` that accepts an array of integers as input?",
            "sql": "CREATE\nTEMPORARY FUNCTION IRRCalc(CArray ARRAY<INT64>);"
        },
        {
            "description": "How to create a User-Defined Function (UDF) called IRRCalc that takes an array of Cashflow values as input?",
            "sql": "CREATE\nTEMPORARY FUNCTION IRRCalc(CArray ARRAY);"
        },
        {
            "description": "How to retrieve the Internal Rate of Return (IRR) of a series of cashflow values using a user-defined function written in Javascript.?",
            "sql": "CREATE\nTEMPORARY FUNCTION IRRCalc(CArray ARRAY<INT64>) RETURNS FLOAT64 LANGUAGE js AS \"\"\"                                                                                                       \n  min = 0.0;                                                                                                             \n  max = 1.0;                                                                                                             \n  do {                                                                                                                  \n    guess = (min + max) / 2;                                                                                                \n    NPV = 0.0;                                                                                                          \n    for (var j=0; j<CArray.length; j++){                                                                                  \n      NPV += CArray[j]/Math.pow((1+guess),j);                                                                            \n    }                                                                                                                 \n    if (NPV > 0){                                                                                                        \n      min = guess;                                                                                                     \n    }                                                                                                                 \n    else {                                                                                                                \n      max = guess;                                                                                                      \n    }                                                                                                                 \n  } while (Math.abs(NPV) > 0.00000001);                                                                                 \n  return guess * 100;                                                                                                 \n\"\"\";\n\nWITH INPUT AS\n  (SELECT [-100, 100, 100, 100, 100, 100] AS CArray\n   UNION ALL SELECT [-100, 100, 100, 100, 100] AS CArray)\nSELECT CArray,\n       IRRCalc(CArray) AS IRR\nFROM INPUT AS t;"
        },
        {
            "description": "How to use the MOD operator to partition and sum values in BigQuery?",
            "sql": "SELECT x,\n       MOD(x, 3) AS x_mod,\n       SUM(x) OVER (PARTITION BY MOD(x, 3)) AS SUM\nFROM UNNEST([1, 2, 3, 4, 5, 4, 3, 2, 1]) AS x;"
        },
        {
            "description": "How to calculate the ratio of each value in a bin to the total number of values in the bin?",
            "sql": "SELECT count_in_bin,\n       RATIO_TO_REPORT(count_in_bin) OVER() AS ratio\nFROM [project:dataset.table];"
        },
        {
            "description": "How many rows fall within a given bin?",
            "sql": "SELECT count_in_bin,\n       count_in_bin / total AS ratio\nFROM `project.dataset.table`,\n  (SELECT SUM(count_in_bin) total\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to calculate the difference between the end date of the current row and the end date of the previous row, grouped by client?",
            "sql": "SELECT client,\n       begindate,\n       enddate,\n       lag,\n       ROUND(DATE_DIFF(DATE(begindate), lag, DAY)) AS diff\nFROM\n  (SELECT client,\n          begindate,\n          enddate,\n          LAG(enddate, 1) OVER (PARTITION BY client\n                                ORDER BY begindate, client) AS lag,\n   FROM db\n   LIMIT 100;) AS t;"
        },
        {
            "description": "How to retrieve specific columns from 'bar20180328' and 'bar20180329' tables in 'tmp_elliottb' dataset.?",
            "sql": "SELECT y\nFROM `tmp_elliottb.bar20180328`\nUNION ALL\nSELECT y\nFROM `tmp_elliottb.bar20180329`;"
        },
        {
            "description": "How to retrieve all data from a range of tables based on naming suffix.?",
            "sql": "SELECT *\nFROM `tmp_elliottb.bar*`\nWHERE _TABLE_SUFFIX BETWEEN '20180301' AND '20180329';"
        },
        {
            "description": "How to retrieve results from tables with names that match a given pattern and have suffixes within a given date range.?",
            "sql": "SELECT *\nFROM `tmp_elliottb.bar*`\nWHERE _TABLE_SUFFIX BETWEEN '20180301' AND '20180329';"
        },
        {
            "description": "How to retrieve the TestId that generated the highest revenue.?",
            "sql": "SELECT\n  (SELECT ARRAY_AGG(REGEXP_EXTRACT(pageViewed.val, r'\\?test\\=([^&]*)')\n                    IGNORE NULLS\n                    ORDER BY pageViewed.hit DESC\n                    LIMIT 1)[OFFSET(0)]\n   FROM UNNEST(pagesViewed) AS pageViewed) AS TestId,\n       SUM(revenue) AS Revenue\nFROM `project.dataset.table`\nGROUP BY 1\nORDER BY 2 DESC;"
        },
        {
            "description": "How to retrieve the testId and revenue for each sessionId, ordered by revenue in descending order.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT '123456' AS sessionId,\n          100.00 AS revenue, ARRAY<STRUCT<hit INT64,\n                                          val STRING>>[(1, 'a.html'), (2, 'b.html'), (3, 'c.html?test=AAC'), (4, 'd.html?test=CCC')] AS pagesViewed\n   UNION ALL SELECT '5555',\n                    50.00, ARRAY<STRUCT<hit INT64,\n                                        val STRING>>[(1, 'a.html'), (2, 'b.html?test=123'), (3, 'c.html'), (4, 'd.html')] AS pagesViewed)\nSELECT\n  (SELECT ARRAY_AGG(REGEXP_EXTRACT(pageViewed.val, r'\\?test\\=([^&]*)')\n                    IGNORE NULLS\n                    ORDER BY pageViewed.hit DESC\n                    LIMIT 1)[OFFSET(0)]\n   FROM UNNEST(pagesViewed) AS pageViewed) AS TestId,\n       SUM(revenue) AS Revenue\nFROM `project.dataset.table`\nGROUP BY 1\nORDER BY 2 DESC;"
        },
        {
            "description": "How to retrieve an array of `cash_flow` and `date_delta` values.?",
            "sql": "SELECT cash_flow,\n       date_delta, ARRAY<FLOAT64> [cash_flow], ARRAY<INT64> [date_delta]\nFROM INPUT;"
        },
        {
            "description": "How to access a nested field of a JSON string and rename the key using the JSON_EXTRACT function in BigQuery?",
            "sql": "SELECT JSON_EXTRACT(REPLACE(attributes, \"# of items\", \"'number of items'\"), \"$['number of items']\") AS num_items\nFROM [project:dataset.test];"
        },
        {
            "description": "How to retrieve hit-level custom dimensions and hit-level referrer for a given visit ID.?",
            "sql": "SELECT visitId,\n       ARRAY\n  (SELECT AS STRUCT refferer,\n     (SELECT value\n      FROM UNNEST(hit.customDimensions) dim\n      WHERE INDEX = 200) cd_index_200\n   FROM UNNEST(hits) hit) hits,\n\n  (SELECT value\n   FROM UNNEST(customDimensions) dim\n   WHERE INDEX = 100) cd_index_100\nFROM `project.dataset.session_data`;"
        },
        {
            "description": "How to calculate the number of sessions with Add to Cart events for each date?",
            "sql": "SELECT date,\n  (SELECT coalesce(LOGICAL_OR(eventinfo.eventcategory = 'Enhanced Ecommerce'\n                              AND eventinfo.eventaction = 'Add to Cart'), FALSE)\n   FROM t.hits) hasAdd2CartEvent,\n             SUM(totals.visits) AS sessions\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*` t\nGROUP BY 1,\n         2\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to retrieve the sum of total visits per date that have Add to Cart events.?",
            "sql": "SELECT date, SUM(totals.visits) AS sessions\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*` t\nWHERE\n    (SELECT coalesce(LOGICAL_OR(eventinfo.eventcategory = 'Enhanced Ecommerce'\n                                AND eventinfo.eventaction = 'Add to Cart'), FALSE)\n     FROM t.hits)\nGROUP BY 1\nORDER BY 1;"
        },
        {
            "description": "How to retrieve the rank of employees, considering that each employee can have multiple ranks.?",
            "sql": "SELECT Employee_number,\n       MAX(IF(Rank_1 = 'Gold', 'Gold', NULL)) AS Rank_1,\n       MAX(IF(Rank_2 = 'Gold', 'Gold', NULL)) AS Rank_2,\n       MAX(IF(Rank_3 = 'Gold', 'Gold', NULL)) AS Rank_3,\n       MAX(IF(Rank_4 = 'Gold', 'Gold', NULL)) AS Rank_4,\n       MAX(IF(Rank_5 = 'Gold', 'Gold', NULL)) AS Rank_5\nFROM\n  (SELECT Employee_number,\n          Rank_1,\n          LAG(Rank_1, 1, '') OVER (PARTITION BY Employee_number\n                                   ORDER BY Rank_1) AS Rank_2,\n          LAG(Rank_1, 2, '') OVER (PARTITION BY Employee_number\n                                   ORDER BY Rank_1) AS Rank_3,\n          LAG(Rank_1, 3, '') OVER (PARTITION BY Employee_number\n                                   ORDER BY Rank_1) AS Rank_4,\n          LAG(Rank_1, 4, '') OVER (PARTITION BY Employee_number\n                                   ORDER BY Rank_1) AS Rank_5\n   FROM\n     (SELECT Employee_number,\n             Rank,\n             RANK() OVER (PARTITION BY Employee_number\n                          ORDER BY Rank) AS rnk\n      FROM\n        (SELECT Employee_number,\n                Rank\n         FROM `bigquery-public-data.usa_names.usa_1910_2013`\n         WHERE Name = 'William'\n         GROUP BY Employee_number,\n                  Rank\n         ORDER BY Rank)));"
        },
        {
            "description": "How to retrieve the number of times each scenario occurred.?",
            "sql": "SELECT COUNT(DISTINCT CASE\n                          WHEN RANK1 IS NOT NULL THEN 1\n                          WHEN RANK2 IS NOT NULL THEN 2\n                          WHEN RANK3 IS NOT NULL THEN 3\n                          WHEN RANK4 IS NOT NULL THEN 4\n                          WHEN RANK5 IS NOT NULL THEN 5\n                          ELSE 6\n                      END) 'Scenario'\nFROM dataset.table;"
        },
        {
            "description": "How to retrieve revenue data for each month and region, with missing data replaced by 0.?",
            "sql": "SELECT months.month_abr AS month_abr,\n       regions.region AS region,\n       COALESCE(revenues.revenue, 0) revenue\nFROM months\nCROSS JOIN\n  (SELECT region\n   FROM revenues) regions\nLEFT JOIN revenues ON months.month_abr = revenues.month_abr\nAND regions.region = revenues.region;"
        },
        {
            "description": "How to retrieve revenue data for specific months and regions using a LEFT JOIN?",
            "sql": "SELECT months.month_abr AS month_abr,\n       regions.region AS region,\n       COALESCE(revenues.revenue, 0) revenue\nFROM\n  (SELECT month_number,\n          month_abr\n   FROM\n     (SELECT 1 month_number,\n             'jan' month_abr),\n     (SELECT 2 month_number,\n             'feb' month_abr),\n     (SELECT 3 month_number,\n             'mar' month_abr),\n     (SELECT 4 month_number,\n             'apr' month_abr),\n     (SELECT 5 month_number,\n             'may' month_abr),\n     (SELECT 6 month_number,\n             'jun' month_abr)) AS months\nCROSS JOIN\n  (SELECT region\n   FROM\n     (SELECT region\n      FROM\n        (SELECT 'jan' month_abr,\n                      'north' region,\n                              100 revenue),\n        (SELECT 'feb' month_abr,\n                      'north' region,\n                              150 revenue),\n        (SELECT 'mar' month_abr,\n                      'north' region,\n                              250 revenue))\n   GROUP BY region) regions\nLEFT JOIN\n  (SELECT month_abr,\n          region,\n          revenue\n   FROM\n     (SELECT 'jan' month_abr,\n                   'north' region,\n                           100 revenue),\n     (SELECT 'feb' month_abr,\n                   'north' region,\n                           150 revenue),\n     (SELECT 'mar' month_abr,\n                   'north' region,\n                           250 revenue)) AS revenues ON months.month_abr = revenues.month_abr\nAND regions.region = revenues.region\nORDER BY regions.region,\n         months.month_number;"
        },
        {
            "description": "How to retrieve the name of the region which has maximum revenue in the month of 'apr'.?",
            "sql": "SELECT region\nFROM\n  (SELECT region,\n          revenue,\n          ROW_NUMBER() OVER (PARTITION BY region\n                             ORDER BY revenue DESC) AS rn\n   FROM `bigquery-public-data.usa_names.usa_1910_current`\n   WHERE month_abr= 'apr') T\nWHERE rn=1;"
        },
        {
            "description": "How to retrieve technician, supervisor, and location information for each row, grouped by ID with the maximum value for each key?",
            "sql": "SELECT id,\n       MAX(CASE\n               WHEN KEY = 'technician' THEN value\n           END) AS technician,\n       MAX(CASE\n               WHEN KEY = 'supervisor' THEN value\n           END) AS supervisor,\n       MAX(CASE\n               WHEN KEY = 'location' THEN value\n           END) AS LOCATION\nFROM yourTable\nGROUP BY id;"
        },
        {
            "description": "How to retrieve all addresses that have a 5-digit zip code at the end of the address string.?",
            "sql": "SELECT address,\n       regexp_contains(address, r\"\\s\\d{5}$\") CHECK\nFROM table1;"
        },
        {
            "description": "How to retrieve randomly selected organizations associated with movies that meet specific name and genre criteria and compare them?",
            "sql": "SELECT name,\n       genre,\n       data_one,\n       data_two\nFROM\n  (SELECT t.name,\n          t.genre,\n          ARRAY_AGG(t.org\n                    LIMIT 20) orgs,\n          ARRAY_AGG(t.org2\n                    LIMIT 20) orgs2\n   FROM `project.dataset.table` t\n   JOIN SEARCH s ON LOWER(s.name) = LOWER(t.name)\n   AND LOWER(s.genre) = LOWER(t.genre)\n   WHERE RAND() < 0.5\n   GROUP BY t.name,\n            t.genre), UNNEST(orgs) data_one WITH\nOFFSET pos1,\n       UNNEST(orgs2) data_two WITH\nOFFSET pos2\nWHERE pos1 = pos2\nORDER BY name,\n         genre,\n         data_one;"
        },
        {
            "description": "How to retrieve 10 unique values of 'sample' from rows in the 'table' table where a field named 'index' is an array or struct with nested 'sample' values.?",
            "sql": "SELECT DISTINCT SAMPLE\nFROM `dataset.table`,\n     UNNEST(INDEX) SAMPLE\nLIMIT 10;"
        },
        {
            "description": "How to retrieve the first 10 distinct `sample.id` values from a table and an array column.?",
            "sql": "SELECT DISTINCT sample.id\nFROM `dataset.table`,\n     UNNEST(INDEX) SAMPLE\nLIMIT 10;"
        },
        {
            "description": "How to retrieve clients who posted at least two comments in the last 12 months?",
            "sql": "SELECT client,\n       COUNT(id) AS sales,\n       MIN(time_ts),\nFROM [bigquery-public-data:hacker_news.comments]\nGROUP BY client\nHAVING COUNT(id) = 2\nAND MIN(time_ts) > DATE_ADD(USEC_TO_TIMESTAMP(NOW()), -12, 'MONTH');"
        },
        {
            "description": "How to calculate the change in value for each day?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 5 value, TIMESTAMP '2018-01-01 01:59:34.000 UTC' ts,\n                                                           '2018-01-01' dt\n   UNION ALL SELECT 2, TIMESTAMP '2018-01-01 18:39:34.000 UTC', '2018-01-01'\n   UNION ALL SELECT 6, TIMESTAMP '2018-01-02 14:06:14.000 UTC', '2018-01-02'\n   UNION ALL SELECT 6, TIMESTAMP '2018-01-02 16:52:54.000 UTC', '2018-01-02'\n   UNION ALL SELECT 1, TIMESTAMP '2018-01-02 19:39:34.000 UTC', '2018-01-02'\n   UNION ALL SELECT 5, TIMESTAMP '2018-01-02 22:26:14.000 UTC', '2018-01-02'\n   UNION ALL SELECT 5, TIMESTAMP '2018-01-03 03:59:34.000 UTC', '2018-01-03')\nSELECT dt,\n       IFNULL(lastValue - LAG(lastValue) OVER(\n                                              ORDER BY dt), 0) AS CHANGE,\n       lastValue AS value\nFROM\n  (SELECT *\n   FROM\n     (SELECT dt,\n             FIRST_VALUE(value) OVER(myWindow) AS firstValue,\n             LAST_VALUE(value) OVER(myWindow) AS lastValue\n      FROM `project.dataset.table` WINDOW myWindow AS (PARTITION BY dt\n                                                       ORDER BY ts ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))\n   GROUP BY 1,\n            2,\n            3)\nORDER BY dt;"
        },
        {
            "description": "How to retrieve a list of words from the given input table.?",
            "sql": "SELECT WordString\nFROM RowId;"
        },
        {
            "description": "How to retrieve the total monthly transactions grouped by month.?",
            "sql": "SELECT MONTH,\n       SUM(rolling_transactions) AS total_monthly_transactions\nFROM t\nGROUP BY MONTH;"
        },
        {
            "description": "How to retrieve the square root of the 'x' values using a JavaScript UDF (User Defined Function)?",
            "sql": "CREATE\nTEMPORARY FUNCTION sqt(x int64) RETURNS int64 LANGUAGE js AS \"\"\"\n  return Math.sqrt(x);\n\"\"\";\n\nWITH table1 AS\n  (SELECT 25 AS x\n   UNION ALL SELECT 100 AS x\n   UNION ALL SELECT 625 AS x)\nSELECT x,\n       sqt(x)square_root\nFROM table1;"
        },
        {
            "description": "How to retrieve a numbered list of all rows from a table.?",
            "sql": "SELECT <needed fields>, ROW_NUMBER() OVER() num\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to select values between two numbers?",
            "sql": "SELECT <needed fields>\nFROM `project.dataset.temp`\nWHERE num BETWEEN 10000 AND 30000;"
        },
        {
            "description": "How to retrieve the total amount by month?",
            "sql": "SELECT DATE_TRUNC(DATE(date_create), MONTH) AS MONTH,\n       sum(amount) AS amount_m\nFROM TABLE\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve a nested struct with a field renamed to field2?",
            "sql": "SELECT STRUCT(STRUCT(STRUCT(10 AS c) AS b, 'field2' AS field2) AS a) original_struct;"
        },
        {
            "description": "How to retrieve a result given a STRUCT with a nested field.?",
            "sql": "SELECT original_struct.a.b.c,\n       original_struct.a.b.d,\n       original_struct.a.field2\nFROM UNNEST([{\"a\": {\"b\": {\"c\": 10, \"d\": \"test\"}, \"field2\": \"field2\"}}]) AS original_struct;"
        },
        {
            "description": "How to retrieve field names of nested and repeated struct fields in a table?",
            "sql": "SELECT row.`new_struct`.a.b.c,\n       row.`new_struct`.a.field2\nFROM [bigquery-public-data:samples.github_nested]\nLIMIT 1;"
        },
        {
            "description": "How to retrieve a list of the users and times for 'activity' rows where the command equals 1 and the activity_Time column has a date >= to the date in the behaviour_Time column of the join 'behaviour' table?",
            "sql": "SELECT activity.User_ID User_ID,\n       activity.Event_Time activity_Time,\n       behaviour.Event_Time behaviour_Time\nFROM `project.dataset.activity` activity\nJOIN `project.dataset.behaviour` behaviour ON activity.User_ID = behaviour.User_ID\nAND activity.Event_Time >= behaviour.Event_Time\nWHERE Cmd = 1;"
        },
        {
            "description": "How to retrieve the sum of all fields named 'foo' within every JSON record.?",
            "sql": "CREATE TEMP FUNCTION SumFieldsNamedFoo(json_row STRING) RETURNS FLOAT64 LANGUAGE js AS \"\"\"\nfunction SumFoo(obj) {\n  var sum = 0;\n  for (var field in obj) {\n    if (obj.hasOwnProperty(field) && obj[field] != null) {\n      if (typeof obj[field] == \"OBJECT\") {\n        sum += SumFoo(obj[field]);\n      } else if (field == \"foo\") {\n        sum += obj[field];\n      }\n    }\n  }\n  return sum;\n}\nvar row = JSON.parse(json_row);\nreturn SumFoo(row);\n\"\"\";\n\nWITH INPUT AS\n  (SELECT STRUCT(1 AS foo, 2 AS bar, STRUCT('foo' AS x, 3.14 AS foo) AS baz) AS s,\n          10 AS foo\n   UNION ALL SELECT NULL,\n                    4 AS foo\n   UNION ALL SELECT STRUCT(NULL, 2 AS bar, STRUCT('fizz' AS x, 1.59 AS foo) AS baz) AS s,\n                    NULL AS foo)\nSELECT TO_JSON_STRING(t) AS json_row,\n       SumFieldsNamedFoo(TO_JSON_STRING(t)) AS foo_sum\nFROM INPUT AS t;"
        },
        {
            "description": "How to calculate frequencies for a given campaign?",
            "sql": "WITH freq AS (\nSELECT MONTH AS MONTH,\n                campaign_id,\n                campaign,\n                CASE\n                    WHEN freq = '1' THEN 'a'\n                    WHEN freq = '2' THEN 'b'\n                    WHEN freq = '3-6' THEN 'c'\n                    WHEN freq = '7-9' THEN 'd'\n                    WHEN freq = '10-19' THEN 'e'\n                    WHEN freq = '20-29' THEN 'f'\n                    WHEN freq = '30-39' THEN 'g'\n                    WHEN freq = '40-49' THEN 'h'\n                    WHEN freq = '50-59' THEN 'i'\n                    WHEN freq = '60-69' THEN 'j'\n                    WHEN freq = '70-79' THEN 'k'\n                    WHEN freq = '80-89' THEN 'l'\n                    WHEN freq = '90-99' THEN 'm'\n                    WHEN freq = '100+' THEN 'n'\n                    ELSE 'other'\n                END AS\nSORT,\n                freq,\n                sum(imps) AS imps,\n                sum(uu) AS uu\nFROM...;"
        },
        {
            "description": "How to retrieve the number of active accounts for each day between a specified start and end date?",
            "sql": "SELECT date_item,\n       COUNT(1) active_accounts\nFROM `accounts`,\n     UNNEST(GENERATE_DATE_ARRAY(DATE(subscription_start), IFNULL(DATE(subscription_end), CURRENT_DATE()), INTERVAL 1 DAY)) date_item\nGROUP BY date_item;"
        },
        {
            "description": "How to retrieve the first 24 months of the dbc tables?",
            "sql": "SELECT subsequent_month\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY tablename) subsequent_month\n   FROM dbc.tables)\nWHERE subsequent_month <= 24;"
        },
        {
            "description": "How to update rows in a BigQuery table and view the number of rows affected?",
            "sql": "UPDATE TABLE\nSET col\nWHERE CONDITION;"
        },
        {
            "description": "How to retrieve Shakespeare's words with a minimum occurrence count, grouped by corpus.?",
            "sql": "SELECT word,\n       word_count\nFROM `bigquery-public-data.samples.shakespeare`\nWHERE corpus = @corpus\n  AND word_count >= @min_word_count\nORDER BY word_count DESC;"
        },
        {
            "description": "How to retrieve the min values for each column from the 'url' field in a table, where the 'url' field contains query parameters in the format '/path?key1=value1&...', organized into key-value pairs.?",
            "sql": "CREATE TEMP FUNCTION parseColumn(kv STRING, COLUMN_NAME STRING) AS (IF(SPLIT(kv, '=')[OFFSET(0)]= COLUMN_NAME, SPLIT(kv, '=')[OFFSET(1)], NULL));\n\nWITH `project.dataset.table` AS\n  (SELECT '/test/test.aspx?extra=abc&DS_Vendor=55039&DS_ProdVer=7.90.100.0&DS_ProdLang=EN&DS_Product=MTT&DS_OfficeBits=32' AS url\n   UNION ALL SELECT '/test/test.aspx?DS_Vendor=55192&DS_ProdVer=4.30.100.0&more=123&DS_ProdLang=DE&DS_Product=MTE&DS_OfficeBits=64')\nSELECT MIN(parseColumn(kv, 'DS_Vendor')) AS DS_Vendor,\n       MIN(parseColumn(kv, 'DS_ProdVer')) AS DS_ProdVer,\n       MIN(parseColumn(kv, 'DS_ProdLang')) AS DS_ProdLang,\n       MIN(parseColumn(kv, 'DS_Product')) AS DS_Product,\n       MIN(parseColumn(kv, 'DS_OfficeBits')) AS DS_OfficeBits\nFROM `project.dataset.table`,\n     UNNEST(REGEXP_EXTRACT_ALL(url, r'[?&]([^?&]+)')) AS kv\nGROUP BY url;"
        },
        {
            "description": "How to retrieve the first six operational offices and their current office file bit levels.?",
            "sql": "SELECT DS_Office,\n       DS_ProdVer,\n       DS_Vendor,\n       DS_ProdLang,\n       MAX(DS_OfficeBits) AS MaxOfficeBits\nFROM `full_ table`\nWHERE DS_ProdLang = 'EN'\nGROUP BY DS_Office,\n         DS_ProdVer,\n         DS_Vendor,\n         DS_ProdLang\nORDER BY DS_Office\nLIMIT 6;"
        },
        {
            "description": "How to retrieve the string after a specified string in the input string.?",
            "sql": "SELECT strArr1\nFROM T1;"
        },
        {
            "description": "How to retrieve the top 1000 highest number of mean temperature samples within a specified day range?",
            "sql": "WITH query AS\n  (SELECT * EXCEPT(rank)\n   FROM\n     (SELECT *,\n             RANK() OVER (PARTITION BY _pt\n                          ORDER BY num_mean_temp_samples) AS rank\n      FROM\n        (SELECT FORMAT_TIMESTAMP(\"%Y%m%d\", _PARTITIONTIME) AS DAY,\n                _PARTITIONTIME AS _pt,\n                *\n         FROM `mydataset.gsod_partitioned`) q_nested) q\n   WHERE rank < 1000)\nSELECT num_mean_temp_samples,\n       count(1) AS samples\nFROM query\nWHERE DAY IN ('20100101',\n              '20100103')\nGROUP BY 1\nORDER BY 1;"
        },
        {
            "description": "How to create a partitioned table using a view?",
            "sql": "CREATE TABLE your_dataset.PartitionedTable PARTITION BY date_column AS\nSELECT *\nFROM your_dataset.YourView;"
        },
        {
            "description": "How to how to remove items from a cart?",
            "sql": "SELECT *\nFROM UNNEST(cart) AS item;"
        },
        {
            "description": "How to retrieve the first two rows of device information for users from the firebase-analytics-sample-data dataset?",
            "sql": "SELECT user_dim.device_info.*\nFROM [firebase-analytics-sample-data:android_dataset.app_events_20160607]\nLIMIT 2;"
        },
        {
            "description": "How many devices per mobile brand?",
            "sql": "SELECT device_type\nFROM `bigquery-public-data.mobile_devices.v1.device_dimension`,\n     `bigquery-public-data.mobile_devices.v1.user_dim_device_info`\nWHERE `bigquery-public-data.mobile_devices.v1.device_dimension`.`brand` = `bigquery-public-data.mobile_devices.v1.user_dim_device_info`.`mobile_brand_name`;"
        },
        {
            "description": "How to retrieve the first two rows from the device_info column of the user_dim table?",
            "sql": "SELECT user_dim.device_info.*\nFROM `firebase-analytics-sample-data.android_dataset.app_events_20160607`\nLIMIT 2;"
        },
        {
            "description": "How to retrieve the employee who worked the most hours?",
            "sql": "SELECT name,\n       MAX(elapsed_hours) AS max_hours\nFROM `bigquery-public-data.usa_names.usa_1910_current`\nGROUP BY name;"
        },
        {
            "description": "How to order the results of a BigQuery query with NULL values first for records that have actual values?",
            "sql": "SELECT *\nFROM books\nORDER BY books ASC NULLS FIRST;"
        },
        {
            "description": "How to retrieve the books in ascending order, treating null values as the maximum value.?",
            "sql": "SELECT *\nFROM books\nORDER BY books ASC NULLS LAST;"
        },
        {
            "description": "How to retrieve the highest value of the persistent_user_id user property for active users within a date range?",
            "sql": "SELECT MAX(uid.key) AS keyname,\n       MAX(uid.value.value.string_value) AS user_id,\n       user_dim.app_info.app_instance_id AS app_id\nFROM `tableName_*`,\n     UNNEST (user_dim.user_properties) AS UID,\n            UNNEST (user_dim.user_properties) AS status\nWHERE uid.key = \"persistent_user_id\"\n  AND status.key = \"status\"\n  AND status.value.value.string_value = \"Active\"\n  AND (_table_suffix >= '20180101')\n  AND (_table_suffix <= '20180228')\nGROUP BY app_id;"
        },
        {
            "description": "How to find users who have had at least 3 sessions within a 3-day period?",
            "sql": "SELECT *\nFROM\n  (SELECT USER,\n          eventdate,\n          sessions_in_a_day,\n          SUM(sessions_in_a_day) OVER(PARTITION BY USER\n                                      ORDER BY eventdate ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) total_sessions_before,\n                                 DATE_DIFF(eventdate, LAG(eventdate) OVER(PARTITION BY USER\n                                                                          ORDER BY eventdate), DAY) delay\n   FROM\n     (SELECT USER,\n             eventdate,\n             COUNT(1) sessions_in_a_day\n      FROM t\n      GROUP BY USER,\n               eventdate))\nWHERE total_sessions_before >= 3\n  AND delay <= 3;"
        },
        {
            "description": "How many sessions for each user, delayed by 1 or 3 days?",
            "sql": "SELECT USER,\n       eventdate,\n       sessions_in_a_day,\n       total_sessions_before,\n       CASE\n           WHEN total_sessions_before = 0 THEN NULL\n           WHEN sessions_in_a_day = 0 THEN NULL\n           WHEN total_sessions_before > 0\n                AND sessions_in_a_day > 0 THEN total_sessions_before - sessions_in_a_day\n       END AS delay\nFROM\n  (SELECT USER,\n          eventdate,\n          SUM(sessions) AS sessions_in_a_day,\n          COALESCE(SUM(sessions) OVER (PARTITION BY USER\n                                       ORDER BY eventdate ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 0) AS total_sessions_before\n   FROM\n     (SELECT USER,\n             eventdate,\n             COUNT(*) AS sessions\n      FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n      GROUP BY USER,\n               eventdate)\n   GROUP BY USER,\n            eventdate)\nWHERE delay IN (1,\n                3);"
        },
        {
            "description": "How to use ARRAY OFFSET and ORDINAL functions to retrieve specific elements from an array?",
            "sql": "WITH sequences AS\n  (SELECT [STRUCT(\"mat\" AS subject,87 AS marks),(\"phy\",45),(\"che\",45),(\"zoo\",78),(\"eng\",87)] AS some_numbers\n   UNION ALL SELECT [STRUCT(\"mat\" AS subject,87 AS marks),(\"phy\",45),(\"che\",45),(\"zoo\",78),(\"eng\",87)] AS some_numbers\n   UNION ALL SELECT [STRUCT(\"mat\" AS subject,87 AS marks),(\"phy\",45),(\"che\",45),(\"zoo\",78),(\"eng\",87)] AS some_numbers)\nSELECT some_numbers,\n       some_numbers[OFFSET(1)] AS offset_1,\n       some_numbers[ORDINAL(1)] AS ordinal_1\nFROM sequences;"
        },
        {
            "description": "How to calculate an end datetime given a start datetime and a duration?",
            "sql": "WITH INPUT AS\n  (SELECT DATE(2018, 03, 05) AS start_date,\n          TIME(5, 0, 0) AS start_time,\n          TIME(8, 0, 0) AS duration)\nSELECT *,\n       DATETIME(start_date, start_time) AS start_datetime,\n       DATETIME_ADD(DATETIME_ADD(DATETIME_ADD(DATETIME(start_date, start_time), INTERVAL EXTRACT(HOUR\n                                                                                                 FROM duration) HOUR), INTERVAL EXTRACT(MINUTE\n                                                                                                                                        FROM duration) MINUTE), INTERVAL EXTRACT(SECOND\n                                                                                                                                                                                 FROM duration) SECOND) AS end_datetime,\n       DATETIME_ADD(DATETIME(start_date, start_time), INTERVAL DATETIME_DIFF(DATETIME(start_date, duration), DATETIME(start_date), SECOND) SECOND) end_datetime_nicer_way\nFROM INPUT;"
        },
        {
            "description": "How to retrieve the project IDs and total costs for projects that had a cost greater than 30 in at least one year.?",
            "sql": "SELECT ProjID,\n       SUM(Cost) AS TotalCost\nFROM new_projects\nGROUP BY ProjID\nHAVING TotalCost > 30;"
        },
        {
            "description": "How to retrieve all projects for the years 2001, 2002, and 2003 with corresponding costs?",
            "sql": "INSERT INTO new_projects\nSELECT ProjID,\n       2001,\n       Cost2001\nFROM projects\nUNION ALL\nSELECT ProjID,\n       2002,\n       Cost2002\nFROM projects\nUNION ALL\nSELECT ProjID,\n       2003,\n       Cost2003\nFROM projects;\n\n\nSELECT *\nFROM new_projects;\n\nGO;"
        },
        {
            "description": "How to retrieve the first 25 rows from a CSV file, ignoring the header row, and writing the results to a new table with a truncated write disposition.?",
            "sql": "SELECT *\nFROM CSV OPTIONS(allowJaggedRows=TRUE, skipLeadingRows=1, writeDisposition='WRITE_TRUNCATE')\nLIMIT 25;"
        },
        {
            "description": "How to create a table and partition it by a timestamp column?",
            "sql": "CREATE TABLE dataSet.myTableName (userName STRING, DateCreated TIMESTAMP, email STRING) PARTITION BY DATE(DateCreated) OPTIONS(description=\"a table partitioned by DateCreated\");"
        },
        {
            "description": "How to retrieve a JSON document as a string?",
            "sql": "SELECT JSON.stringify(item)\nFROM [my_table];"
        },
        {
            "description": "How to retrieve statistics for a completed BigQuery load job.?",
            "sql": "SELECT DATE(timestamp, 'America/Los_Angeles' /* TZ specific to load job */),\n       COUNT(1) AS cnt\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE gender = \"F\"\nGROUP BY DATE;"
        },
        {
            "description": "How to retrieve the data from a BigQuery view with a parameter?",
            "sql": "SELECT *\nFROM `mydataset.myview`\nWHERE FiscalYear = [\"Year\", \"Enter a year:\"];"
        },
        {
            "description": "How to retrieve the cumulative number of trips and partial row numbers for each month in the dataset.?",
            "sql": "WITH TEMP AS\n  (SELECT *,\n          SUM(COALESCE(lagged, 0)) OVER (\n                                         ORDER BY MONTH RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) cumulative\n   FROM\n     (SELECT *,\n             LAG(qty) OVER (\n                            ORDER BY MONTH) lagged\n      FROM\n        (SELECT EXTRACT(MONTH\n                        FROM pickup_datetime) MONTH,\n                                              COUNT(1) qty\n         FROM `nyc-tlc.green.trips_2014`\n         GROUP BY 1)))\nSELECT cumulative + ROW_NUMBER() OVER (PARTITION BY EXTRACT(MONTH\n                                                            FROM pickup_datetime)) ROW,\n                                                                                   *\nFROM `nyc-tlc.green.trips_2014`\nLEFT JOIN TEMP ON (MONTH= EXTRACT(MONTH\n                                  FROM pickup_datetime));"
        },
        {
            "description": "How to retrieve the data between the rows 10000001 and 10000100 from your_new_table.?",
            "sql": "SELECT *\nFROM `project.dataset.your_new_table`\nWHERE ROW BETWEEN 10000001 AND 10000100;"
        },
        {
            "description": "How to parse a string using PARSE_DATE to get a date object?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT '1/1/2018' date_as_string\n   UNION ALL SELECT '12/31/2018')\nSELECT PARSE_DATE('%m/%d/%Y', date_as_string) date_as_date\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to cast a date-formatted string as a DATE data type?",
            "sql": "SELECT date_as_date;"
        },
        {
            "description": "How to retrieve the first element for each row, grouping by the row identifier.?",
            "sql": "SELECT Row_Id,\n       first_element,\n       MAX(second_element) OVER (PARTITION BY Row_Id) AS Last_element\nFROM `bigquery-public-data.stackoverflow.posts_questions`;"
        },
        {
            "description": "How to retrieve monthly website visitation statistics including total visits, time on site, and new visits for the past 18 months?",
            "sql": "SELECT DATE_TRUNC(PARSE_DATE('%Y%m%d',date), MONTH) AS MonthStart,\n       SUM(totals.visits) AS Visits,\n       totals.timeOnSite AS TimeOnSite,\n       totals.newVisits AS NewVisit\nFROM `XXXX.ga_sessions_20*`\nWHERE _TABLE_SUFFIX >= '180215'\nGROUP BY Date, TimeOnSite,\n               NewVisit;"
        },
        {
            "description": "How to retrieve the top custom dimension values from Google Analytics sessions data?",
            "sql": "SELECT\n  (SELECT value\n   FROM t.customDimensions\n   WHERE INDEX=1) AS cd1 ,\n       COUNT(1) AS Qty\nFROM `project.dataset.ga_sessions_20180202` AS t\nGROUP BY 1;"
        },
        {
            "description": "How to convert a Unix timestamp stored as a string in JSON to a BigQuery TIMESTAMP?",
            "sql": "SELECT MSEC_TO_TIMESTAMP(INTEGER(JSON_EXTRACT_SCALAR(jsonBlob, '$.CreatedDateTime'))) AS CreatedDateTime;"
        },
        {
            "description": "How to get the CreatedDateTime from a JSON BLOB as a timestamp in milliseconds?",
            "sql": "SELECT TIMESTAMP_MILLIS(CAST(JSON_EXTRACT_SCALAR(jsonBlob, '$.CreatedDateTime') AS INT64)) AS CreatedDateTime;"
        },
        {
            "description": "How to create a BigQuery partitioned table?",
            "sql": "CREATE TABLE dataSet.myTableName (userName STRING, DateCreated TIMESTAMP, email STRING) PARTITION BY DATE(DateCreated) OPTIONS(description=\"a table partitioned by DateCreated\");"
        },
        {
            "description": "How to retrieve details about a Firehose load job.?",
            "sql": "SELECT timestamp_micros (job.startTime) AS startTime,\n       timestamp_micros (job.endTime) AS endTime,\n       job.jobReference.jobId AS jobId,\n       job.jobReference.projectId AS projectId,\n       job.status.state AS state,\n       job.statistics.load.inputFileBytes AS inputFileBytes,\n       job.statistics.load.outputBytes AS outputBytes,\n       job.statistics.load.outputRows AS outputRows,\n       job.statistics.load.badRecords AS badRecords;"
        },
        {
            "description": "How to how to query a BigQuery view with a filter on the FiscalYear column.?",
            "sql": "SELECT *\nFROM mydataset.myview\nWHERE FiscalYear = \"Year, Enter a year:\";"
        },
        {
            "description": "How to generate row numbers for each month, while also calculating cumulative counts?",
            "sql": "WITH TEMP AS\n  (SELECT *,\n          SUM(COALESCE(lagged, 0)) OVER (\n                                         ORDER BY MONTH RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) cumulative\n   FROM\n     (SELECT *,\n             LAG(qty) OVER (\n                            ORDER BY MONTH) lagged\n      FROM\n        (SELECT EXTRACT(MONTH\n                        FROM pickup_datetime) MONTH,\n                                              COUNT(1) qty\n         FROM `nyc-tlc.green.trips_2014`\n         GROUP BY 1)))\nSELECT cumulative + ROW_NUMBER() OVER (PARTITION BY EXTRACT(MONTH\n                                                            FROM pickup_datetime)) ROW,\n                                                                                   *\nFROM `nyc-tlc.green.trips_2014`\nLEFT JOIN TEMP ON (MONTH= EXTRACT(MONTH\n                                  FROM pickup_datetime));"
        },
        {
            "description": "How to how to retrieve rows from positions 10000001 to 10000100.?",
            "sql": "SELECT *\nFROM `project.dataset.your_new_table`\nWHERE ROW BETWEEN 10000001 AND 10000100;"
        },
        {
            "description": "How to retrieve the first and last dates in a date range.?",
            "sql": "SELECT MIN(date_as_date) AS date_as_date\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nUNION ALL\nSELECT MAX(date_as_date) AS date_as_date\nFROM `bigquery-public-data.usa_names.usa_1910_2013`;"
        },
        {
            "description": "How to use SPLIT and SAFE_OFFSET to extract the first and second elements from a list?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 id,\n          '1/2' list\n   UNION ALL SELECT 2,\n                    '1/3'\n   UNION ALL SELECT 3,\n                    '10/20'\n   UNION ALL SELECT 4,\n                    '15/'\n   UNION ALL SELECT 5,\n                    '12/31')\nSELECT id,\n       SPLIT(list, '/')[SAFE_OFFSET(0)] AS first_element,\n       SPLIT(list, '/')[SAFE_OFFSET(1)] AS second_element\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the first element of the arrays in the first_element column?",
            "sql": "SELECT first_element[OFFSET(0)] AS first_element\nFROM UNNEST(first_element) AS first_element;"
        },
        {
            "description": "How to retrieve the sum of visits, time on site, and new visits for each month starting in February 2018?",
            "sql": "SELECT DATE_TRUNC(PARSE_DATE('%Y%m%d',date), MONTH) AS MonthStart,\n       SUM(totals.visits) AS Visits,\n       totals.timeOnSite AS TimeOnSite,\n       totals.newVisits AS NewVisit\nFROM `XXXX.ga_sessions_20*`\nWHERE _TABLE_SUFFIX >= '180215'\nGROUP BY Date, TimeOnSite,\n               NewVisit;"
        },
        {
            "description": "How to retrieve the first dimension and count of sessions grouped by that dimension?",
            "sql": "SELECT\n  (SELECT value\n   FROM t.customDimensions\n   WHERE INDEX=1) AS cd1 ,\n       COUNT(1) AS Qty\nFROM `project.dataset.ga_sessions_20180202` AS t\nGROUP BY 1;"
        },
        {
            "description": "How to parse the CreationDateTime field from a JSON BLOB in BigQuery?",
            "sql": "SELECT MSEC_TO_TIMESTAMP(INTEGER(JSON_EXTRACT_SCALAR(jsonBlob, '$.CreatedDateTime'))) AS CreatedDateTime;"
        },
        {
            "description": "How do I extract the 'CreatedDateTime' value from a JSON string and convert it to milliseconds since epoch?",
            "sql": "SELECT TIMESTAMP_MILLIS(CAST(JSON_EXTRACT_SCALAR(jsonBlob, '$.CreatedDateTime') AS INT64)) AS CreatedDateTime;"
        },
        {
            "description": "How to retrieve the highest scoring post for each week from the 'twinpeaks' subreddit.?",
            "sql": "SELECT *\nFROM\n  (SELECT id,\n          CAST(EXTRACT(WEEK\n                       FROM TIMESTAMP_SECONDS(created_utc)) AS STRING) AS week_number,\n          score,\n          ROW_NUMBER() OVER (PARTITION BY CAST(EXTRACT(WEEK\n                                                       FROM TIMESTAMP_SECONDS(created_utc)) AS STRING)\n                             ORDER BY score DESC) rn\n   FROM t\n   WHERE BODY = 'r/twinpeaks') t\nWHERE rn = 1;"
        },
        {
            "description": "How to retrieve a DATE from a string representation?",
            "sql": "SELECT PARSE_DATETIME('%d/%m/%Y', '1/1/2008');"
        },
        {
            "description": "How to retrieve the name of the student, the highest score, and the subject in which the highest score was obtained.?",
            "sql": "WITH DATA AS\n  (SELECT DISTINCT name,\n                   Physics,\n                   Chemistry,\n                   Maths,\n                   Biology\n   FROM `[Your_Project].[Your_dataset].[Your_table]`)\nSELECT name,\n       (CASE\n            WHEN Physics >= Chemistry\n                 AND Physics >= Maths\n                 AND Physics >= Biology THEN Physics\n            WHEN Chemistry >= Physics\n                 AND Chemistry >= Maths\n                 AND Chemistry >= Biology THEN Chemistry\n            WHEN Maths >= Physics\n                 AND Maths >= Chemistry\n                 AND Maths >= Biology THEN Maths\n            WHEN Biology >= Physics\n                 AND Biology >= Chemistry\n                 AND Biology >= Maths THEN Biology\n            ELSE Physics\n        END) AS maxmark,\n       (CASE\n            WHEN Physics >= Chemistry\n                 AND Physics >= Maths\n                 AND Physics >= Biology THEN 'Physics'\n            WHEN Chemistry >= Physics\n                 AND Chemistry >= Maths\n                 AND Chemistry >= Biology THEN 'Chemistry'\n            WHEN Maths >= Physics\n                 AND Maths >= Chemistry\n                 AND Maths >= Biology THEN 'Maths'\n            WHEN Biology >= Physics\n                 AND Biology >= Chemistry\n                 AND Biology >= Maths THEN 'Biology'\n            ELSE 'Physics'\n        END) AS field\nFROM DATA;"
        },
        {
            "description": "How to retrieve a list of unique video IDs and their associated custom IDs from the 'revenue' table, using values from the 'channel_map' table if available, or 'Default' otherwise.?",
            "sql": "SELECT DISTINCT video_id,\n                COALESCE(a.custom_id, b.custom_id, 'Default')\nFROM `test2.revenue` a\nLEFT JOIN `test2.channel_map` b ON a.channel_id = b.channel_id;"
        },
        {
            "description": "How to find the student's best grade?",
            "sql": "WITH School AS\n  (SELECT 'John' Name,\n                 [94, 85, 86, 65] Grades\n   UNION ALL SELECT 'James',\n                    [97, 86, 84, 54]\n   UNION ALL SELECT 'David',\n                    [90, 82, 76, 45])\nSELECT Name,\n\n  (SELECT MAX(Grade)\n   FROM UNNEST(Grades) Grade) BestGrade\nFROM School;"
        },
        {
            "description": "How to obtain the highest recorded grade for each student?",
            "sql": "WITH School AS\n  (SELECT 'John' Name, array<struct<Subject string, Grade int64>>[('Physics', 94), ('Chemistry', 85), ('Math', 86), ('Biology', 65)] Grades\n   UNION ALL SELECT 'James', array<struct<Subject string, Grade int64>>[('Math', 97), ('Orchestra', 86), ('Spanish', 84)]\n   UNION ALL SELECT 'David', array<struct<Subject string, Grade int64>>[('History', 90), ('Spanish', 82), ('Chemistry', 76), ('Physics', 45)])\nSELECT Name,\n\n  (SELECT Grade\n   FROM UNNEST(Grades) Grade\n   ORDER BY Grade.Grade DESC\n   LIMIT 1) BestGrade\nFROM School;"
        },
        {
            "description": "How to retrieve the subjects and grades of the students with the highest grades in descending order.?",
            "sql": "SELECT Name,\n       Subject,\n       Grade\nFROM\n  (SELECT Name,\n          Subject,\n          Grade,\n          ROW_NUMBER() OVER (PARTITION BY Name\n                             ORDER BY Grade DESC) AS rn\n   FROM `bigquery-public-data.usa_names.usa_1910_2013`) ranked\nWHERE rn=1\nORDER BY Grade DESC,\n         Name;"
        },
        {
            "description": "How to retrieve profits of companies for a given year?",
            "sql": "SELECT company,\n       profit\nFROM TABLE_NAME\nWHERE YEAR = 'year_2017';"
        },
        {
            "description": "How to retrieve a table containing the company names, years, profits, and a history bar chart (indicated by a string of characters).?",
            "sql": "SELECT company,\n       YEAR,\n       profit,\n       history\nFROM TABLE_NAME;"
        },
        {
            "description": "How to upsert data from one BigQuery table into another table?",
            "sql": "INSERT INTO `fh-bigquery.tt.test_import_native` (id, DATA)\nSELECT *\nFROM `fh-bigquery.tt.test_import_sheet`\nWHERE id NOT IN\n    (SELECT id\n     FROM `fh-bigquery.tt.test_import_native`);"
        },
        {
            "description": "How to how to retrieve rows from a BigQuery table filtered by 'col1', 'date' using two variables containing date strings.?",
            "sql": "SELECT *\nFROM dta.tbl\nWHERE col1='{somevariable}'\n  AND date>='{substring of start.date}'\n  AND date<='{substring of end.date}';"
        },
        {
            "description": "How to retrieve the total absolute sum of the EMD (earth mover's distance) between two matching tables.?",
            "sql": "WITH joined_table AS\n  (SELECT IFNULL(table1.i, table2.i) AS i,\n          IFNULL(table1.p, 0) AS p,\n          IFNULL(table2.p, 0) AS q,\n   FROM table1\n   OUTER JOIN table2 ON table1.i = table2.i),\n     aggr AS\n  (SELECT (SUM(p-q) OVER win) * (i - (LAG(i, 1) OVER win)) AS emd\n   FROM joined_table WINDOW win AS (\n                                    ORDER BY i ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))\nSELECT SUM(ABS(emd)) AS total_emd\nFROM aggr;"
        },
        {
            "description": "How to retrieve the ID, name, symbole, and date from a string in Scala, and store the result in a tuple.?",
            "sql": "SELECT PARSE_STRING_WITH_TUPLE(STR) AS parsed_tuple\nFROM UNNEST([\"1,apple,AAPL,2020-01-01\",\"2,orange,ORN,2020-02-01\",\"3,banana,BNN,2020-03-01\"]) AS STR;"
        },
        {
            "description": "How to retrieve the first and second rows of the table with associated prefix names.?",
            "sql": "SELECT ROW_NUMBER() OVER () AS ROW,\n       User_ID,\n       first.Red AS first.Red,\n       first.Blue AS first.Blue,\n       first.Green AS first.Green,\n       first.Rating AS first.Rating,\n       second.Red AS second.Red,\n       second.Blue AS second.Blue,\n       second.Green AS second.Green,\n       second.Rating AS second.Rating,\n       first.Rating + second.Rating AS TotalRating\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER (PARTITION BY User_ID\n                             ORDER BY User_ID) AS FIRST\n   FROM TableName) AS FIRST\nJOIN\n  (SELECT *,\n          ROW_NUMBER() OVER (PARTITION BY User_ID\n                             ORDER BY User_ID) AS SECOND\n   FROM TableName) AS SECOND ON first.User_ID = second.User_ID;"
        },
        {
            "description": "How to extract a specific node's text content from an XML string?",
            "sql": "CREATE\nTEMPORARY FUNCTION XML(x STRING) RETURNS STRING LANGUAGE js AS \"\"\"\n  var data = fromXML(x);\n  return data.title;\n\"\"\" OPTIONS(library=\"gs://<BUCKET_NAME>/from-xml.min.js\");\n\n\nSELECT XML(a)\nFROM UNNEST([\"<title>Title of Page</title>\"]) AS a;"
        },
        {
            "description": "How to query the Unicode code points of the specified strings?",
            "sql": "SELECT CONCAT('*', CAST(CODE_POINTS('\u2605') AS STRING)),\n       CONCAT('*', CAST(CODE_POINTS('\u2606') AS STRING));"
        },
        {
            "description": "How to retrieve a rating representation as a string of filled and unfilled stars.?",
            "sql": "WITH Ratings AS (\n                   (SELECT 'A' name,\n                               2 score)\n                 UNION ALL\n                   (SELECT 'B' name,\n                               0 score)\n                 UNION ALL\n                   (SELECT 'C' name,\n                               5 score)\n                 UNION ALL\n                   (SELECT 'D' name,\n                               1 score))\nSELECT name,\n       CONCAT(REPEAT(CODE_POINTS_TO_STRING([9733]), score), REPEAT(CODE_POINTS_TO_STRING([9734]), 5-score)) score\nFROM Ratings;"
        },
        {
            "description": "How to retrieve the data from the 'scores' table, including the 'name' and 'score' columns.?",
            "sql": "SELECT name,\n       score\nFROM scores;"
        },
        {
            "description": "How to find the time range breaks within a given time range?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT \"foo\" AS id,\n          TIME(18, 0, 0) AS start_time,\n          TIME(22, 0, 0) AS end_time\n   UNION ALL SELECT \"bar\",\n                    TIME(19, 0, 0),\n                    TIME(23, 0, 0)\n   UNION ALL SELECT \"baz\",\n                    TIME(08, 0, 0),\n                    TIME(11, 0, 0)\n   UNION ALL SELECT \"qux\",\n                    TIME(05, 30, 0),\n                    TIME(07, 30, 0)\n   UNION ALL SELECT \"xxx\",\n                    TIME(05, 45, 0),\n                    TIME(23, 30, 0)),\n     breaks AS\n  (SELECT BREAK\n   FROM UNNEST([TIME(6,0,0), TIME(10,0,0), TIME(22,0,0)]) BREAK),\n     TEMP AS\n  (SELECT id,\n          start_time,\n          end_time,\n          ARRAY_AGG(BREAK\n                    ORDER BY BREAK) BREAK\n   FROM `project.dataset.table`\n   CROSS JOIN breaks\n   WHERE BREAK > start_time\n     AND BREAK < end_time\n   GROUP BY id,\n            start_time,\n            end_time)\nSELECT id,\n       POINT start_time,\n             IFNULL(next_point, POINT) end_time\nFROM\n  (SELECT id,\n          POINT,\n          LEAD(POINT) OVER(PARTITION BY id\n                           ORDER BY POINT) next_point\n   FROM TEMP,\n        UNNEST(ARRAY_CONCAT([start_time], BREAK, [end_time])) POINT)\nWHERE NOT next_point IS NULL;"
        },
        {
            "description": "How to find the row with the latest end time?",
            "sql": "SELECT `row id`,\n       MAX(end_time) AS latest_end_time\nFROM `events`\nGROUP BY `row id`\nORDER BY latest_end_time DESC\nLIMIT 1;"
        },
        {
            "description": "How to retrieve the total duration of each row id across which it appears in the table?",
            "sql": "SELECT row_id,\n       SUM(UNIX_TIMESTAMP(end_time) - UNIX_TIMESTAMP(start_time)) AS total_duration\nFROM UNNEST([STRUCT(1 AS row_id, '19:00:00' AS start_time, '22:00:00' AS end_time),\nSTRUCT(2 AS row_id, '22:00:00' AS start_time, '23:00:00' AS end_time),\nSTRUCT(3 AS row_id, '08:00:00' AS start_time, '10:00:00' AS end_time),\nSTRUCT(4 AS row_id, '10:00:00' AS start_time, '11:00:00' AS end_time),\nSTRUCT(5 AS row_id, '05:30:00' AS start_time, '06:00:00' AS end_time),\nSTRUCT(6 AS row_id, '06:00:00' AS start_time, '07:30:00' AS end_time),\nSTRUCT(7 AS row_id, '05:45:00' AS start_time, '06:00:00' AS end_time),\nSTRUCT(8 AS row_id, '06:00:00' AS start_time, '10:00:00' AS end_time),\nSTRUCT(9 AS row_id, '10:00:00' AS start_time, '22:00:00' AS end_time),\nSTRUCT(10 AS row_id, '22:00:00' AS start_time, '23:30:00' AS end_time)]);"
        },
        {
            "description": "How to retrieve the full visitor ID, visit ID, date, time (hour and minute), number of transactions, product names, and group by the full visitor ID, visit ID, date, hour, minute, product name, and number of transactions?",
            "sql": "SELECT fullVisitorId,\n       visitId,\n       CAST(date AS string) +' & ' + CAST (hits.hour AS string) + ':' + CAST (hits.minute AS string) AS datetime,\n                                                                             totals.transactions,\n                                                                             hits.item.productName,\nFROM [X.ga_sessions_20180221]\nWHERE hits.hitNumber =1\nGROUP BY fullVisitorId,\n         visitId, date, HOUR,\n                        MINUTE,\n                        hits.item.productName,\n                        totals.transactions;"
        },
        {
            "description": "How to count the number of distinct rows in a table for each unique array value?",
            "sql": "SELECT TO_JSON_STRING(a) arr,\n       COUNT(DISTINCT id) cnt\nFROM `project.dataset.table`\nGROUP BY arr;"
        },
        {
            "description": "How to retrieve distinct values of 'a' column and count of unique 'id' column from the table grouped by converting 'a' column to JSON string?",
            "sql": "SELECT ANY_VALUE(a) a,\n       COUNT(DISTINCT id) cnt\nFROM `project.dataset.table`\nGROUP BY TO_JSON_STRING(a);"
        },
        {
            "description": "How to retrieve a list of the orderIds that have helmet related purchase?",
            "sql": "SELECT h.transaction.transactionId AS orderId\nFROM `google.com:analytics-bigquery.LondonCycleHelmet.ga_sessions_20130910` AS t\nCROSS JOIN t.hits AS h\nWHERE totals.transactions > 0\n  AND h.transaction.transactionId IS NOT NULL\n  AND\n    (SELECT LOGICAL_OR(page.pagePath LIKE \"/helmets/%\")\n     FROM t.hits);"
        },
        {
            "description": "How many transactions were made during the first hit of a visit for a given product?",
            "sql": "SELECT fullVisitorId,\n       visitId, date, hits.hour,\n                      hits.minute,\n                      hits.hitNumber,\n                      totals.transactions,\n                      hits.item.productName,\nFROM [XXXXXXXX.ga_sessions_20180221]\nWHERE hits.hitNumber =1\nGROUP BY fullVisitorId,\n         visitId, date, hits.hour,\n                        hits.minute,\n                        hits.hitNumber,\n                        totals.transactions,\n                        hits.item.productName;"
        },
        {
            "description": "How to use regular expressions to extract specific parts of a string in BigQuery?",
            "sql": "SELECT REGEXP_EXTRACT(split_col, r'^(.*?)-.*?-.*?$') AS idx,\n       REGEXP_EXTRACT(split_col, r'^.*?-(.*?)-.*?$') AS cnt,\n       REGEXP_EXTRACT(split_col, r'^.*?-.*?-(.*?$)') AS name\nFROM\n  (SELECT SPLIT(source_field, ',') split_col\n   FROM\n     (SELECT \"idx1-cnt1-name1,idx2-cnt2-name2\" source_field));"
        },
        {
            "description": "How to extract name and type components of comma-separated strings based on a specified pattern?",
            "sql": "SELECT REGEXP_EXTRACT(split_col, r'^.*?-(.*?)-.*?') AS name,\n       REGEXP_EXTRACT(split_col, r'^.*?-.*?-(.*?)-') AS TYPE\nFROM\n  (SELECT SPLIT(source_string, ',') split_col\n   FROM\n     (SELECT \"item1-name1-type1-value1, item2-name2-type2-value2\" source_string));"
        },
        {
            "description": "How to retrieve the results of a query that includes UNNEST on two arrays.?",
            "sql": "WITH `project.dataset.MY_DB` AS\n  (SELECT 1 id,\n          '11-12-2000' startDate,\n                       '11-12-2010' endDate,\n                                    'Blue' info1,\n                                           ['Circle','Triangle', 'Square'] info2,\n                                           ['A', 'B'] info3\n   UNION ALL SELECT 2,\n                    '11-12-2001',\n                    '11-12-2011',\n                    'Yellow',\n                    ['<*>'],\n                    ['C']\n   UNION ALL SELECT 3,\n                    '11-12-2007',\n                    '11-12-2008',\n                    'Brown',\n                    ['Circle','Triangle'],\n                    ['D', 'B'])\nSELECT id,\n       startDate,\n       endDate,\n       info1,\n       info2,\n       info3\nFROM `project.dataset.MY_DB`,\n     UNNEST(info2) info2,\n     UNNEST(info3) info3\nWHERE info2 != '<*>'\n  AND info3 = 'B'\nORDER BY id;"
        },
        {
            "description": "How to retrieve unique row IDs where a specified value in a text column repeats at least once?",
            "sql": "SELECT DISTINCT Row_id\nFROM TABLE_NAME\nWHERE info2 IN\n    (SELECT info2\n     FROM TABLE_NAME\n     GROUP BY info2\n     HAVING COUNT(*) > 1);"
        },
        {
            "description": "How to randomly select a year from the natality dataset?",
            "sql": "SELECT source_year\nFROM `bigquery-public-data.samples.natality`\nWHERE RAND() < n/137826763;"
        },
        {
            "description": "How to retrieve the first n source years from the natality data set where the order of years is randomized.?",
            "sql": "SELECT source_year\nFROM `bigquery-public-data.samples.natality`\nORDER BY rand()\nLIMIT n;"
        },
        {
            "description": "How to select a random sample of rows from a table using BigQuery SQL?",
            "sql": "SELECT source_year,\n       rand() AS r\nFROM\n  (SELECT source_year\n   FROM `bigquery-public-data.samples.natality`\n   WHERE RAND() < 2*n / 137826763)\nORDER BY r\nLIMIT n;"
        },
        {
            "description": "How to retrieve the first five rows from the Wikipedia dataset.?",
            "sql": "SELECT *\nFROM `bigquery-samples.wikipedia_benchmark.Wiki1B`\nLIMIT 5;"
        },
        {
            "description": "How to retrieve all rows in a table with only the 'PhoneNumber' column?",
            "sql": "SELECT PhoneNumber\nFROM `bigquery-public-data.usa_names.usa_1910_current`;"
        },
        {
            "description": "How to retrieve results from a subquery with an aggregate total for the result set.?",
            "sql": "SELECT t.*,\n       (v1 + v2 + v3 . . .) AS total\nFROM (<your query here>) t;"
        },
        {
            "description": "How to write a Pandas DataFrame to BigQuery table in alternative 3 way using GCS as intermediate ,by defining a GCS bucket, and inserting data to BigQuery table?",
            "sql": "CREATE\nOR OVERWRITE TABLE `TestDataSet.TestTable` OPTIONS (skip_leading_rows=1) AS\nSELECT *,\n       ROW_NUMBER() OVER () AS _unique_record_id\nFROM `test-project-333218.TestDataSet.tempTest`\nWHERE _unique_record_id &le;\n\n1\nDELETE\nFROM `test-project-333218.TestDataSet.tempTest`;"
        },
        {
            "description": "How to retrieve the values for 'n', 'alternative_1', and 'alternative_3' from the table.?",
            "sql": "SELECT n,\n       alternative_1,\n       alternative_3\nFROM TABLE;"
        },
        {
            "description": "How to retrieve the top 10 Google BigQuery-related questions and their view counts from Stack Overflow in JSON format?",
            "sql": "SELECT TO_JSON_STRING(t, TRUE)\"\n+ \"\nFROM\n  (SELECT CONCAT('https://stackoverflow.com/questions/', CAST(id AS STRING)) AS url,\n          \"\n     + \"view_count \"\n     + \"\n   FROM `bigquery-public-data.stackoverflow.posts_questions` \"\n     + \"\n   WHERE tags like '%google-bigquery%' \"\n     + \"\n   ORDER BY favorite_count DESC\n   LIMIT 10) AS t;"
        },
        {
            "description": "How to retrieve the top 100 viewed questions within the specified date range from the Google Stack Overflow public dataset.?",
            "sql": "SELECT url,\n       view_count\nFROM `bigquery-public-data.stackoverflow.posts_questions`\nWHERE creation_date >= \"2018-06-01\"\n  AND creation_date < \"2018-07-01\"\nORDER BY view_count DESC\nLIMIT 100;"
        },
        {
            "description": "How to retrieve the minimum price for 'appl' stocks every second?",
            "sql": "SELECT MIN(price), timestamp\nFROM [database]\nWHERE stock = 'appl'\n  AND second(timestamp) = 0\nGROUP BY timestamp\nORDER BY timestamp;"
        },
        {
            "description": "How to retrieve all rows from a series of STRUCTS in a BigQuery table?",
            "sql": "WITH test AS\n  (SELECT *\n   FROM UNNEST([\n  STRUCT(1 AS key, 'x' AS col1, 'y' AS col2),\n  STRUCT(2 AS key, 'a' AS col1, 'b' AS col2),\n  STRUCT(4 AS key, 'x' AS col1, 'y' AS col2)\n  ]))\nSELECT test.*\nFROM UNNEST(GENERATE_ARRAY(1,\n                             (SELECT MAX(KEY)\n                              FROM test))) AS KEY\nLEFT JOIN test USING(KEY);"
        },
        {
            "description": "How to find the week number of the previous day?",
            "sql": "SELECT WEEK(DATE_ADD('2018-01-07', -1, \"DAY\"));"
        },
        {
            "description": "How to create a table named `my_table` in `my_dataset`?",
            "sql": "CREATE TABLE `my_dataset.my_table` (...);"
        },
        {
            "description": "How to retrieve the latest count of previous rows of the same value.?",
            "sql": "SELECT dt,\n       value,\n       count(value) OVER (\n                          ORDER BY dt ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS count_previous_all,\n       count(value) OVER (\n                          ORDER BY dt ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING\n                          AND value = TRUE) AS count_previous_true\nFROM dataset.table_or_view;"
        },
        {
            "description": "How to select a particular column from a table?",
            "sql": "SELECT color\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE name = \"William\";"
        },
        {
            "description": "How to retrieve the average request count per country across all days within a given partitioned BigQuery table?",
            "sql": "WITH avg_byday AS\n  (SELECT country,\n          AVG(req) AS req_avg\n   FROM `thePartitionedTable_*`\n   GROUP BY _TABLE_SUFFIX,\n            country)\nSELECT country,\n       AVG(req_avg)\nFROM avg_byday\nGROUP BY country;"
        },
        {
            "description": "How to retrieve users that have executed an 'A' event before executing it again on a later date, and ensure that the value of the 'before' column is lower than the value of the 'after' column.?",
            "sql": "SELECT dt,\n       USER,\n       event,\nBEFORE,\n       AFTER\nFROM\n  (SELECT dt,\n          USER,\n          event,\n   BEFORE,\n          AFTER,\n          ROW_NUMBER() OVER (PARTITION BY USER\n                             ORDER BY dt ASC) AS row_num\n   FROM\n     (SELECT dt,\n             USER,\n             event,\n             MAX(\n                 BEFORE) OVER (PARTITION BY USER) AS\n      BEFORE,\n             MAX(AFTER) OVER (PARTITION BY USER) AS AFTER\n      FROM your_table\n      WHERE dt IS NOT NULL\n        AND USER IS NOT NULL\n        AND event = 'A'\n      GROUP BY dt,\n               USER,\n               event) AS t) AS sub\nWHERE row_num = 1\n  AND\n  BEFORE < AFTER;"
        },
        {
            "description": "How to how to retrieve unique values for a given key, where the key repeats, but the values don't?",
            "sql": "SELECT dt,\n       value,\n       ARRAY_TO_STRING(DISTINCT ARRAY_AGG(value), ',') AS list_as_string,\n       ARRAY_AGG(DISTINCT value) AS list_as_arr\nFROM t\nGROUP BY dt\nORDER BY dt;"
        },
        {
            "description": "How many returning and new visitors came to the site during this period?",
            "sql": "SELECT totals.newVisits IS NOT NULL AS isNew,\n                                       COUNT(DISTINCT fullvisitorid) AS visitors,\n                                       SUM(totals.visits) AS sessions\nFROM `project.dataset.ga_sessions_20180214`\nGROUP BY 1;"
        },
        {
            "description": "How many visitors have returned to the website?",
            "sql": "WITH visitors AS\n  (SELECT fullvisitorid,\n          MAX(totals.newVisits) isNew,\n          SUM(totals.visits) AS sessions\n   FROM `project.dataset.ga_sessions_20180214`\n   GROUP BY 1)\nSELECT isNew IS NOT NULL AS isNew,\n                            COUNT(1) AS visitors,\n                            sum(sessions) AS sessions\nFROM visitors\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve the name of the closest event based on the start and end dates, grouped by ID, start date, end date, and color?",
            "sql": "SELECT a_id,\n       a_start,\n       a_end,\n       color,\n       ARRAY_AGG(name\n                 ORDER BY POW(ABS(a_start - b_start), 2) + POW(ABS(a_end - b_end), 2)\n                 LIMIT 1)[SAFE_OFFSET(0)] name\nFROM A\nJOIN B ON a_id = b_id\nGROUP BY a_id,\n         a_start,\n         a_end,\n         color;"
        },
        {
            "description": "How to retrieve the count of rows in the table.?",
            "sql": "SELECT COUNT(*)\nFROM TABLE_NAME;"
        },
        {
            "description": "How to retrieve only the values from a column, excluding the field names.?",
            "sql": "SELECT REGEXP_REPLACE(old_data, r'^\\w*:', '') AS new_data\nFROM TABLE;"
        },
        {
            "description": "How to how to retrieve the titles of Wikipedia pages that contain the word 'olimpic'?",
            "sql": "SELECT title\nFROM `bigquery-public-data.samples.wikipedia`\nWHERE title like \"%olimpic%\"\nLIMIT 100;"
        },
        {
            "description": "How many times does each keyword appear for each pair of IDs?",
            "sql": "SELECT t1.id1,\n       t2.id2 count(t3.keyword) AS num_matches,\n       count(t3.keyword) / count(*) AS proportion_matches\nFROM t1\nLEFT JOIN t2 ON t1.id1 = t2.id1\nLEFT JOIN t3 ON t1.id2 = t3.id2\nAND t2.keyword = t3.keyword\nGROUP BY t1.id1,\n         t2.id2;"
        },
        {
            "description": "How to convert a string date in the format 'DD-MON-YY' to a timestamp using multiple REGEXP_REPLACE statements?",
            "sql": "SELECT TIMESTAMP( REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE('04-JAN-16', 'JAN', '01'), 'FEB', '02'), 'MAR', '03'), 'ABR', '04'), 'MAY', '05'), 'JUN', '06'), 'JUL', '07'), 'AUG', '08'), 'SEP', '09'), 'OCT', '10'), 'NOV', '11'), 'DEC', '12') AS YOURTIMESTAMP;"
        },
        {
            "description": "How to retrieve a table containing the full month names and corresponding month numbers.?",
            "sql": "SELECT *\nFROM UNNEST([STRUCT(\"JAN\" AS MONTH_STRING, \"01\" AS MONTH_NUMBER), STRUCT(\"FEB\", \"02\"), STRUCT(\"MAR\", \"03\"), STRUCT(\"ABR\", \"04\"), STRUCT(\"MAY\", \"05\"), STRUCT(\"JUN\", \"06\"), STRUCT(\"JUL\", \"07\"), STRUCT(\"AUG\", \"08\"), STRUCT(\"SEP\", \"09\"), STRUCT(\"OCT\", \"10\"), STRUCT(\"NOV\", \"11\"), STRUCT(\"DEC\", \"12\")]) AS t;"
        },
        {
            "description": "How to retrieve the schema of a table?",
            "sql": "SELECT *\nFROM `<project_id>.<dataset_id>.INFORMATION_SCHEMA.COLUMNS`\nWHERE `table_name` = '<table_name>';"
        },
        {
            "description": "How to specify a nested record field in a BigQuery schema?",
            "sql": "CREATE SCHEMA bq_schema.nested_schema_demo_schema (fullName STRING NOT NULL, phoneNumber RECORD NOT NULL, number INT64, areaCode INT64);"
        },
        {
            "description": "How to retrieve the difference between `x` and `y` coordinates of the row with `xpos` and `ypos` equal to 1, or NULL if this row is not found?",
            "sql": "SELECT ARRAY_AGG(x\n                 ORDER BY IF(xflag = 1, xpos, 9999)\n                 LIMIT 1)[SAFE_OFFSET(0)] - ARRAY_AGG(y\n                                                      ORDER BY IF(yflag = 1, ypos, 9999)\n                                                      LIMIT 1)[SAFE_OFFSET(0)] diff\nFROM `yourproject.yourdataset.yourtable`;"
        },
        {
            "description": "How to how to retrieve user information based on user display name?",
            "sql": "SELECT username,\n       userDisplayname,\n       userId\nFROM WordsDatabase.SearchAPI\nWHERE LOWER(userDisplayname) Like LOWER('% + req.query.name + '%');"
        },
        {
            "description": "How to retrieve a user's username, user display name and user id if their user display name matches the given value.?",
            "sql": "SELECT username,\n       userDisplayname,\n       userId\nFROM WordsDatabase.SearchAPI\nWHERE REGEXP_CONTAINS(userDisplayname, r'(?i)${theQuery}');"
        },
        {
            "description": "How to retrieve the value that's in the 3rd position of a string, separated by '\u00bb'?",
            "sql": "WITH test AS\n  (SELECT 'AA\u00bbBB\u00bbCC\u00bbDD\u00bbEE\u00bbFF' string\n   UNION ALL SELECT 'ZZ\u00bbXX\u00bbRR\u00bbPP\u00bbEE\u00bbFF')\nSELECT SPLIT(string, '\u00bb')[OFFSET(2)] AS string_1\nFROM test;"
        },
        {
            "description": "How to retrieve the most recent status update by account ID and email, along with the total count of updates for each account ID and email.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 123456 accountID,\n          '[email\u00a0protected]' email,\n                              'state1' status_update,\n                                       '02/02/2016' dt\n   UNION ALL SELECT 123456,\n                    '[email\u00a0protected]',\n                    'state2',\n                    '10/10/2018'\n   UNION ALL SELECT 456123,\n                    '[email\u00a0protected]',\n                    'state2',\n                    '05/04/2017'\n   UNION ALL SELECT 789123,\n                    '[email\u00a0protected]',\n                    'state2',\n                    '22/04/2016'\n   UNION ALL SELECT 789123,\n                    '[email\u00a0protected]',\n                    'state1',\n                    '17/06/2018'\n   UNION ALL SELECT 456345,\n                    '[email\u00a0protected]',\n                    'state1',\n                    '13/08/2017'\n   UNION ALL SELECT 456345,\n                    '[email\u00a0protected]',\n                    'state2',\n                    '09/07/2015'\n   UNION ALL SELECT 456345,\n                    '[email\u00a0protected]',\n                    'state2',\n                    '09/07/2014')\nSELECT accountID,\n       email,\n       ARRAY_AGG(status_update\n                 ORDER BY PARSE_DATE('%d/%m/%Y', dt) DESC\n                 LIMIT 1)[\nOFFSET (0)] most_recent_status_update,\n       COUNT(1) AS cnt\nFROM `project.dataset.table`\nGROUP BY accountID,\n         email;"
        },
        {
            "description": "How to retrieve the total email addresses that has 'state2' status?",
            "sql": "SELECT COUNT(DISTINCT email) AS total_emails\nFROM your_table\nWHERE most_recent_status_update = 'state2';"
        },
        {
            "description": "How to find all duplicated values in a specific column?",
            "sql": "SELECT original_list,\n       new_list\nFROM your_table\nWHERE original_list = new_list;"
        },
        {
            "description": "How to find the path that each user took through the various source and destination columns, in the order in which the user visited the sources and destinations?",
            "sql": "CREATE\nTEMPORARY FUNCTION path(arr ARRAY<STRUCT<s STRING, d STRING>>) RETURNS ARRAY<STRING> LANGUAGE js AS \"\"\"\n  var result = [], p;\n  for (i = 0; i < arr.length; i++){arr[i].flag = 0;}\n  for (i = 0; i < arr.length; i++){\n    if (arr[i].flag == 0) {\n      arr[i].flag = 1;\n      p = arr[i].s + ',' + arr[i].d + next(p, arr[i].d);\n      result.push(p);\n    }\n  }; return result;\n  function next(p, s) {\n    for (j = 0; j < arr.length; j++) {\n      if(arr[j].flag == 0 && arr[j].s == s) {\n        arr[j].flag = 1;\n        return ',' + arr[j].d + next(p, arr[j].d);\n      } \n    } return '';\n  }\n\"\"\"\nSELECT USER,\n       path(ARRAY_AGG(STRUCT<s STRING, d STRING>(SOURCE, destination)\n                      ORDER BY TIME)) AS PATH\nFROM `yourproject.yourdataset.yourtable` t\nGROUP BY USER;"
        },
        {
            "description": "How to retrieve distinct dates for `Data_Dt` from both the `Origination` and `Transition` tables based on a common `Loan_Num_Q` key?",
            "sql": "SELECT a.Data_Dt AS Data_Dt\nFROM `testDataSet.Origination` a\nINNER JOIN `testDataSet.Transition` b ON a.Loan_Num_Q = b.Loan_Num_Q\nGROUP BY a.Data_Dt;"
        },
        {
            "description": "How to retrieve table data from a snapshot table.?",
            "sql": "SELECT *\nFROM [yourproject:yourdataset.yourtable@<time>];"
        },
        {
            "description": "How to retrieve the number of distinct contents associated with README.md files?",
            "sql": "SELECT EXACT_COUNT_DISTINCT(contents.id)\nFROM [bigquery-public-data:github_repos.sample_contents] CONTENTS\nINNER JOIN [bigquery-public-data:github_repos.sample_files] files ON contents.id = files.id\nWHERE files.path = 'README.md';"
        },
        {
            "description": "How to retrieve the ids with tags where the tags are not all in the same category, like users with tags representing both location and names.?",
            "sql": "WITH id_tags AS\n  (SELECT 1 AS ID,\n          ['Michael','New York'] AS tags\n   UNION ALL SELECT 2 AS ID,\n                    ['Michael','Jon', 'Texas'] AS tags\n   UNION ALL SELECT 3 AS ID,\n                    ['abcd','Washington'] AS tags\n   UNION ALL SELECT 4 AS ID,\n                    ['Washington','New York','Michael'] AS tags\n   UNION ALL SELECT 5 AS ID,\n                    ['America','Michael'] AS tags\n   UNION ALL SELECT 6 AS ID,\n                    ['Washington','Michael', 'defg'] AS tags\n   UNION ALL SELECT 7 AS ID,\n                    ['America','Burqq','defg'] AS tags),\n     tagsCategory AS\n  (SELECT 'Michael' AS tags,\n          'Person' AS category\n   UNION ALL SELECT 'Jon' AS tags,\n                    'Person' AS category\n   UNION ALL SELECT 'Burqq' AS tags,\n                    'Person' AS category\n   UNION ALL SELECT 'New York' AS tags,\n                    'City' AS category\n   UNION ALL SELECT 'Washington' AS tags,\n                    'City' AS category\n   UNION ALL SELECT 'Texas' AS tags,\n                    'City' AS category)\nSELECT id,\n       COUNTIF(category = 'City') AS cities,\n       COUNTIF(category = 'Person') AS NAMES\nFROM id_tags,\n     UNNEST(tags) tag\nJOIN tagsCategory ON tag = tagsCategory.tags\nGROUP BY id\nHAVING NOT cities = 1\nOR NOT NAMES = 1;"
        },
        {
            "description": "How to remove newline delimiters from a string?",
            "sql": "SELECT new_line_delims,\n       REPLACE(new_line_delims, '\\n', '') AS new_line_delims_replaced\nFROM\n  (SELECT '\\nThis has several embedded\\n new line delims\\n' AS new_line_delims);"
        },
        {
            "description": "How to retrieve the schema of a table?",
            "sql": "SELECT COLUMN_NAME,\n       data_type,\n       MODE\nFROM `bigquery-public-data.samples.shakespeare`\nWHERE name LIKE \"year%\";"
        },
        {
            "description": "How to retrieve metadata for the latest query job.?",
            "sql": "SELECT *\nFROM `bigquery-samples.wikipedia_benchmark.Wiki1k`\nLIMIT 0;"
        },
        {
            "description": "How to get the schema of a table in a dataset?",
            "sql": "SELECT *,\n\n  (SELECT *,\n          ROW_NUMBER() OVER (PARTITION BY `Destination Table`\n                             ORDER BY `Destination Table`) cnt\n   FROM `BIGQUERY-PUBLIC-DATA.utility_usage_explorer.openaq_global`\n   LIMIT 1) AS tmpTable;"
        },
        {
            "description": "How to retrieve the URL fragment of a given column.?",
            "sql": "SELECT REGEXP_EXTRACT(col, '^(http://[^/]+)') AS url_fragment\nFROM yourTable;"
        },
        {
            "description": "How to list a random sample of the results of a SQL query, in JSON format?",
            "sql": "SELECT *\nFROM `bigquery-samples.wikipedia_benchmark.Wiki1k`\nLIMIT 0;"
        },
        {
            "description": "How to extract only the domain name from a provided URL?",
            "sql": "SELECT REGEXP_EXTRACT(col, '^(http://[^/]+)') AS url_fragment\nFROM yourTable;"
        },
        {
            "description": "How to retrieve the custom dimension value for the first hit for each product SKU and session?",
            "sql": "SELECT fullVisitorId,\n       visitId,\n       hits.hitNumber,\n       product.productSKU,\n       MAX(IF(c.index=1, c.value, NULL)) AS customDimesion1\nFROM 17823880.ga_sessions_20180128,\n              UNNEST(hits) AS hits,\n              UNNEST(hits.product) AS product,\n              UNNEST(product.customDimensions) AS c\nGROUP BY 1,\n         2,\n         3,\n         4;"
        },
        {
            "description": "How to retrieve all columns, with hit counts, custom dimension hit counts, and product hit counts for sessions with at least one transaction for January 27, 2018.?",
            "sql": "SELECT date AS sessionScope,\n\n  (SELECT count(hitNumber)\n   FROM t.hits) hitScope,\n\n  (SELECT SUM(IF(cd.value='example', 1, 0))\n   FROM t.hits AS h,\n        h.customDimensions cd\n   WHERE cd.index=1) hitCdScope,\n\n  (SELECT COUNT(p.productSku)\n   FROM t.hits AS h,\n        h.product AS p\n   WHERE h.ecommerceaction.action_type='6') productScope\nFROM `project.dataset.ga_sessions_20180127` AS t\nWHERE totals.transactions > 0\nLIMIT 1000;"
        },
        {
            "description": "How to retrieve the value of an integer field, represented as a float, along with all other fields in a table.?",
            "sql": "SELECT CAST(int_field AS FLOAT) AS float_field, <all_other_fields>\nFROM YourTable;"
        },
        {
            "description": "How to select specific columns from a table WHERE a timestamp column is greater than or equal to a specific date and time?",
            "sql": "SELECT id,\n       weight,\n       net_weight\nFROM `body_table-1345.bodies.weights\nWHERE birthdate >= '2017-01-01 00:00:00';"
        },
        {
            "description": "How to retrieve a list of visit ids and unique SKUs associated with each action type for the visitor's session?",
            "sql": "SELECT visitid,\n       ARRAY\n  (SELECT AS STRUCT ecommerceAction.action_type act_type, ARRAY_AGG(DISTINCT productSku\n                                                                    IGNORE NULLS) skus_list\n   FROM UNNEST(hits), UNNEST(product)\n   GROUP BY 1) DATA\nFROM `test.1234.ga_sessions_*`;"
        },
        {
            "description": "How to retrieve a list of distinct origins with 'space' in the name from the country_jp and country_us tables for 201712?",
            "sql": "WITH query_1 AS\n  (SELECT DISTINCT origin AS japan\n   FROM `chrome-ux-report.country_jp.201712`\n   WHERE origin LIKE \"%space%\"),\n     query_2 AS\n  (SELECT DISTINCT origin AS usa\n   FROM `chrome-ux-report.country_us.201712`\n   WHERE origin LIKE \"%space%\")\nSELECT ARRAY\n  (SELECT japan\n   FROM query_1) AS japan,\n       ARRAY\n  (SELECT usa\n   FROM query_2) AS usa;"
        },
        {
            "description": "How many distinct origins contain the word \"space\" in their URL in the Japan and US data sets?",
            "sql": "WITH query_1 AS\n  (SELECT DISTINCT origin AS japan\n   FROM `chrome-ux-report.country_jp.201712`\n   WHERE origin LIKE \"%space%\"),\n     query_2 AS\n  (SELECT DISTINCT origin AS usa\n   FROM `chrome-ux-report.country_us.201712`\n   WHERE origin LIKE \"%space%\")\nSELECT ARRAY_LENGTH(ARRAY\n                      (SELECT japan\n                       FROM query_1)) AS japan_count,\n       ARRAY_LENGTH(ARRAY\n                      (SELECT usa\n                       FROM query_2)) AS usa_count;"
        },
        {
            "description": "How to retrieve the first 10 unique visit ID's and their custom dimensions as an array of key-value pairs from table_a in BigQuery.?",
            "sql": "SELECT visitNumber,\n       visitId,\n       fullVisitorId,\n\n  (SELECT CONCAT('[', STRING_AGG(CONCAT('{\"', CAST(INDEX AS STRING), '\":', '\"', IFNULL(value, ''), '\"', '}'), ','), ']')\n   FROM UNNEST(hits.customDimensions)) AS customDimensions\nFROM table_a\nLEFT JOIN UNNEST(hits) AS hits\nLIMIT 10;"
        },
        {
            "description": "How to how to find the sum of a column in BigQuery.?",
            "sql": "SELECT SUM(amount) AS foo\nFROM mybigquerytable;"
        },
        {
            "description": "How to retrieve the total amount in the mybigquerytable table?",
            "sql": "SELECT SUM(amount)\nFROM mybigquerytable;"
        },
        {
            "description": "How to retrieve the sum of the 'amount' property for each row in the 'mybigquerytable' table.?",
            "sql": "SELECT SUM(amount) AS fooFROM mybigquerytable;"
        },
        {
            "description": "How to retrieve the average tone, anxiousness, word count, and other related measures for GKG entries related to Turkey over time.?",
            "sql": "SELECT substr(string(DATE), 0, 8) AS daydate,\n       count(1),\n       avg(float(REGEXP_REPLACE(V2Tone, r',.*', \"\"))),\n       avg(float(REGEXP_EXTRACT(GCAM, r'v19.1:([-d.]+)'))),\n       sum(integer(REGEXP_EXTRACT(GCAM, r'c8.3:([-d.]+)'))),\n       sum(integer(REGEXP_EXTRACT(GCAM, r'wc:(d+)')))\nFROM [gdeltv2.gkg]\nWHERE V2Locations like '%Turkey%Turkey%'\nGROUP BY daydate;"
        },
        {
            "description": "How to retrieve the top 10 rows from the 'sample_table' table where the 'register_date' column is within the last 150 days.?",
            "sql": "SELECT t.*\nFROM `my-pj.my_dataset.sample_table` t\nWHERE register_date BETWEEN TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL -150 DAY) AND CURRENT_TIMESTAMP()\nLIMIT 10;"
        },
        {
            "description": "How to retrieve the number of session with e-commerce purchases?",
            "sql": "SELECT SUM(totals.visits) AS sessions\nFROM `project.123456789.ga_sessions_20180101` AS t\nWHERE\n    (SELECT LOGICAL_OR(h.ecommerceaction.action_type='2')\n     FROM t.hits AS h\n     WHERE\n         (SELECT LOGICAL_AND(isimpression IS NULL\n                             OR isimpression = FALSE)\n          FROM h.product));"
        },
        {
            "description": "How to retrieve visitor IDs and their corresponding scores as lists and arrays.?",
            "sql": "SELECT visitorID,\n       scores_as_array,\n       scores_as_list\nFROM [bigquery-public-data:stackoverflow.posts_questions]\nWHERE visitorId > 0;"
        },
        {
            "description": "How to retrieve the id, genre, and the maximum values of actor, actress, and price grouped by id and genre.?",
            "sql": "SELECT id,\n       genre,\n       max(actor),\n       max(actress),\n       max(price)\nFROM t\nGROUP BY id,\n         genre;"
        },
        {
            "description": "How to retrieve the movie ID, movie genre, array of actors, array of actresses, and array of prices for each movie.?",
            "sql": "SELECT id,\n       genre,\n       array_agg(actor\n                 IGNORE nulls),\n       array_agg(actress\n                 IGNORE nulls),\n       array_agg(price\n                 IGNORE nulls)\nFROM t\nGROUP BY id,\n         genre;"
        },
        {
            "description": "How to transform a timestamp to a specified format?",
            "sql": "SELECT PARSE_TIMESTAMP('%b %e %E4Y %I:%M%p', 'Jan 30 2016 12:00AM') AS ts_out\nFROM yourTable;"
        },
        {
            "description": "How to retrieve dates from strings using the PARSE_DATE function?",
            "sql": "SELECT PARSE_DATE('%b %e %E4Y', LEFT('Jan 30 2016 12:00AM', 11)) AS ts_out\nFROM yourTable;"
        },
        {
            "description": "How to create a materialized view?",
            "sql": "CREATE MATERIALIZED VIEW `project-id.dataset_id.TESTING` AS\nSELECT COUNT(*)\nFROM `project-id.dataset_id.table`;"
        },
        {
            "description": "How to retrieve the grams and price information from the combined results of table i and nested query with offset using RANGE_BUCKET function.?",
            "sql": "SELECT i.*,\n       price_map[SAFE_OFFSET(RANGE_BUCKET(grams, grams_map))] price\nFROM `project.dataset.info` i,\n  (SELECT AS STRUCT ARRAY_AGG(grams + 1\n                              ORDER BY grams) AS grams_map,\n                    ARRAY_AGG(price\n                              ORDER BY grams) AS price_map\n   FROM `project.dataset.map`);"
        },
        {
            "description": "How to retrieve a price for a specific gram value by performing a range bucket on an array of gram-to-price mappings.?",
            "sql": "WITH `project.dataset.info` AS\n  (SELECT 1 AS grams\n   UNION ALL SELECT 3\n   UNION ALL SELECT 5\n   UNION ALL SELECT 7\n   UNION ALL SELECT 10\n   UNION ALL SELECT 13\n   UNION ALL SELECT 15),\n     `project.dataset.map` AS\n  (SELECT 5 AS grams,\n          0.99 price\n   UNION ALL SELECT 10,\n                    1.99\n   UNION ALL SELECT 15,\n                    2.99)\nSELECT i.*,\n       price_map[SAFE_OFFSET(RANGE_BUCKET(grams, grams_map))] price\nFROM `project.dataset.info` i,\n  (SELECT AS STRUCT ARRAY_AGG(grams + 1\n                              ORDER BY grams) AS grams_map,\n                    ARRAY_AGG(price\n                              ORDER BY grams) AS price_map\n   FROM `project.dataset.map`);"
        },
        {
            "description": "How to retrieve the latest value of a text field, grouped by another field?",
            "sql": "SELECT grp,\n       ARRAY_AGG(text\n                 ORDER BY ts) AS text\nFROM\n  (SELECT *,\n          LAST_VALUE(IF(label=36, text, NULL)\n                     IGNORE NULLS) OVER(\n                                        ORDER BY ts) AS grp\n   FROM `project.dataset.table`\n   WHERE label IN (36,\n                   37,\n                   25))\nWHERE label = 25\nGROUP BY grp;"
        },
        {
            "description": "How to retrieve distinct sets of 'Received' values grouped by their preceding 'ErB0zyuzRq6DstbP0UdMag'?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 36 label,\n          '2020-06-01 15:54:31.266711 UTC' ts,\n                                           'ErB0zyuzRq6DstbP0UdMag' text\n   UNION ALL SELECT 25,\n                    '2020-06-01 15:55:31.266711 UTC',\n                    'Received: 1'\n   UNION ALL SELECT 25,\n                    '2020-06-01 15:56:31.266711 UTC',\n                    'Received: more text'\n   UNION ALL SELECT 26,\n                    '2020-06-01 15:57:31.266711 UTC',\n                    'Received: more text - to ignore'\n   UNION ALL SELECT 25,\n                    '2020-06-01 15:58:31.266711 UTC',\n                    'Received: and some more text'\n   UNION ALL SELECT 37,\n                    '2020-06-01 16:54:31.266711 UTC',\n                    'ErB0zyuzRq6DstbP0UdMag'\n   UNION ALL SELECT 36,\n                    '2020-06-01 16:55:31.266711 UTC',\n                    'XrB0zyuzRq6DstbP0UdMag'\n   UNION ALL SELECT 28,\n                    '2020-06-01 16:56:31.266711 UTC',\n                    'Received: 2 - to ignore'\n   UNION ALL SELECT 25,\n                    '2020-06-01 16:57:31.266711 UTC',\n                    'Received: more text 2'\n   UNION ALL SELECT 37,\n                    '2020-06-01 16:58:31.266711 UTC',\n                    'XrB0zyuzRq6DstbP0UdMag')\nSELECT grp,\n       ARRAY_AGG(text\n                 ORDER BY ts) AS text\nFROM\n  (SELECT *,\n          LAST_VALUE(IF(label=36, text, NULL)\n                     IGNORE NULLS) OVER(\n                                        ORDER BY ts) AS grp\n   FROM `project.dataset.table`\n   WHERE label IN (36,\n                   37,\n                   25))\nWHERE label = 25\nGROUP BY grp;"
        },
        {
            "description": "How to how to list any scopes requested by a project?",
            "sql": "SELECT *\nFROM google.cloud.resourcemanager.v3.projects.scopes;"
        },
        {
            "description": "How to delete table records in BigQuery for a specific day?",
            "sql": "DELETE\nFROM `bla.bla.bla`\nWHERE DAY = '{today}'\n  OR DAY = '{yesterday}';"
        },
        {
            "description": "How are Built-in and User-Defined Function names handled in terms of case sensitivity?",
            "sql": "SELECT category,\n       CASE SENSITIVE\nFROM\n  (SELECT 'Built-in Function names' AS category,\n          'No' AS CASE SENSITIVE\n   UNION ALL SELECT 'User-Defined Function names' AS category,\n                    'Yes' AS 'CASE SENSITIVE');"
        },
        {
            "description": "How to retrieve all fields except the nested 'acc' field from a BigQuery table where the partitioning field '_PARTITIONTIME' matches a specified date and the final balance sum for each account exceeds a specified amount?",
            "sql": "SELECT * EXCEPT(acc)\nFROM `test.test.test_partitioned`,\n     UNNEST(ACCOUNT) acc\nWHERE DATE(_PARTITIONTIME) = \"2020-03-01\"\n  AND acc.final_balance_sum >1;"
        },
        {
            "description": "How to count distinct DeviceIDs where PeripheralType is 5 and createdAt is within the last 7 days and serial is not null?",
            "sql": "SELECT count(DISTINCT DeviceID)\nFROM `dataworks-356fa.FirebaseArchive.test2`\nWHERE PeripheralType = 5\n  AND DATE(createdAt) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND CURRENT_DATE()\n  AND serial != 'null';"
        },
        {
            "description": "How to retrieve the distinct values of a combination of columns.?",
            "sql": "SELECT DISTINCT id,\n                KEY,\n                value\nFROM `project.dataset.my_table`\nORDER BY id,\n         KEY,\n         value;"
        },
        {
            "description": "How to retrieve data from a specific row in a table?",
            "sql": "SELECT *\nFROM `project.dataset.my_table` \nWHERE id=1;"
        },
        {
            "description": "How to retrieve the string values of the parameters passed in the query string as an array.?",
            "sql": "SELECT SPLIT(REGEXP_REPLACE (querystring, '.*\\?'),'(&|=)') AS d;"
        },
        {
            "description": "How to retrieve application fee percent of merchants created on 2017-07-18 01:04:00 UTC?",
            "sql": "SELECT application_fee_percent,\n       created,\n       currentlySelling,\n       features,\n       marketingFeatures\nFROM ML.MERCHANTS\nWHERE created = 1500476240;"
        },
        {
            "description": "How to retrieve all words from the Shakespeare dataset as a single string.?",
            "sql": "SELECT STRING_AGG(word) AS words\nFROM `bigquery-public-data.samples.shakespeare`;"
        },
        {
            "description": "How many words are in the Shakespeare dataset when words are duplicated 1000 times?",
            "sql": "SELECT STRING_AGG(CONCAT(word, corpus)) AS words\nFROM `bigquery-public-data.samples.shakespeare`\nCROSS JOIN UNNEST(GENERATE_ARRAY(1, 1000));"
        },
        {
            "description": "How to retrieve the number of resources exceeded during query execution?",
            "sql": "SELECT resources_consumed() AS resources_info;"
        },
        {
            "description": "How to retrieve a count of records with the same value in a column.?",
            "sql": "SELECT t1.*,\n       COUNT(*) OVER (PARTITION BY value) AS cnt\nFROM table1 t1;"
        },
        {
            "description": "How to retrieve information from table1, including the count of values grouped by 'value', and the count of values matching datecol = '2017-07-19' grouped by 'value'?",
            "sql": "SELECT t1.*,\n       COUNT(*) OVER (PARTITION BY value) AS cnt,\n       SUM(CASE\n               WHEN datecol = '2017-07-19' THEN 1\n               ELSE 0\n           END) OVER (PARTITION BY value) AS cnt_20170719FROM table1 t1;"
        },
        {
            "description": "How to retrieve data from a BigQuery table for a specific date range using TABLE_DATE_RANGE?",
            "sql": "SELECT <your fields here ...>\nFROM (TABLE_DATE_RANGE([xxx.ga_sessions_], DATE_ADD(CURRENT_TIMESTAMP(), -14 - DAYOFWEEK(CURRENT_TIMESTAMP()) + 2, 'DAY'), DATE_ADD(CURRENT_TIMESTAMP(), -1 - DAYOFWEEK(CURRENT_TIMESTAMP()) + 2, 'DAY')));"
        },
        {
            "description": "How do I retrieve data from BigQuery sessions table for a specific two-week period ending two days ago?",
            "sql": "SELECT * \nFROM `xxx.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d', DATE_ADD(CURRENT_DATE(), INTERVAL -14 - EXTRACT(DAYOFWEEK\n                                                                                                  FROM CURRENT_DATE()) + 2 DAY)) AND FORMAT_DATE('%Y%m%d', DATE_ADD(CURRENT_DATE(), INTERVAL -1 - EXTRACT(DAYOFWEEK\n                                                                                                                                                                                                          FROM CURRENT_DATE()) + 2 DAY));"
        },
        {
            "description": "How to retrieve the first three parameters from the request object?",
            "sql": "SELECT request.parameters.*\nFROM [yourProject:yourDataset.yourTable]\nLIMIT 3;"
        },
        {
            "description": "How to count only the first three parameters in a certain table?",
            "sql": "SELECT COUNT(1)\nFROM\n  (SELECT request.parameters.*\n   FROM [yourProject:yourDataset.yourTable]\n   LIMIT 3);"
        },
        {
            "description": "How to retrieve a list of unique serials and their counts.?",
            "sql": "SELECT ARRAY_AGG(DISTINCT serial) AS distinct_serials,\n       COUNT(DISTINCT serial) AS total_serials\nFROM UNNEST([{\"serial\":\"1\"}, {\"serial\":\"2\"}, {\"serial\":\"3\"}, {\"serial\":\"2\"}, {\"serial\":\"1\"}, {\"serial\":\"3\"}]);"
        },
        {
            "description": "How to retrieve the active serials in the past week across various peripheral types.?",
            "sql": "SELECT ARRAY_AGG(serial) serials,\n       ARRAY_LENGTH(ARRAY_AGG(serial)) total_serials\nFROM\n  (SELECT DISTINCT serial AS serial\n   FROM `dataworks-356fa.FirebaseArchive.test2`\n   WHERE (PeripheralType = 1\n          OR PeripheralType = 2\n          OR PeripheralType = 12)\n     AND EXTRACT(WEEK\n                 FROM createdAt) = EXTRACT(WEEK\n                                           FROM CURRENT_TIMESTAMP()) - 1\n     AND serial != 'null');"
        },
        {
            "description": "How to retrieve the number of distinct devices that had a peripheral type of 1, 2, or 12 in the past week.?",
            "sql": "SELECT count(DISTINCT serial)\nFROM `dataworks-356fa.FirebaseArchive.test2`\nWHERE (PeripheralType = 1\n       OR PeripheralType = 2\n       OR PeripheralType = 12)\n  AND EXTRACT(WEEK\n              FROM createdAt) = EXTRACT(WEEK\n                                        FROM CURRENT_TIMESTAMP()) - 1\n  AND serial != 'null';"
        },
        {
            "description": "How to retrieve metadata for specified objects.?",
            "sql": "SELECT id,\n       OBJECT,\n       metadata\nFROM metadata_table\nWHERE OBJECT IN (OBJECT_LIST);"
        },
        {
            "description": "How to retrieve user name and email from metadata in a table using JSON_EXTRACT_SCALAR function.?",
            "sql": "WITH `yourProject.yourDataset.yourTable` AS\n  (SELECT 1 AS id,\n          'user' AS OBJECT,\n          '{\"name\": \"BI Architect\", \"email\": \"[email\u00a0protected]\"}' AS metadata\n   UNION ALL SELECT 2,\n                    'expert',\n                    '{\"name\": \"Elliott Brossard\"}')\nSELECT id,\n       OBJECT,\n       JSON_EXTRACT_SCALAR(metadata, '$.name') AS name,\n       JSON_EXTRACT_SCALAR(metadata, '$.email') AS email\nFROM `yourProject.yourDataset.yourTable`\nORDER BY id;"
        },
        {
            "description": "How to select the best match from a BigQuery table based on multiple conditions?",
            "sql": "SELECT '1st Match' AS priority, <SOME fields>\nFROM YourTable\nWHERE <SOME conditions>\nUNION ALL\nSELECT '2st Match' AS priority, <SOME fields>\nFROM YourTable\nWHERE <other conditions>\nORDER BY priority, <other\nSORT field>\nLIMIT 1;"
        },
        {
            "description": "How to retrieve the game names, where there is a participant named sam?",
            "sql": "SELECT game\nFROM YourTable\nWHERE EXISTS\n    (SELECT 1\n     FROM UNNEST(participant)\n     WHERE name = 'sam');"
        },
        {
            "description": "How to set the `order_flag` column to true for rows in the `cart` table with an item ID that appears in an order?",
            "sql": "UPDATE `dataset.cart` c\nSET c.order_flag=TRUE\nWHERE\n    (SELECT value.string_value\n     FROM UNNEST(c.event_dim.params)\n     WHERE KEY = 'item_id') IN\n    (SELECT\n       (SELECT value.string_value\n        FROM UNNEST(o.event_dim.params)\n        WHERE KEY = 'item_id')\n     FROM `dataset.order` o);"
        },
        {
            "description": "How to retrieve a quick overview of the number of rows you have in an arbitrary table.?",
            "sql": "SELECT COUNT(1) AS ROW_COUNT\nFROM `LME_TABLES_DB.AD_AGNCY_ORG`;"
        },
        {
            "description": "How to retrieve the row count for specific tables?",
            "sql": "SELECT table_id,\n       ROW_COUNT\nFROM `myproject.mydataset.__TABLES__`\nWHERE table_id IN ('TABLEA',\n                   'TABLEB',\n                   'TABLEC');"
        },
        {
            "description": "How to retrieve the top entry in yourTable for each date, ordered by a?",
            "sql": "SELECT entry.*\nFROM\n  (SELECT ARRAY_AGG(ROW\n                    ORDER BY a DESC\n                    LIMIT 1)[OFFSET(0)] AS entry\n   FROM `yourProject.yourDataset.yourTable` ROW\n   GROUP BY date);"
        },
        {
            "description": "How to retrieve a constant value, 13, as an alias 'a'.?",
            "sql": "SELECT 13 AS a;"
        },
        {
            "description": "How to how to retrieve the rows in the partitioned table grouped by partition and ordered by column a?",
            "sql": "SELECT DATE(_partitiontime) AS partition_,\n       a\nFROM `project.dataset.partitioned_table`\nORDER BY a;"
        },
        {
            "description": "How to retrieve a row from the table with x = 1?",
            "sql": "SELECT *\nFROM your_table\nWHERE x = 1;"
        },
        {
            "description": "How to retrieve all rows from a table?",
            "sql": "SELECT *\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nLIMIT 100;"
        },
        {
            "description": "How to issue a query to BigQuery using the REST API?",
            "sql": "SELECT 1 AS x,\n       'foo' AS y;"
        },
        {
            "description": "How to create an anonymous table and populate it with values?",
            "sql": "SELECT 1 AS x,\n       'foo' AS y;"
        },
        {
            "description": "How to retrieve the execution state of the data transfer config with config ID 'my_config_id'.?",
            "sql": "SELECT status.state\nFROM `bigquery-public-data.google_cloud_dataplex.data_transfer_configs`\nWHERE config_id='my_config_id';"
        },
        {
            "description": "How to retrieve the state of an operation.?",
            "sql": "SELECT status.state\nFROM `{project}.{dataset}.{operation}`;"
        },
        {
            "description": "How to retrieve the INTEGER value of x and the STRING value of y from a BigQuery table.?",
            "sql": "SELECT x,\n       y\nFROM TABLE_NAME;"
        },
        {
            "description": "How to retrieve the latest record for each customer based on the `id` column and `lastUpdated` column, but handle possible duplicates.?",
            "sql": "WITH `project.dataset.customer_refdata` AS\n  (SELECT 1 AS id,\n          '2017-07-14 16:47:27' AS lastUpdated\n   UNION ALL SELECT 1,\n                    '2017-07-14 16:47:27'\n   UNION ALL SELECT 1,\n                    '2017-07-14 17:47:27'\n   UNION ALL SELECT 1,\n                    '2017-07-14 18:47:27'\n   UNION ALL SELECT 2,\n                    '2017-07-14 16:57:27'\n   UNION ALL SELECT 2,\n                    '2017-07-14 17:57:27'\n   UNION ALL SELECT 2,\n                    '2017-07-14 18:57:27'),\n     cus_watermark AS\n  (SELECT *,\n          PARSE_TIMESTAMP(\"%Y-%m-%d %T\", lastUpdated) AS UpdatedTimestampUTC\n   FROM `project.dataset.customer_refdata`),\n     cust_latest_rec_dup AS\n  (SELECT *,\n          ROW_NUMBER() OVER (PARTITION BY id\n                             ORDER BY UpdatedTimestampUTC DESC) AS rowNum\n   FROM cus_watermark)\nSELECT * EXCEPT(rowNum)\nFROM cust_latest_rec_dup\nWHERE rowNum = 1;"
        },
        {
            "description": "How to count active IDs over the past 7, 14, and 30 days?",
            "sql": "SELECT DAY,\n       COUNT(CASE\n                 WHEN period = 7 THEN id\n             END) AS days_07,\n       COUNT(CASE\n                 WHEN period = 14 THEN id\n             END) AS days_14,\n       COUNT(CASE\n                 WHEN period = 30 THEN id\n             END) AS days_30\nFROM\n  (SELECT dates.day AS DAY,\n          periods.period AS period,\n          id\n   FROM yourTable AS activity\n   CROSS JOIN\n     (SELECT DAY\n      FROM yourTable\n      GROUP BY DAY) AS dates\n   CROSS JOIN\n     (SELECT period\n      FROM\n        (SELECT 7 AS period\n         UNION ALL SELECT 14 AS period\n         UNION ALL SELECT 30 AS period)) AS periods\n   WHERE dates.day >= activity.day\n     AND CAST(DATE_DIFF(dates.day, activity.day, DAY) / periods.period AS INT64) = 0\n   GROUP BY 1,\n            2,\n            3)\nGROUP BY DAY;"
        },
        {
            "description": "How to calculate the daily average time on site for the duration of July 1-2, 2017?",
            "sql": "SELECT AVG(totals.timeOnSite) avgTimeOnSite\nFROM `project_id.dataset_id.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN \"20170701\" AND \"20170702\";"
        },
        {
            "description": "How to perform a cross-tabulation of two comma-delimited string values in BigQuery?",
            "sql": "WITH DATA AS\n  (SELECT 'Title 1,Title 2,Title 3,Title 4' AS Titles,\n          'Name 1,Name 2,Name 3,Name 4' AS NAMES)\nSELECT Title,\n       Name\nFROM DATA,\n     UNNEST(SPLIT(Titles)) AS Title WITH\nOFFSET AS pos1,\n          UNNEST(SPLIT(NAMES)) AS Name WITH\nOFFSET AS pos2\nWHERE pos1 = pos2\nORDER BY Title;"
        },
        {
            "description": "How to split out the comma-separated values in a string column into their own rows?",
            "sql": "SELECT Title,\n       Name\nFROM FLATTEN(\n               (# Use FLATTEN() to split the 'Titles' column into rows, creating a new column 'pos1' to track the position of each title\n SELECT Title, POSITION(Title) AS pos1\n                FROM\n                  (SELECT SPLIT(Titles) AS Title\n                   FROM\n                     (SELECT 'Title 1,Title 2,Title 3,Title 4' AS Titles, 'Name 1,Name 2,Name 3,Name 4' AS NAMES))), pos1) AS titles\nJOIN FLATTEN(\n               (# Use FLATTEN() to split the 'Names' column into rows, creating a new column 'pos2' to track the position of each name\n SELECT Name, POSITION(Name) AS pos2\n                FROM\n                  (SELECT SPLIT(NAMES) AS Name\n                   FROM\n                     (SELECT 'Title 1,Title 2,Title 3,Title 4' AS Titles, 'Name 1,Name 2,Name 3,Name 4' AS NAMES))), pos2) AS NAMES ON pos1 = pos2;"
        },
        {
            "description": "How to retrieve the dates within the past 30 days from the tables specified in the wildcard selector.?",
            "sql": "SELECT date\nFROM `dataset.table_*`\nWHERE _TABLE_SUFFIX BETWEEN FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) AND FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 0 DAY))\nGROUP BY date\nORDER BY DATE;"
        },
        {
            "description": "How to retrieve any one unique URL for each combination of department and person?",
            "sql": "SELECT dept,\n       person,\n       ANY_VALUE(url)\nFROM cs.dept_person_url\nGROUP BY dept,\n         person;"
        },
        {
            "description": "How to retrieve the minimum and maximum creation timestamps for records created in the last week.?",
            "sql": "SELECT MIN(createdAt),\n       MAX(createdAt)\nFROM `dataworks-356fa.FirebaseArchive.testf`\nWHERE EXTRACT(WEEK\n              FROM createdAt) = EXTRACT(WEEK\n                                        FROM CURRENT_TIMESTAMP()) - 1;"
        },
        {
            "description": "How to retrieve all the values from a JSON value in a table.?",
            "sql": "SELECT * EXCEPT(value),\n         value\nFROM `Db.table1`\nCROSS JOIN UNNEST(record.atr) AS atr\nCROSS JOIN UNNEST(atr.value) AS value;"
        },
        {
            "description": "How to retrieve all columns in `table1` with the exception of `value`, before joining with the `record.atr` array, then with the `atr.value` array.?",
            "sql": "SELECT * EXCEPT(value),\n         value\nFROM `Db.table1`\nLEFT JOIN UNNEST(record.atr) AS atr\nLEFT JOIN UNNEST(atr.value) AS value;"
        },
        {
            "description": "How to retrieve the order ID, date, and most recent exchange rate for each order in the 'transactions' table, filtered by currency ID 1.?",
            "sql": "SELECT t.orderid AS orderid,\n       t.date AS date,\n       ARRAY_AGG(r.rate\n                 ORDER BY r.date\n                 LIMIT 1)[SAFE_OFFSET(0)] AS rate\nFROM `sources.transactions` AS t\nJOIN `sources.currency_rates` AS r ON currencyid = 1\nAND r.date >= t.date\nGROUP BY orderid, date;"
        },
        {
            "description": "How to retrieve the PHash distance between the image with row ID '2333USX' and the image encoded in the provided base64-encoded string.?",
            "sql": "SELECT f_PHASH_distance(phash, FROM_BASE64(\"9Slp3g9OgVI=\"))\nFROM `pro.ims.images` \nWHERE row_id = \"2333USX\";"
        },
        {
            "description": "How to retrieve a maximum transactionID value for each product (productsku) for a fullvisitorid and visited?",
            "sql": "SELECT fullvisitorid,\n       visitid,\n       ARRAY\n  (SELECT STRUCT(prods.productsku AS sku, MAX(IF(hits.ecommerceaction.action_type = '6', hits.transaction.transactionID, NULL)) AS transactionID)\n   FROM UNNEST(hits) hits, UNNEST(hits.product) prods\n   WHERE hits.ecommerceaction.action_type IN ('2', '6')\n   GROUP BY prods.productsku) RESULT\nFROM `test-bigquery.12345678.ga_sessions_*`\nWHERE TRUE\n  AND _TABLE_SUFFIX = '20170709'\n  AND EXISTS\n    (SELECT 1\n     FROM UNNEST(hits) hits\n     WHERE hits.ecommerceaction.action_type IN ('2', '6'))\nLIMIT 1000;"
        },
        {
            "description": "How to retrieve games for specific users?",
            "sql": "SELECT *\nFROM `project.crozzles.games`\nWHERE user_id IN UNNEST(['user1', 'user2', 'user3']);"
        },
        {
            "description": "How to retrieve all games played by a list of users?",
            "sql": "SELECT *\nFROM `project.crozzles.games`\nWHERE user_id IN UNNEST(%s);"
        },
        {
            "description": "How to retrieve data about specific users from the games table?",
            "sql": "SELECT *\nFROM `project.crozzles.games` \nWHERE user_id IN UNNEST(['5451709866311680', '4660301072957440', '6370791394377728', '5121933955825664', '4778500988862464', '5841867648270336', '4751430816628736', '4869137213947904', '5152642703556608', '6531810976595968', '4824167228637184', '6058117842337792', '5969360933879808', '4764494160986112', '5443041280131072', '4846257587617792', '5409371420884992', '6197117949313024', '6643644022915072', '5060273861820416']);"
        },
        {
            "description": "How to retrieve the date 5 days after December 25, 2008.?",
            "sql": "SELECT DATE_ADD(DATE \"2008-12-25\", INTERVAL 5 DAY) AS five_days_later;"
        },
        {
            "description": "How many records are in the MyTable for each of the month between 2017-01-01 and 2017-03-01?",
            "sql": "SELECT COUNT(*)\nFROM MyTable\nWHERE activityTime < date '2017-01-01'\nUNION ALL\nSELECT COUNT(*)\nFROM MyTable\nWHERE activityTime < date '2017-02-01'\nUNION ALL\nSELECT COUNT(*)\nFROM MyTable\nWHERE activityTime < date '2017-03-01';"
        },
        {
            "description": "How to retrieve the last transaction details for each user account.?",
            "sql": "SELECT user_id,\n       account_id,\n       transaction_date AS last_tx_date,\n       transaction_id\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER(PARTITION BY user_id, account_id\n                            ORDER BY transaction_date DESC) = 1 AS last_transaction\n   FROM `info.all_transactions`)\nWHERE last_transaction;"
        },
        {
            "description": "How to retrieve data from a table whose suffix matches the latest date in a list of tables sharing a common prefix?",
            "sql": "SELECT *\nFROM `yourProject.yourDataset.fact_*`\nWHERE _TABLE_SUFFIX IN\n    (SELECT FORMAT_DATE('%m%d%Y', MAX(PARSE_DATE('%m%d%Y', SUBSTR(table_id, -8)))) AS d\n     FROM `yourProject.yourDataset.__TABLES_SUMMARY__`\n     WHERE SUBSTR(table_id, 1, LENGTH('fact_')) = 'fact_'\n       AND LENGTH(table_id) = LENGTH('fact_') + 8\n     GROUP BY SUBSTR(table_id, 1, LENGTH(table_id) - 8));"
        },
        {
            "description": "How to update rows in a table where a field equals a certain value?",
            "sql": "UPDATE `my_project.dataset.table` \nSET field_1 = '3'\nWHERE field_2 = '1';"
        },
        {
            "description": "How to set a field to lowercase for all rows in a table?",
            "sql": "UPDATE `my_project.dataset.table` \nSET field = LOWER(field)\nWHERE TRUE;"
        },
        {
            "description": "How to retrieve the full name of the person responsible for the task.?",
            "sql": "SELECT CONCAT(FirstName, ' ', LastName) AS FullName\nFROM Employees\nWHERE EmployeeID = 10;"
        },
        {
            "description": "How to delete the records where the revenue column matches the maximum revenue value of all records?",
            "sql": "DELETE\nFROM `project.dataset.table`\nWHERE revenue =\n    (SELECT revenue\n     FROM `project.dataset.table`\n     ORDER BY taxi_trips DESC\n     LIMIT 1);"
        },
        {
            "description": "How to retrieve all rows except for those with a specific ID.?",
            "sql": "DELETE\nFROM `project.dataset.table`\nWHERE id = \"All\";"
        },
        {
            "description": "How to retrieve the top 10 table partition suffixes with the highest number of null values for columns c1, c2, c3, and c4 in the last 30 days.?",
            "sql": "SELECT _TABLE_SUFFIX AS suffix,\n       COUNT(*) AS null_count\nFROM `DATASET.TABLE_PRODUCTION_*`\nWHERE _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) AND FORMAT_DATE('%Y%m%d', CURRENT_DATE())\n  AND c1 IS NULL\n  AND c2 IS NULL\n  AND c3 IS NULL\n  AND c4 IS NULL\nGROUP BY suffix\nHAVING null_count > 0\nORDER BY null_count DESC;"
        },
        {
            "description": "How to retrieve funnel hit information for users with a single visit during the specified date range and with a specific page path or custom dimension value.?",
            "sql": "SELECT fullvisitorid,\n       visitid,\n\n  (SELECT MIN(hitNumber)\n   FROM UNNEST(hits)\n   WHERE REGEXP_CONTAINS(page.pagePath, r'pageId')) AS firstFunnelHit,\n\n  (SELECT MAX(IF(isExit, 1, 0))\n   FROM UNNEST(hits)\n   WHERE REGEXP_CONTAINS(page.pagePath, r'pageId')) AS firstExitFunnelFlag,\n\n  (SELECT MIN(hitNumber)\n   FROM UNNEST(hits)\n   WHERE (REGEXP_CONTAINS(page.pagePath, r'pageId'))\n     OR (\n           (SELECT count(1)\n            FROM unnest(hits) h,\n                 unnest(h.customDimensions) custd\n            WHERE custd.index = 20) > 0)) secondFunnelHit,\n\n  (SELECT MAX(IF(isExit, 1, 0))\n   FROM UNNEST(hits)\n   WHERE REGEXP_CONTAINS(page.pagePath, r'pageId')\n     OR (\n           (SELECT count(1)\n            FROM unnest(hits) h,\n                 unnest(h.customDimensions) custd\n            WHERE custd.index = 20) > 0)) AS secondFunnelExitFlag\nFROM `dataset.ga_sessions_2017*`\nWHERE 1 = 1\n  AND _TABLE_SUFFIX BETWEEN '0601' AND '0602'\n  AND totals.visits = 1;"
        },
        {
            "description": "How to retrieve data from 'jobs' table using a schema?",
            "sql": "SELECT *\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE user_id BETWEEN 10000 AND 30000 SCHEMA (table_schema);"
        },
        {
            "description": "How to append a specific field with a subquery to each element of an ARRAY column?",
            "sql": "UPDATE `you_dataset.tablename`\nSET hits = ARRAY\n  (SELECT AS STRUCT * REPLACE (\n                                 (SELECT AS STRUCT page.* REPLACE ('foo' AS pagePath)) AS page)\n   FROM UNNEST(hits) AS pagePath)\nWHERE fullVisitorID like \"%1%\";"
        },
        {
            "description": "How to retrieve the number of hits for each date, grouped by page path that contains the given strings.?",
            "sql": "WITH DATA AS\n  (SELECT \"20170701\" AS date, ARRAY<STRUCT<page STRUCT<pagePath STRING> >> [STRUCT(STRUCT('?aff=' as pagePath) as page), STRUCT(STRUCT('?aff=' as pagePath) as page), STRUCT(STRUCT('/test' as pagePath) as page), STRUCT(STRUCT('?aff2=' as pagePath) as page), STRUCT(STRUCT('?aff=' as pagePath) as page)] hits\n   UNION ALL SELECT \"20170701\" AS date, ARRAY<STRUCT<page STRUCT<pagePath STRING> >> [STRUCT(STRUCT('?aff2=' as pagePath) as page), STRUCT(STRUCT('?aff2=' as pagePath) as page), STRUCT(STRUCT('?aff3=' as pagePath) as page), STRUCT(STRUCT('?aff3=' as pagePath) as page), STRUCT(STRUCT('?aff=' as pagePath) as page)] hits)\nSELECT date, sum(\n                   (SELECT countif(hits.page.pagepath like \"?aff=\")\n                    FROM unnest(hits) hits)) Affinity,\n             sum(\n                   (SELECT countif(hits.page.pagepath like \"?aff2=\")\n                    FROM unnest(hits) hits)) Addon_Affinity,\n             sum(\n                   (SELECT countif(hits.page.pagepath like \"?aff3=\")\n                    FROM unnest(hits) hits)) Style_Affinity\nFROM DATA\nGROUP BY date;"
        },
        {
            "description": "How to retrieve the first and last hit numbers for pages matching a specific pattern and the exit flag for these pages for visitors who have visited only once and who have a value set for the 20th custom dimension.?",
            "sql": "SELECT fullvisitorid,\n       visitid,\n\n  (SELECT min(hitNumber)\n   FROM unnest(hits)\n   WHERE regexp_contains(page.pagePath, r'^/plus/.*/[0-9]')) firstHit,\n\n  (SELECT max(isExit)\n   FROM UNNEST(hits)\n   WHERE regexp_contains(page.pagePath, r'^/plus/.*/[0-9]')) exitFlag\nFROM `table`\nWHERE 1 = 1\n  AND EXISTS\n    (SELECT 1\n     FROM unnest(hits)\n     WHERE regexp_contains(page.pagePath, r'^/plus/.*/[0-9]'))\n  AND EXISTS\n    (SELECT 1\n     FROM unnest(hits) hits\n     WHERE\n         (SELECT count(value)\n          FROM unnest(hits.customDimensions) custd\n          WHERE INDEX=20) > 0)\n  AND totals.visits = 1;"
        },
        {
            "description": "How to retrieve the full visitor ID and visit ID for a single session from the 'ga_sessions_20170703' table.?",
            "sql": "SELECT fullvisitorid,\n       visitid\nFROM `dataset.ga_sessions_20170703`\nLIMIT 1;"
        },
        {
            "description": "How to delete a row?",
            "sql": "DELETE\nFROM `new_table`\nWHERE fullvisitorid = '1';"
        },
        {
            "description": "How to retrieve the serial number, latest use date, total hours of use, and number of devices connected for each device, along with the status and model number of each device.?",
            "sql": "SELECT *\nFROM\n  (SELECT CAST(Serial AS integer) AS Serial,\n          Latest_Use,\n          Total_Hours,\n          Devices_Connected\n   FROM [dataworks-356fa:FirebaseArchive.PT_Results]) AS Model_Results\nJOIN\n  (SELECT CAST(Serial_Number AS integer) AS Serial_Number,\n          Status,\n          Model_Number\n   FROM [dataworks-356fa:FirebaseArchive.Master_List_PT]) AS Master_List ON Model_Results.Serial = REGEXP_EXTRACT(Master_List.Serial_Number, r'\\d+');"
        },
        {
            "description": "How to retrieve the top 5 characters of the serial number, recent usage, total hours of use, and total devices connected of PT devices, along with their status and model number from the FirebaseArchive dataset.?",
            "sql": "SELECT *\nFROM\n  (SELECT SUBSTR(CAST(CAST(Serial AS INT) AS STRING), 1, 5) AS Serial,\n          Latest_Use,\n          Total_Hours,\n          Devices_Connected\n   FROM [dataworks-356fa:FirebaseArchive.PT_Results]) AS Model_Results\nJOIN\n  (SELECT SUBSTR(CAST(CAST(Serial_Number AS INT) AS STRING), 1, 5) AS Serial_Number,\n          Status,\n          Model_Number\n   FROM [dataworks-356fa:FirebaseArchive.Master_List_PT]) AS Master_List ON Model_Results.Serial = Master_List.Serial_Number;"
        },
        {
            "description": "How to retrieve name, flat number, address and amount from the 'YourTable' table?",
            "sql": "SELECT Name,\n       CAST(FlatNumber AS STRING) AS FlatNumber,\n       Address,\n       CAST(Amount AS FLOAT64) AS Amount\nFROM YourTable;"
        },
        {
            "description": "How to force the FlatNumber and Amount fields to be read as strings and floats, respectively?",
            "sql": "SELECT * EXCEPT(FlatNumber, Amount),\n         CAST(FlatNumber AS STRING) AS FlatNumber,\n         CAST(Amount AS FLOAT64) AS Amount\nFROM YourTable;"
        },
        {
            "description": "How to retrieve the most clicked size for users who visited product pages containing the word 'shorts' or 't-shirt'?",
            "sql": "WITH DATA AS\n  (SELECT ARRAY<STRUCT<INDEX INT64,\n                             value STRING>> [STRUCT(NULL as index, '' as value), STRUCT(0 as index, 'test' as value), STRUCT(2 as index, 'user_1' as value)] customDimensions, ARRAY<STRUCT<page STRUCT<pagePath STRING>, eventinfo STRUCT<eventcategory STRING, eventaction STRING> >> [STRUCT(STRUCT('/home' as pagePath) as page, STRUCT(\"cat1\" as eventcategory, \"act1\" as eventaction) as eventinfo), STRUCT(STRUCT('/abcshortsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"S\" as eventaction) as eventinfo), STRUCT(STRUCT('/abcshortsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"S\" as eventaction) as eventinfo), STRUCT(STRUCT('/abcshortsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"M\" as eventaction) as eventinfo), STRUCT(STRUCT('/abc/t-shirtsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"L\" as eventaction) as eventinfo)] hits\n   UNION ALL SELECT ARRAY<STRUCT<INDEX INT64,\n                                       value STRING>> [STRUCT(2 as index, 'user_2' as value)] customDimensions, ARRAY<STRUCT<page STRUCT<pagePath STRING>, eventinfo STRUCT<eventcategory STRING, eventaction STRING> >> [STRUCT(STRUCT('shorts' as pagePath) as page, STRUCT(\"cat1\" as eventcategory, \"act1\" as eventaction) as eventinfo), STRUCT(STRUCT('/abcshortsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"M\" as eventaction) as eventinfo), STRUCT(STRUCT('/abcshortsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"M\" as eventaction) as eventinfo), STRUCT(STRUCT('/abcshortsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"M\" as eventaction) as eventinfo), STRUCT(STRUCT('/abc/t-shirtsabc' as pagePath) as page, STRUCT(\"SIZE Filter Click\" as eventcategory, \"L\" as eventaction) as eventinfo)] hits)\nSELECT\n  (SELECT value\n   FROM UNNEST(customDimensions)\n   WHERE INDEX = 2\n   GROUP BY value) UserID,\n\n  (SELECT eventinfo.eventaction SIZE\n   FROM UNNEST(hits)\n   WHERE (REGEXP_CONTAINS(page.pagepath, r'shorts')\n          OR REGEXP_CONTAINS(page.pagepath, r'/t-shirts'))\n     AND eventinfo.eventcategory = 'SIZE Filter Click'\n   GROUP BY eventinfo.eventaction\n   ORDER BY COUNT(eventinfo.eventaction) DESC\n   LIMIT 1) most_clicked_size\nFROM DATA;"
        },
        {
            "description": "How to retrieve the most frequently clicked size of a product for a given user ID.?",
            "sql": "SELECT\n  (SELECT value\n   FROM UNNEST(customDimensions)\n   WHERE INDEX = 2\n   GROUP BY value) UserID,\n\n  (SELECT AS STRUCT eventinfo.eventaction SIZE,\n                                          count(1) freq\n   FROM UNNEST(hits)\n   WHERE (REGEXP_CONTAINS(page.pagepath, r'shorts')\n          OR REGEXP_CONTAINS(page.pagepath, r'/t-shirts'))\n     AND eventinfo.eventcategory = 'SIZE Filter Click'\n   GROUP BY eventinfo.eventaction\n   ORDER BY COUNT(eventinfo.eventaction) DESC\n   LIMIT 1) most_clicked_size\nFROM DATA;"
        },
        {
            "description": "How to load newline delimited JSON data from a file into a BigQuery table using the Python API?",
            "sql": "CREATE OR REPLACE TABLE mydataset.mytable OPTIONS (format = 'NEWLINE_DELIMITED_JSON') AS\nSELECT *\nFROM INFORMATION_SCHEMA.NEWLINE_DELIMITED_JSON('gs://cloud-samples-data/bigquery/sample-transactions/transactions.json');"
        },
        {
            "description": "How to retrieve the amount of time someone spent on a project converted from the base-64 encoded string back to hour, minute, and second string representations.?",
            "sql": "SELECT t.user_id,\n       t.project_id,\n       t.spent_time,\n       TO_JSON_STRING(CONCAT('Duration: ', 'Hours: ', (ROUND((CAST(SUBSTR(TO_BASE64(t.spent_time), 1, 7) AS bignumeric)/POW(2, 44) - (CAST(SUBSTR(TO_BASE64(t.spent_time), 7, 34) AS bignumeric)/POW(2, 32))), 2)), ' Minutes: ', (ROUND((CAST(SUBSTR(TO_BASE64(t.spent_time), 1, 7) AS bignumeric)/POW(2, 44) - (CAST(SUBSTR(TO_BASE64(t.spent_time), 7, 34) AS bignumeric)/POW(2, 32))) * 60, 2)) % 60), ' Seconds: ', (ROUND((((CAST(SUBSTR(TO_BASE64(t.spent_time), 1, 7) AS bignumeric)/POW(2, 44) - (CAST(SUBSTR(TO_BASE64(t.spent_time), 7, 34) AS bignumeric)/POW(2, 32))) * 60) * 60, 2))) % 60)) AS estimated_duration\nFROM `my_dataset.table_name` t;"
        },
        {
            "description": "How to retrieve the result of decoding base64 bytes to a string, using a custom function.?",
            "sql": "CREATE TEMP FUNCTION Foo(b BYTES) RETURNS STRING LANGUAGE js AS \"\"\" var result = atob(b); // ... process result of atob. return result; \"\"\" OPTIONS (library='gs://my-bucket/btoa_atob.js');\n\n\nSELECT Foo(b'\\xa0b1\\xff\\xee');"
        },
        {
            "description": "How to retrieve the first and second parts of the string in the ColA column using the split operator?",
            "sql": "SELECT ColA,\n       SPLIT(ColA, '|')[SAFE_OFFSET(0)] AS part1,\n       SPLIT(ColA, '|')[SAFE_OFFSET(1)] AS part2\nFROM TabA;"
        },
        {
            "description": "How to retrieve all rows from the Model_Results table joined with the Master_List table on the Serial_Number column?",
            "sql": "SELECT *\nFROM [dataworks-356fa:FirebaseArchive.Model_Results]\nJOIN [dataworks-356fa:FirebaseArchive.Master_List] ON Serial_Number=Serial;"
        },
        {
            "description": "How to retrieve all data from 'Model_Results' and 'Master_List' tables in 'FirebaseArchive' dataset, optionally filtering by 'Serial_Number'.?",
            "sql": "SELECT *\nFROM `dataworks-356fa.FirebaseArchive.Model_Results`\nJOIN `dataworks-356fa.FirebaseArchive.Master_List` ON Serial_Number=Serial;"
        },
        {
            "description": "How to retrieve the latest timestamp, total connection time and set of distinct models for all BlueBox-pH devices?",
            "sql": "SELECT Serial, MAX(createdAt) AS Latest,\n               SUM(ConnectionTime) AS Total,\n               COUNT(DISTINCT Model) AS Devices\nFROM `dataworks-356fa.FirebaseArchive.testf`\nWHERE Model = \"BlueBox-pH\"\nGROUP BY Serial\nORDER BY Serial\nLIMIT 1000;"
        },
        {
            "description": "How to retrieve a specific nested table?",
            "sql": "SELECT DATA\nFROM DATA,\n     UNNEST(SOURCE) AS s\nWHERE (s.schema,\n       s.table) = ('log',\n                   'customer');"
        },
        {
            "description": "How to retrieve rows from a table where a source table with a specified schema and table name exists?",
            "sql": "SELECT *\nFROM DATA\nWHERE EXISTS\n    (SELECT 1\n     FROM UNNEST(SOURCE) AS s\n     WHERE (s.schema,\n            s.table) = ('log',\n                        'customer'));"
        },
        {
            "description": "How to retrieve the 10th, 25th, 50th, 75th, and 90th percentiles of the first meaningful paint metric for Android pages visited on June 1, 2017.?",
            "sql": "SELECT quantiles[OFFSET(100)] AS p10,\n       quantiles[OFFSET(250)] AS p25,\n       quantiles[OFFSET(500)] AS p50,\n       quantiles[OFFSET(750)] AS p75,\n       quantiles[OFFSET(900)] AS p90\nFROM\n  (SELECT APPROX_QUANTILES(CAST(JSON_EXTRACT_SCALAR(lighthouse, '$.audits.first-meaningful-paint.rawValue') AS FLOAT64), 1000) AS quantiles\n   FROM `httparchive.har.2017_06_01_android_pages`\n   WHERE lighthouse != 'null');"
        },
        {
            "description": "How to retrieve the field 'b' from all tables starting with 'X' in the dataset 'dataset' and project 'project', or assign it the 'default_value' if 'b' is null.?",
            "sql": "SELECT a,\n       IFNULL(b, default_value) AS b\nFROM `project.dataset.X_*`;"
        },
        {
            "description": "How to retrieve the 'a' column and replace any 'b' arrays of length 0 with a default value.?",
            "sql": "SELECT a,\n       CASE\n           WHEN ARRAY_LENGTH(b)=0 THEN [default_value]\n           ELSE b\n       END AS b\nFROM `project.dataset.X_*`;"
        },
        {
            "description": "How to retrieve the latest creation timestamp and aggregate connection metrics for each BlueBox-pH device, limited to the top 1000 devices with highest Serial values.?",
            "sql": "SELECT Serial, MAX(createdAt) AS Latest,\n               SUM(ConnectionTime) AS Total,\n               COUNT(DISTINCT Model) AS Devices\nFROM `dataworks-356fa.FirebaseArchive.testf`\nWHERE Model = \"BlueBox-pH\"\nGROUP BY Serial\nORDER BY Serial\nLIMIT 1000;"
        },
        {
            "description": "How to retrieve data where the nested schema and table of the source are 'log' and 'customer', respectively.?",
            "sql": "SELECT DATA\nFROM DATA,\n     UNNEST(SOURCE) AS s\nWHERE (s.schema,\n       s.table) = ('log',\n                   'customer');"
        },
        {
            "description": "How to retrieve all rows in the 'data' table if the 'source' field includes the 'log.customer' object?",
            "sql": "SELECT *\nFROM DATA\nWHERE EXISTS\n    (SELECT 1\n     FROM UNNEST(SOURCE) AS s\n     WHERE (s.schema,\n            s.table) = ('log',\n                        'customer'));"
        },
        {
            "description": "How to retrieve the 10th, 25th, 50th, 75th, and 90th percentiles of first meaningful paint time across all pages on android devices.?",
            "sql": "SELECT quantiles[OFFSET(100)] AS p10,\n       quantiles[OFFSET(250)] AS p25,\n       quantiles[OFFSET(500)] AS p50,\n       quantiles[OFFSET(750)] AS p75,\n       quantiles[OFFSET(900)] AS p90\nFROM\n  (SELECT APPROX_QUANTILES(CAST(JSON_EXTRACT_SCALAR(lighthouse, '$.audits.first-meaningful-paint.rawValue') AS FLOAT64), 1000) AS quantiles\n   FROM `httparchive.har.2017_06_01_android_pages`\n   WHERE lighthouse != 'null');"
        },
        {
            "description": "How to replace NULL values in column 'b' with a default value?",
            "sql": "SELECT a,\n       IFNULL(b, default_value) AS b\nFROM `project.dataset.X_*`;"
        },
        {
            "description": "How to how to retrieve the latest attribute value for each ID and date pair from two tables.?",
            "sql": "SELECT t1.id,\n       t1.date,\n       COALESCE(t2.attribute, t1.attribute) AS attribute\nFROM T1\nLEFT JOIN T2 ON t1.id = t2.id\nAND t1.date >= t2.date\nAND t1.date <= t2.date_end;"
        },
        {
            "description": "How to retrieve daily data from a table partitioned by date, including the partitioning date?",
            "sql": "SELECT *,\n       EXTRACT(DATE\n               FROM _PARTITIONTIME) AS date\nFROM Date partitioned TABLE;"
        },
        {
            "description": "How to extract all occurrences of a regular expression pattern, which matches letter sequences followed by number sequences, from a string?",
            "sql": "SELECT col,\n       REGEXP_EXTRACT_ALL(s, '([A-Z]+ [0-9]+)') arr\nFROM\n  (SELECT 'col' col,\n                'UK 8 US 9 EU 42' s);"
        },
        {
            "description": "How to retrieve rows by grouped column with nested data?",
            "sql": "SELECT Var1,\n       NEST(Var2) AS Var2\nFROM\n  (SELECT 'x' AS Var1,\n          1 AS Var2),\n  (SELECT 'x' AS Var1,\n          2 AS Var2),\n  (SELECT 'x' AS Var1,\n          3 AS Var2),\n  (SELECT 'y' AS Var1,\n          1 AS Var2)\nGROUP BY Var1;"
        },
        {
            "description": "How to count the number of unique values for a column within a subquery that groups rows by another column?",
            "sql": "SELECT COUNT(1)\nFROM\n  (SELECT Var1,\n          NEST(Var2) AS Var2\n   FROM\n     (SELECT 'x' AS Var1,\n             1 AS Var2),\n     (SELECT 'x' AS Var1,\n             2 AS Var2),\n     (SELECT 'x' AS Var1,\n             3 AS Var2),\n     (SELECT 'y' AS Var1,\n             1 AS Var2)\n   GROUP BY Var1);"
        },
        {
            "description": "How to retrieve the values from the array Var2 using SELECT and UNION ALL?",
            "sql": "SELECT 'x' AS Var1,\n       [1,2,3] AS Var2\nUNION ALL\nSELECT 'y',\n       [1];"
        },
        {
            "description": "How to retrieve the start of the current week?",
            "sql": "SELECT DATE_SUB(CURRENT_DATE(), INTERVAL EXTRACT(DAYOFWEEK\n                                                 FROM CURRENT_DATE()) - 1 DAY);"
        },
        {
            "description": "How do I find all the backend customer IDs and EANs in TableA that don't exist in ViewB?",
            "sql": "SELECT t.backend_customer_id,\n       t.ean\nFROM TableA t\nLEFT JOIN ViewB v ON (t.backend_customer_id,\n                      t.ean) = (v.backend_customer_id,\n                                v.ean)\nWHERE v.ean IS NULL;"
        },
        {
            "description": "How to retrieve the hostname associated with a given date and revenue?",
            "sql": "SELECT date, channelGrouping,\n             SUM(Revenue) Revenue,\n             SUM(Shipping) Shipping,\n             SUM(bounces) bounces,\n             SUM(transactions) transactions,\n             hostname,\n             COUNT(date) sessions\nFROM\n  (SELECT date, channelGrouping,\n                totals.totaltransactionrevenue / 1e6 Revenue,\n                ARRAY(\n                        (SELECT DISTINCT page.hostname\n                         FROM UNNEST(hits) hits\n                         WHERE page.hostname IS NOT NULL)) hostnames,\n\n     (SELECT SUM(hits.transaction.transactionshipping) / 1e6\n      FROM UNNEST(hits) hits) Shipping,\n                totals.bounces bounces,\n                totals.transactions transactions\n   FROM `project_id.dataset_id.ga_sessions_*`\n   WHERE 1 = 1\n     AND ARRAY_LENGTH(ARRAY(\n                              (SELECT DISTINCT page.hostname\n                               FROM UNNEST(hits) hits\n                               WHERE page.hostname IS NOT NULL))) > 0\n     AND _TABLE_SUFFIX BETWEEN '20170601' AND '20170609'\n   UNION ALL (...)), UNNEST(hostnames) hostname\nGROUP BY date, channelGrouping,\n               hostname;"
        },
        {
            "description": "How to retrieve the complete details of a particular full visitor ID and visit ID for a given date?",
            "sql": "SELECT fullvisitorid,\n       visitid, date, channelGrouping,\n                      hits,\n                      totals\nFROM TABLE_DATE_RANGE([project:dataset.ga_sessions_*\nWHERE\n_TABLE_SUFFIX BETWEEN '20170601' AND '20170601'], TIMESTAMP('2017-06-01'), TIMESTAMP('2017-06-01'))\nWHERE fullvisitorid = 1\n  AND visitid = 1;"
        },
        {
            "description": "How to retrieve the full visitor ID, visit ID, date, channel grouping, and details about each hit, including page hostname and transaction revenue.?",
            "sql": "SELECT fullVisitorId,\n       visitid, date, channelGrouping,\n                      hits\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170601' AND '20170701';"
        },
        {
            "description": "How to retrieve the revenue and its associated hit number for each visit?",
            "sql": "SELECT fullvisitorid,\n       visitID,\n       totals.totalTransactionRevenue,\n       hits.hitNumber\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE totalTransactionRevenue > 0\nORDER BY fullvisitorid,\n         visitID,\n         hitNumber;"
        },
        {
            "description": "How to get the day of each repository's creation date from the `bigquery-public-data.samples.github_nested` dataset in BigQuery?",
            "sql": "SELECT repository.created_at AS fechas,\n       EXTRACT(DAY\n               FROM PARSE_TIMESTAMP('%Y/%m/%d %X %z', repository.created_at))\nFROM `bigquery-public-data.samples.github_nested`\nLIMIT 100;"
        },
        {
            "description": "How to retrieve the total connection time for the BlueBox-pH model, grouped by model and serial number?",
            "sql": "SELECT Model, Serial, SUM(ConnectionTime)\nFROM [dataworks-356fa:FirebaseArchive.test8]\nWHERE Model == \"BlueBox-pH\"\nGROUP BY Model, Serial;"
        },
        {
            "description": "How to update data in temp table temp in dataset temp of tensile-site-168620?",
            "sql": "UPDATE `tensile-site-168620.temp.temp`\nSET name1='chaitu1331'\nWHERE name1='chaitu11';"
        },
        {
            "description": "How to retrieve the number of rows for each unique secondary table in the provided dataset.?",
            "sql": "SELECT COUNT(*) AS lazy_count,\n       _TABLE_SUFFIX AS TABLE\nFROM `bigquery-public-data.noaa_gsod.*`\nGROUP BY TABLE;"
        },
        {
            "description": "How to extract the second substring from end of a string considering '-' as delimiter?",
            "sql": "CREATE TEMP FUNCTION SecondSubstringFromEnd(s STRING) AS (\n                                                            (SELECT arr[SAFE_OFFSET(ARRAY_LENGTH(arr) - 3)]\n                                                             FROM\n                                                               (SELECT SPLIT(s, '-') AS arr)));\n\nWITH INPUT AS\n  (SELECT 'Search-site-variable-brand-0-city-none-18053517' AS STR\n   UNION ALL SELECT 'a-b'\n   UNION ALL SELECT 'w-x-yyy-z')\nSELECT STR,\n       SecondSubstringFromEnd(STR) AS second_substring_from_end\nFROM INPUT;"
        },
        {
            "description": "How to retrieve data from a table in AVRO format?",
            "sql": "SELECT *\nFROM [project_id:dataset_id.table_id] FORMAT AVRO;"
        },
        {
            "description": "How to retrieve the two oldest rows for each group.?",
            "sql": "SELECT t.*\nFROM\n  (SELECT t.*,\n          row_number() OVER (PARTITION BY GROUP\n                             ORDER BY age DESC) AS seqnum\n   FROM t) t\nWHERE seqnum <= 2;"
        },
        {
            "description": "How to how to retrieve the user ID, source and wishlist for each user in the dataset?",
            "sql": "SELECT user_id,\n       SOURCE,\n       wishlist\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`;"
        },
        {
            "description": "How to retrieve all users, their wishlists, and their locations.?",
            "sql": "SELECT user_id,\n       SOURCE,\n       wishlist,\n       location.country,\n       location.city\nFROM `bigquery-public-data.utility_us.country_code_iso`\nWHERE country_name = location.country;"
        },
        {
            "description": "How to retrieve all fields from a table?",
            "sql": "SELECT *\nFROM `my_project.my_dataset.my_table`;"
        },
        {
            "description": "How to retrieve the data types of all fields in a BigQuery table?",
            "sql": "SELECT name,\n       TYPE,\n       MODE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = 'your_table_name';"
        },
        {
            "description": "How to retrieve the names of all the children of 'John Doe'?",
            "sql": "SELECT children.name\nFROM `YOUR_DATASET.YOUR_TABLE`\nWHERE kind = 'person'\n  AND fullName = 'John Doe';"
        },
        {
            "description": "How to retrieve a nested record from a table?",
            "sql": "SELECT phoneNumber.areaCode\nFROM TABLE_NAME;"
        },
        {
            "description": "How to select all cities lived in and years lived in each city?",
            "sql": "SELECT citiesLived.place,\n       UNNEST(citiesLived.yearLived) AS yearLived\nFROM UNNEST(user_data.demographics) AS citiesLived;"
        },
        {
            "description": "How to retrieve data in a nested structure, grouping by one field and aggregating values from another.?",
            "sql": "WITH DATA AS\n  (SELECT 'a' someField,\n              1 someKey\n   UNION ALL SELECT 'a',\n                    1\n   UNION ALL SELECT 'b',\n                    1\n   UNION ALL SELECT 'c',\n                    2\n   UNION ALL SELECT 'd',\n                    2)\nSELECT someKey,\n       ARRAY_AGG(STRUCT(someField, freq)) fields\nFROM\n  (SELECT someField,\n          someKey,\n          COUNT(someField) freq\n   FROM DATA\n   GROUP BY 1,\n            2)\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve the unescaped string from an escaped string.?",
            "sql": "CREATE TEMP FUNCTION UnescapeString(STR STRING) AS (\n                                                      (SELECT CAST(STRING_AGG(CODE_POINTS_TO_BYTES([CAST(CONCAT('0x', c) AS INT64)]), b'') AS STRING)\n                                                       FROM UNNEST(SPLIT(STR, '%')) AS c\n                                                       WHERE c != ''));\n\nWITH INPUT AS\n  (SELECT \"%D7%90%D7%A4%D7%A8%D7%AA\" AS STR)\nSELECT STR,\n       UnescapeString(STR) AS unescaped_str\nFROM INPUT;"
        },
        {
            "description": "How to get the lowercase English alphabet 26 times over?",
            "sql": "SELECT STRING_AGG(CODE_POINTS_TO_STRING([MOD(c, 26) + TO_CODE_POINTS('a')[OFFSET(0)]]), '')\nFROM UNNEST(GENERATE_ARRAY(0, 127)) AS c;"
        },
        {
            "description": "How to retrieve the count of characters in a string column?",
            "sql": "SELECT LENGTH(abcdef)\nFROM\n  (SELECT 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw' AS abcdef);"
        },
        {
            "description": "How to retrieve all rows from a table named 'data'?",
            "sql": "SELECT *\nFROM DATA;"
        },
        {
            "description": "How to retrieve the stock with symbol 'APPL'?",
            "sql": "WITH DATA AS\n  (SELECT 'APPL' AS symbol, STRUCT<date string, TIME string, hit ARRAY<STRUCT<resolution INT64,\n                                                                              OPEN FLOAT64,\n                                                                                   high FLOAT64,\n                                                                                   low FLOAT64,\n                                                                                   CLOSE FLOAT64>>> ('2017-06-19',\n                                                                                                     '9:30',\n                                                                                                     [STRUCT(1 as resolution, 99.12 as open, 102.52 as high, 94.22 as low, 98.32 as close), STRUCT(5 as resolution, 99.12 as open, 100.11 as high, 99.01 as low, 100.34 as close)]) stock\n   UNION ALL SELECT 'IBM' AS symbol, STRUCT<date string, TIME string, hit ARRAY<STRUCT<resolution INT64,\n                                                                                       OPEN FLOAT64,\n                                                                                            high FLOAT64,\n                                                                                            low FLOAT64,\n                                                                                            CLOSE FLOAT64>>> ('2017-06-19',\n                                                                                                              '9:30',\n                                                                                                              [STRUCT(1 as resolution, 40.15 as open, 45.78 as high, 39.18 as low, 44.22 as close)]))\nSELECT *\nFROM DATA\nWHERE symbol = 'APPL';"
        },
        {
            "description": "How to get the location title and quarter of the longitude and latitude?",
            "sql": "SELECT location_title,\n       getQuarter(lon, lat)\nFROM `table_name`;"
        },
        {
            "description": "How to retrieve all rows in table_name where the quarter is 'NE'.?",
            "sql": "SELECT getQuarter(lon, lat) AS q\nFROM `table_name`\nWHERE q = 'NE';"
        },
        {
            "description": "How to retrieve an athlete's rank for a given time range?",
            "sql": "SELECT attach(a, r) AS athlete_rank_of_runner\nFROM `bigquery-public-data.stackoverflow.athletes` AS a\nWHERE a.name = <Name>\n  AND a.dob BETWEEN DATE_FROM_TIMESTAMP(@from) AND DATE_FROM_TIMESTAMP(@to)\n  AND r.rank IS NOT NULL\nORDER BY r.rank;"
        },
        {
            "description": "How to retrieve the top 1000 highest-scoring comments from each subreddit?",
            "sql": "SELECT subreddit,\n       ARRAY_AGG(STRUCT(BODY, score)\n                 ORDER BY score DESC\n                 LIMIT 1000) DATA\nFROM `fh-bigquery.reddit_comments.2017_04`\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve the top 1000 scoring comments for each of the 10000 most active subreddits in April 2017.?",
            "sql": "SELECT subreddit,\n       ARRAY_AGG(STRUCT(BODY, score)\n                 ORDER BY score DESC\n                 LIMIT 1000) DATA\nFROM `fh-bigquery.reddit_comments.2017_04`\nWHERE subreddit IN\n    (SELECT subreddit\n     FROM\n       (SELECT subreddit\n        FROM `fh-bigquery.reddit_comments.2017_04`\n        GROUP BY subreddit\n        ORDER BY count(BODY) DESC\n        LIMIT 10000))\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve the total driving time for each vehicle from the sample data.?",
            "sql": "WITH DATA AS\n  (SELECT 29 AS VehicleId,\n          '2017-01-02T 15:57:063000' AS TripDateTime,\n          '00:00:28' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 13:23:12' AS TripDateTime,\n                    '00:00:21' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 17:23:05.063000' AS TripDateTime,\n                    '00:07:11.9370000' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 14:59:44.063000' AS TripDateTime,\n                    '00:08:19.9370000' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 15:45:44.063000' AS TripDateTime,\n                    '00:01:22.9370000' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 15:17:58.063000' AS TripDateTime,\n                    '00:03:29.9370000' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 18:52:15' AS TripDateTime,\n                    '00:01:26' AS TripDrivingDuration\n   UNION ALL SELECT 29 AS VehicleId,\n                    '2017-01-02T 17:05:24.063000' AS TripDateTime,\n                    '00:13:09.9370000' AS TripDrivingDuration)\nSELECT VehicleId,\n       SUM(UNIX_SECONDS(PARSE_TIMESTAMP('%H:%M:%S', REGEXP_EXTRACT(TripDrivingDuration, r'(.*)\\.\\d+')))) elapsed_time\nFROM DATA\nGROUP BY VehicleId;"
        },
        {
            "description": "How to extract groups from a string that has been formatted as a path?",
            "sql": "SELECT REGEXP_EXTRACT_ALL(GROUP_NAMES, r'-> ([^ ]+)')\nFROM\n  (SELECT 'Start -> vendor-i (06/06/2017 09:07:18 PM) -> vendor-p (06/08/2017 04:44:47 PM) -> vendor-p (06/12/2017 11:32:33 AM) -> vendor-p (06/13/2017 04:49:47 PM)' AS GROUP_NAMES);"
        },
        {
            "description": "How to retrieve the list of recent jobs you've created ordered by start time?",
            "sql": "SELECT job_id,\n       job_type,\n       state,\n       start_time,\n       duration\nFROM bq.INFORMATION_SCHEMA.JOBS\nORDER BY job_id DESC;"
        },
        {
            "description": "How to retrieve all enabled datasets.?",
            "sql": "SELECT dataset_id\nFROM [bigquery-public-data:bigquery_usage_datasets.datasets]\nWHERE active = TRUE;"
        },
        {
            "description": "How to retrieve a list of 'id' values by supplying an array of IDs as a query parameter.?",
            "sql": "SELECT id\nFROM `my-db`\nWHERE id IN UNNEST(@ids);"
        },
        {
            "description": "How to validate BigQuery sink records before writing them?",
            "sql": "INSERT records INTO a TABLE\nAND run a\nVALIDATOR FUNCTION IN a DoFn ON the records.;"
        },
        {
            "description": "How to retrieve rows from the tables 'sales_20170530', 'sales_20170531', and 'sales_20170601' in the 'past_sales' dataset and 'my-project' project.?",
            "sql": "SELECT *\nFROM `my-project.past_sales.sales_20170530`\nUNION ALL\nSELECT *\nFROM `my-project.past_sales.sales_20170531`\nUNION ALL\nSELECT *\nFROM `my-project.past_sales.sales_20170601`;"
        },
        {
            "description": "How to select sales made either on or between May 30 and June 1 of 2017, excluding May 31, using subqueries and unions?",
            "sql": "SELECT sale_item,\n       date_of_sale\nFROM\n  (SELECT *\n   FROM `my-project.past_sales.sales_*`\n   WHERE _TABLE_SUFFIX BETWEEN \"20170530\" AND \"20170601\"\n     AND _TABLE_SUFFIX != 20170531)\nUNION ALL\nSELECT * REPLACE(CAST(date_of_sale AS DATE) AS date_of_sale)\nFROM `my-project.past_sales.sales_20170531`\nLIMIT 100;"
        },
        {
            "description": "How to retrieve 1,000 visitor sessions that each include a single row containing the page path, the visitor ID, the visit number, and the web browser used?",
            "sql": "SELECT visitorId,\n       visitNumber,\n       device.browser,\n       hits.page.pagePath\nFROM `Project.Page`,\n     UNNEST(hits) hits\nLIMIT 1000;"
        },
        {
            "description": "How to retrieve the top 1,000 visitor paths that contain '/news/bla-bla-bla' in the page path?",
            "sql": "SELECT visitorId,\n       visitNumber,\n       device.browser,\n       hits.page.pagePath\nFROM `Project.Page`,\n     UNNEST(hits) hits\nWHERE regexp_contains(hits.page.pagePath, r'/news/bla-bla-bla')\nLIMIT 1000;"
        },
        {
            "description": "How to select a specific row by ID from the table with 'auctions_others_' in its name and IDs between '20170322' and '20170324' in the chocolate_raw dataset?",
            "sql": "SELECT *\nFROM TABLE_QUERY(chocolate_raw, \"table_id CONTAINS 'auctions_others_' \n  AND SUBSTR(table_id, 1 + LENGTH('auctions_others_'), 8) \n  BETWEEN '20170322' AND '20170324'\")\nWHERE id='f3667fd6-8329-4124-a4a2-737e637a5e7d';"
        },
        {
            "description": "How to retrieve specific records from the 'chocolate_raw.auctions_others' table for a given date range and ID?",
            "sql": "SELECT *\nFROM `chocolate_raw.auctions_others_*`\nWHERE SUBSTR(_TABLE_SUFFIX, 1, 8) BETWEEN '20170322' AND '20170324'\n  AND id='f3667fd6-8329-4124-a4a2-737e637a5e7d';"
        },
        {
            "description": "How to retrieve all the fields in a table and their respective types and modes.?",
            "sql": "SELECT name,\n       type_,\n       mode_\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE table_schema = @dataset_id\n  AND TABLE_NAME = @table_id;"
        },
        {
            "description": "How many events occurred each month from April 2016 through May 2017?",
            "sql": "SELECT YearMonth,\n       COUNT(DISTINCT combinedVisitorId) AS EventCount\nFROM\n  (SELECT SUBSTR(_TABLE_SUFFIX, 1, 6) AS YearMonth,\n          CONCAT(fullVisitorId, \"-\", STRING(visitId), \"-\", STRING(hits.hitNumber)) AS combinedVisitorId\n   FROM `XXX.79296192.ga_sessions_*`\n   WHERE _TABLE_SUFFIX BETWEEN \"20160401\" AND \"20170530\"\n     AND hits.type=\"EVENT\")\nGROUP BY YearMonth;"
        },
        {
            "description": "How to retrieve a value from a STRUCT array type.?",
            "sql": "WITH q1 AS\n  (SELECT 1 AS x,\n          [STRUCT('h1' AS id, [STRUCT('1' AS index, 'a' AS value), ('2','b')] AS cd),\n           STRUCT('h2', [STRUCT('3' AS index, 'c' AS value), ('4','d')] AS cd)] AS hits)\nSELECT *\nFROM q1;"
        },
        {
            "description": "How to use ARRAY_TO_STRUCT to construct a STRUCT ARRAY?",
            "sql": "WITH q1 AS\n  (SELECT 1 AS x,\n          [STRUCT('h1' AS id, [STRUCT<index STRING, value STRING>('1', 'a'), ('2','b')] AS cd),\n           STRUCT('h2', [STRUCT<index STRING, value STRING>('3', 'c'), ('4','d')] AS cd)] AS hits)\nSELECT *\nFROM q1;"
        },
        {
            "description": "How to retrieve the schema of a table.?",
            "sql": "SELECT SCHEMA\nFROM information_schema.tables\nWHERE TABLE_NAME = 'my_table';"
        },
        {
            "description": "How many sessions contain a 'view' event?",
            "sql": "SELECT COUNT(DISTINCT session_id)\nFROM UNNEST([session_id]\n            WHERE action='view');"
        },
        {
            "description": "How to retrieve pairs of elements from arrays with offsets?",
            "sql": "WITH test AS\n  (SELECT ['a', 'b', 'c'] AS xs,\n          [1, 2, 3] AS ys)\nSELECT struct(x, ys[OFFSET(OFF)] AS y) AS pairs\nFROM test,\n     unnest(xs) AS x WITH\nOFFSET OFF;"
        },
        {
            "description": "How to retrieve the distinct user and visit ID for user activity that occurred between the first and last recorded instances of event type 'event1' and event type 'event2'.?",
            "sql": "WITH DATA AS\n  (SELECT '1' AS USER,\n          '1' AS visitid,\n          '20170520' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                           eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('event1' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '1' AS USER,\n                    '2' AS visitid,\n                    '20170521' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '1' AS USER,\n                    '3' AS visitid,\n                    '20170522' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('event2' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '1' AS USER,\n                    '4' AS visitid,\n                    '20170523' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '2' AS USER,\n                    '1' AS visitid,\n                    '20170520' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('event1' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '2' AS USER,\n                    '2' AS visitid,\n                    '20170521' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('event2' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '2' AS USER,\n                    '3' AS visitid,\n                    '20170522' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '3' AS USER,\n                    '1' AS visitid,\n                    '20170520' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('event1' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '3' AS USER,\n                    '2' AS visitid,\n                    '20170521' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('' as eventCategory) as eventInfo)] hits\n   UNION ALL SELECT '3' AS USER,\n                    '3' AS visitid,\n                    '20170522' AS date, ARRAY<STRUCT<hitNumber INT64,\n                                                     eventInfo STRUCT<eventCategory STRING> >> [STRUCT(1 as hitNumber, STRUCT('' as eventCategory) as eventInfo)] hits)\nSELECT USER,\n       visitid, date\nFROM\n  (SELECT USER,\n          visitid, date, MIN(CASE\n                                 WHEN hits.eventInfo.eventCategory = 'event1' THEN date\n                             END) OVER(PARTITION BY USER) min_date,\n                                  MAX(CASE\n                                          WHEN hits.eventInfo.eventCategory = 'event2' THEN date\n                                      END) OVER(PARTITION BY USER) max_date\n   FROM DATA,\n        UNNEST(hits) hits)\nWHERE date BETWEEN min_date AND max_date;"
        },
        {
            "description": "How to retrieve users who have performed events between a specified date range?",
            "sql": "SELECT USER,\n       ARRAY\n  (SELECT AS STRUCT visitid, date\n   FROM UNNEST(user_data)\n   WHERE date BETWEEN min_date AND max_date) user_data\nFROM\n  (SELECT USER,\n          ARRAY_AGG(\n                      (SELECT AS STRUCT visitid, date)) user_data,\n          MIN(CASE\n                  WHEN EXISTS\n                         (SELECT 1\n                          FROM UNNEST(hits) hits\n                          WHERE hits.eventInfo.eventCategory = 'event1') THEN date\n              END) min_date,\n          MAX(CASE\n                  WHEN EXISTS\n                         (SELECT 1\n                          FROM UNNEST(hits) hits\n                          WHERE hits.eventInfo.eventCategory = 'event2') THEN date\n              END) max_date\n   FROM DATA\n   GROUP BY USER)\nWHERE ARRAY_LENGTH(ARRAY\n                     (SELECT AS STRUCT visitid, date\n                      FROM UNNEST(user_data)\n                      WHERE date BETWEEN min_date AND max_date)) > 0;"
        },
        {
            "description": "How to retrieve the schema of a field in a STRUCT?",
            "sql": "SELECT field1\nFROM UNNEST([{'name': 'field1', 'type': 'STRING', 'mode': 'REPEATED'}]) AS field1;"
        },
        {
            "description": "How many distinct visitors triggered events in each month?",
            "sql": "SELECT YearMonth,\n       COUNT(DISTINCT combinedVisitorId) AS EventCount\nFROM\n  (SELECT SUBSTR(_TABLE_SUFFIX, 1, 6) AS YearMonth,\n          CONCAT(fullVisitorId, \"-\", STRING(visitId), \"-\", STRING(hits.hitNumber)) AS combinedVisitorId\n   FROM `XXX.79296192.ga_sessions_*`\n   WHERE _TABLE_SUFFIX BETWEEN \"20160401\" AND \"20170530\"\n     AND hits.type=\"EVENT\")\nGROUP BY YearMonth;"
        },
        {
            "description": "How to retrieve a nested array of structs from a with statement.?",
            "sql": "WITH q1 AS\n  (SELECT 1 AS x,\n          [STRUCT('h1' AS id, [STRUCT('1' AS index, 'a' AS value), ('2','b')] AS cd),\n           STRUCT('h2', [STRUCT('3' AS index, 'c' AS value), ('4','d')] AS cd) ] AS hits)\nSELECT *\nFROM q1;"
        },
        {
            "description": "How to retrieve the idle time of all devices which had multiple standby periods?",
            "sql": "SELECT MIN(datetime) AS min_time,\n       MAX(datetime) AS max_time,\n       TIMESTAMP_DIFF(MAX(datetime), MIN(datetime), SECOND) AS idle\nFROM\n  (SELECT *,\n          SUM(speed) OVER(\n                          ORDER BY datetime) AS grp\n   FROM `dbtest.YourTable`) AS T\nWHERE speed = 0\nGROUP BY grp\nHAVING COUNT(1) > 1;"
        },
        {
            "description": "How to associate a transaction ID with each action for a given client session grouped by the number of consecutive actions without an associated transaction ID?",
            "sql": "SELECT client_id,\n       session_id,\n       TIME,\n       action,\n       (CASE\n            WHEN ROW_NUMBER() OVER (PARTITION BY client_id, session_id, grp, action\n                                    ORDER BY TIME) = 1 THEN MAX(transaction_id) OVER (PARTITION BY client_id, session_id, grp)\n        END) AS transaction_id\nFROM\n  (SELECT *,\n          COUNTIF(transaction_id IS NOT NULL) OVER(PARTITION BY client_id, session_id\n                                                   ORDER BY TIME ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS grp\n   FROM YourTable);"
        },
        {
            "description": "How to retrieve all transactioned and non-transactioned actions for a given clientID sessionID pair?",
            "sql": "SELECT client_id,\n       session_id,\n       action,\n       TIME,\n       transaction_id\nFROM `dataset.table`\nWHERE (client_id,\n       session_id) IN (\n                         (SELECT client_id,\n                                 session_id\n                          FROM `dataset.table`\n                          GROUP BY client_id,\n                                   session_id\n                          HAVING COUNT(*) > 1));"
        },
        {
            "description": "How to retrieve elements at given offsets in an array of struct?",
            "sql": "WITH test AS\n  (SELECT ['a', 'b', 'c'] AS xs,\n          [1, 2, 3] AS ys)\nSELECT struct(x, ys[OFFSET(OFF)] AS y) AS pairs\nFROM test,\n     unnest(xs) AS x WITH\nOFFSET OFF;"
        },
        {
            "description": "How to retrieve a list of users and their visit information from a given date range.?",
            "sql": "SELECT USER,\n       ARRAY\n  (SELECT AS STRUCT visitid, date\n   FROM UNNEST(user_data)\n   WHERE date BETWEEN min_date AND max_date) user_data\nFROM\n  (SELECT USER,\n          ARRAY_AGG(\n                      (SELECT AS STRUCT visitid, date)) user_data,\n          MIN(CASE\n                  WHEN EXISTS\n                         (SELECT 1\n                          FROM UNNEST(hits) hits\n                          WHERE hits.eventInfo.eventCategory = 'event1') THEN date\n              END) min_date,\n          MAX(CASE\n                  WHEN EXISTS\n                         (SELECT 1\n                          FROM UNNEST(hits) hits\n                          WHERE hits.eventInfo.eventCategory = 'event2') THEN date\n              END) max_date\n   FROM DATA\n   GROUP BY USER)\nWHERE ARRAY_LENGTH(ARRAY\n                     (SELECT AS STRUCT visitid, date\n                      FROM UNNEST(user_data)\n                      WHERE date BETWEEN min_date AND max_date)) > 0;"
        },
        {
            "description": "How many bytes of JavaScript are typically downloaded with the top 500 mobile pages from May 2017?",
            "sql": "SELECT SUBSTR(CONCAT('20', _TABLE_SUFFIX), 0, 10) AS date,\n       CASE\n           WHEN ENDS_WITH(_TABLE_SUFFIX, 'mobile') THEN 'mobile'\n           ELSE 'desktop'\n       END AS client,\n       APPROX_QUANTILES(bytesJS, 1000)[OFFSET(500)] AS p50\nFROM `httparchive.runs.2017_05_15_pages*` #WHERE #ENDS_WITH(_TABLE_SUFFIX, '_pages') #OR ENDS_WITH(_TABLE_SUFFIX, '_pages_mobile')\nGROUP BY 1,\n         2\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to retrieve the context ID, transaction ID, meta record date, transaction total, view ID, user ID, new vs. returning user indicator, experience view ID, experience ID, experience name, variation name, iteration ID, and control status for transactions and experiences with experience IDs 96659 or 96660.?",
            "sql": "SELECT base_account.random_table_name_transaction.context_id,\n       base_account.random_table_name_transaction.transaction_id,\n       base_account.random_table_name_transaction.meta_recordDate,\n       base_account.random_table_name_transaction.transaction_total,\n       base_account.random_table_name_transaction.view_id,\n       base_account.random_table_name_view.user_id,\n       base_account.random_table_name_view.view_id,\n       base_account.random_table_name_view.new_vs_returning,\n       base_account.random_table_name_experience.view_id,\n       base_account.random_table_name_experience.experienceId,\n       base_account.random_table_name_experience.experienceName,\n       base_account.random_table_name_experience.variationName,\n       base_account.random_table_name_experience.iterationId,\n       base_account.random_table_name_experience.isControl\nFROM `base_account.random_table_name_transaction` transactiontable\nINNER JOIN base_account.random_table_name_view viewtable ON transactiontable.view_id=viewtable.view_id\nINNER JOIN `base_account.random_table_name_experience` experiencetable ON viewtable.view_id=experiencetable.view_id\nWHERE experiencetable.experienceId = 96659\n  OR experiencetable.experienceId = 96660;"
        },
        {
            "description": "How to retrieve all records from the `myTable_20170601` table in the `datasetName` dataset within the `project_id` project.?",
            "sql": "SELECT *\nFROM `project_id.datasetName.myTable_20170601`;"
        },
        {
            "description": "How to retrieve all data across multiple BigQuery tables with specific date suffixes in their names?",
            "sql": "SELECT *\nFROM `project_id.datasetName.myTable_20170601`\nUNION ALL\n  (SELECT *\n   FROM `project_id.datasetName.myTable_*`\n   WHERE _TABLE_SUFFIX BETWEEN '20170516' AND '20170631');"
        },
        {
            "description": "How to retrieve all unique non-suffix columns weighted equally from all the tables in your dataset whose names have a suffix between '20170601' and '20170601'.?",
            "sql": "WITH T AS\n  (SELECT *,\n          _TABLE_SUFFIX AS suffix\n   FROM `project_id.datasetName.myTable_*`\n   WHERE _TABLE_SUFFIX BETWEEN '20170601' AND '20170601')\nSELECT * EXCEPT(suffix),\n         1 /\n  (SELECT COUNT(DISTINCT suffix)\n   FROM T)\nFROM T;"
        },
        {
            "description": "How to create a TIMESTAMP data type from a string?",
            "sql": "SELECT CAST('2017-01-01 00:00:00.000000' AS TIMESTAMP);"
        },
        {
            "description": "How to retrieve the provided timestamp in the '2017-01-01 00:00:00.000000000' format.?",
            "sql": "SELECT CAST('2017-01-01 00:00:00.000000000' AS TIMESTAMP);"
        },
        {
            "description": "How to retrieve the most recent modification timestamp for a table, formatted as milliseconds since the epoch?",
            "sql": "SELECT *,\n       TIMESTAMP_MILLIS(last_modified_time)\nFROM `dataset.__TABLES__`\nWHERE table_id = 'table_id';"
        },
        {
            "description": "How to retrieve the minimum game play time for each user and game.?",
            "sql": "SELECT user_id,\n       game_id,\n       MIN(game_play_time) AS game_play_time\nFROM\n  (SELECT user_id,\n          game_id,\n          game_play_time,\n          SUM(step) OVER(PARTITION BY user_id, game_id\n                         ORDER BY game_play_time) AS grp\n   FROM\n     (SELECT user_id,\n             game_id,\n             game_play_time,\n             CASE\n                 WHEN IFNULL(TIMESTAMP_DIFF(game_play_time, LAG(game_play_time) OVER(PARTITION BY user_id, game_id\n                                                                                     ORDER BY game_play_time), SECOND), 0) > 1 THEN 1\n                 ELSE 0\n             END AS step\n      FROM YourTable))\nGROUP BY user_id,\n         game_id,\n         grp;"
        },
        {
            "description": "How to retrieve only the first N bundles from a data source.?",
            "sql": "SELECT Count(*) AS Counter\nFROM <TABLE_NAME>\nGROUP BY BundleId\nORDER BY BundleId ASC\nLIMIT <N>;"
        },
        {
            "description": "How to retrieve all rows where the event_dim.params array includes more than one element where either the 'chips' key has a value greater than 90, or the 'coins' key has a value greater than 1000.?",
            "sql": "SELECT *\nFROM yourTable\nWHERE\n    (SELECT COUNTIF((KEY = 'chips'\n                     AND value.int_value > 90)\n                    OR (KEY = 'coins'\n                        AND value.int_value > 1000))\n     FROM UNNEST(event_dim.params)) > 1;"
        },
        {
            "description": "How to retrieve the number of occurrences for each level where at least two of the following conditions are met: the parameter 'chips' is greater than 90, or the parameter 'coins' is greater than 1000.?",
            "sql": "SELECT param.value.int_value,\n       COUNT(1) AS cnt\nFROM yourTable,\n     UNNEST(event_dim.params) AS param\nWHERE\n    (SELECT COUNTIF((KEY = 'chips'\n                     AND value.int_value > 90)\n                    OR (KEY = 'coins'\n                        AND value.int_value > 1000))\n     FROM UNNEST(event_dim.params)) > 1\n  AND param.key = 'level'\nGROUP BY 1;"
        },
        {
            "description": "How to retrieve the titles from table t1 and name from table t2, combining all rows with a cross join.?",
            "sql": "SELECT t1.title,\n       t2.name\nFROM t1\nCROSS JOIN t2;"
        },
        {
            "description": "How to retrieve the first five parts of the affiliate_sub5 field in the clicks_table, split by the '; ;' delimiter.?",
            "sql": "SELECT *,\n       FIRST(SPLIT(REPLACE(clicks_table.affiliate_sub5, ';;', '; ;'), ';')) part1,\n       NTH(2, SPLIT(REPLACE(clicks_table.affiliate_sub5, ';;', '; ;'), ';')) part2,\n       NTH(3, SPLIT(REPLACE(clicks_table.affiliate_sub5, ';;', '; ;'), ';')) part3,\n       NTH(4, SPLIT(REPLACE(clicks_table.affiliate_sub5, ';;', '; ;'), ';')) part4,\n       NTH(5, SPLIT(REPLACE(clicks_table.affiliate_sub5, ';;', '; ;'), ';')) part5\nFROM clicks_table;"
        },
        {
            "description": "How to retrieve affiliate subcategories 1 through 5 from the 'affiliate_sub5' field by splitting based on a semicolon delimiter.?",
            "sql": "SELECT *,\n       SPLIT(clicks_table.affiliate_sub5, ';')[SAFE_OFFSET(1)] AS part1,\n       SPLIT(clicks_table.affiliate_sub5, ';')[SAFE_OFFSET(2)] AS part2,\n       SPLIT(clicks_table.affiliate_sub5, ';')[SAFE_OFFSET(3)] AS part3,\n       SPLIT(clicks_table.affiliate_sub5, ';')[SAFE_OFFSET(4)] AS part4,\n       SPLIT(clicks_table.affiliate_sub5, ';')[SAFE_OFFSET(5)] AS part5\nFROM clicks_table;"
        },
        {
            "description": "How to sum up the elements of an array in BigQuery?",
            "sql": "CREATE TEMP FUNCTION test(a ARRAY<float64>) RETURNS ARRAY<float64> LANGUAGE js AS \"\"\"\nn=a.length;\nfor (var i=1;i<= n-1;i++)\n{\na[i]+=a[i-1];\n}\nreturn a;\n\"\"\";\n\nWITH test AS\n  (SELECT ARRAY<FLOAT64>[\n1,\n2,\n3,\n48,\n0] AS a)\nSELECT test(a)\nFROM test;"
        },
        {
            "description": "How to retrieve the contents of the YourTable table as a JSON string where the 'z' column is equal to 10?",
            "sql": "SELECT TO_JSON_STRING(t)\nFROM\n  (SELECT x,\n          y\n   FROM YourTable\n   WHERE z = 10) AS t;"
        },
        {
            "description": "How to convert rows into JSON?",
            "sql": "SELECT TO_JSON_STRING(t)\nFROM YourTable AS t\nWHERE z = 10;"
        },
        {
            "description": "How to retrieve employee names, genders, ages and salaries from two tables employees and payrates.?",
            "sql": "SELECT emp.name AS _name,\n       emp.gender AS _gender,\n       emp.age AS _age,\n       pay.salary AS _salary\nFROM [project:doug.employees] AS emp\nJOIN [project:doug.payrates] AS pay ON emp.name = pay.name;"
        },
        {
            "description": "How to retrieve a list of values by splitting a comma-separated string.?",
            "sql": "SELECT SPLIT(Titles) AS Title\nFROM\n  (SELECT 'Title 1,Title 2,Title 3,Title 4' AS Titles);"
        },
        {
            "description": "How to join two tables based on a flattened column in BigQuery?",
            "sql": "SELECT *\nFROM FLATTEN(\n               (SELECT SPLIT(Titles) AS Title\n                FROM\n                  (SELECT 'xy,zx' AS Titles)), Title) AS A\nLEFT JOIN\n  (SELECT Name,\n          Title\n   FROM table.name) AS NAMES ON A.Title=Names.Title;"
        },
        {
            "description": "How to retrieve all offers for a specific product ID, grouped by country and platform.?",
            "sql": "SELECT product.country,\n       general.platformName,\n       ARRAY_AGG(offer) AS offers\nFROM DATA,\n     UNNEST(products) AS product,\n     UNNEST(offers) AS offer\nWHERE id = 123\nGROUP BY product.country,\n         general.platformName;"
        },
        {
            "description": "How to retrieve the countries and the names of the platforms that have a product offer with a price of less than 3 USD.?",
            "sql": "WITH DATA AS\n  (SELECT 1 AS Id, STRUCT<platformId INT64,\n                          platformName STRING>(123,\n                                               'name 1') AS GENERAL, ARRAY<STRUCT<country STRING, url STRING, offers ARRAY<STRUCT<TYPE STRING, price FLOAT64,\n                                                                                                                                               currentcy STRING>>>> [ ('US',\n                                                                                                                                                                       'google.com',\n                                                                                                                                                                       [STRUCT<type STRING, price FLOAT64, currentcy STRING>('offer 1', 1.99, 'USD'), ('offer 2', 2.99, 'USD'),('offer 3', 3.99, 'USD')]), ('CA',\n                                                                                                                                                                                                                                                                                                            'yahoo.com',\n                                                                                                                                                                                                                                                                                                            [STRUCT<type STRING, price FLOAT64, currentcy STRING>('offer 4', 1.99, 'USD'), ('offer 5', 2.99, 'USD')]), ('EU',\n                                                                                                                                                                                                                                                                                                                                                                                                                        'apple.com',\n                                                                                                                                                                                                                                                                                                                                                                                                                        [STRUCT<type STRING, price FLOAT64, currentcy STRING>('offer 6', 1.99, 'USD')]) ] AS products\n   UNION ALL SELECT 2 AS Id, STRUCT<platformId INT64,\n                                    platformName STRING>(123,\n                                                         'name 2') AS GENERAL, ARRAY<STRUCT<country STRING, url STRING, offers ARRAY<STRUCT<TYPE STRING, price FLOAT64,\n                                                                                                                                                         currentcy STRING>>>> [ ('US',\n                                                                                                                                                                                 'google.com',\n                                                                                                                                                                                 [STRUCT<type STRING, price FLOAT64, currentcy STRING>('offer 7', 1.99, 'USD'), ('offer 8', 2.99, 'USD'),('offer 9', 3.99, 'USD')]), ('MX',\n                                                                                                                                                                                                                                                                                                                      'yahoo.com',\n                                                                                                                                                                                                                                                                                                                      [STRUCT<type STRING, price FLOAT64, currentcy STRING>('offer 10', 1.99, 'USD'), ('offer 11', 2.99, 'USD')]), ('CA',\n                                                                                                                                                                                                                                                                                                                                                                                                                                    'apple.com',\n                                                                                                                                                                                                                                                                                                                                                                                                                                    [STRUCT<type STRING, price FLOAT64, currentcy STRING>('offer 12', 1.99, 'USD')]) ] AS products)\nSELECT product.country,\n       general.platformName,\n       ARRAY_AGG(offer) AS offers\nFROM DATA,\n     UNNEST(products) AS product,\n     UNNEST(offers) AS offer\nWHERE id = 1\n  AND offer.price < 3\nGROUP BY product.country,\n         general.platformName;"
        },
        {
            "description": "How to retrieve the customer ID (CUSID), product ID (PID), transaction ID (TID), transaction date (YYYYMMDD), popularity index (X), and average gap between transactions (Y) for each transaction in the 'data' table.?",
            "sql": "WITH DATA AS\n  (SELECT 'A01' AS CUSID,\n          'P01' AS PID,\n          '001' AS TID,\n          DATE '2017-01-01' AS YYYYMMDD\n   UNION ALL SELECT 'A02',\n                    'P01',\n                    '002', DATE '2017-02-25'\n   UNION ALL SELECT 'A02',\n                    'P02',\n                    '002', DATE '2017-02-25'\n   UNION ALL SELECT 'A03',\n                    'P02',\n                    '003', DATE '2017-03-01'\n   UNION ALL SELECT 'A03',\n                    'P02',\n                    '004', DATE '2017-03-05'\n   UNION ALL SELECT 'A03',\n                    'P02',\n                    '004', DATE '2017-03-05'\n   UNION ALL SELECT 'A04',\n                    'P01',\n                    '005', DATE '2017-03-10'\n   UNION ALL SELECT 'A04',\n                    'P03',\n                    '005', DATE '2017-03-10'\n   UNION ALL SELECT 'A04',\n                    'P03',\n                    '006', DATE '2017-03-11'\n   UNION ALL SELECT 'A04',\n                    'P03',\n                    '007', DATE '2017-03-15'), popularity AS\n  (SELECT DISTINCT PID,\n                   COUNT(DISTINCT CUSID) OVER(PARTITION BY PID) / COUNT(DISTINCT CUSID) OVER() AS X\n   FROM DATA),\n                                               gaps AS\n  (SELECT CUSID,\n          PID,\n          TID,\n          YYYYMMDD,\n          DATE_DIFF(YYYYMMDD, LAG(YYYYMMDD) OVER(PARTITION BY CUSID, PID\n                                                 ORDER BY YYYYMMDD), DAY) AS gap\n   FROM DATA),\n                                               gaps_without_dups AS\n  (SELECT CUSID,\n          PID,\n          YYYYMMDD,\n          MAX(IFNULL(gap, 0)) AS gap\n   FROM gaps\n   GROUP BY CUSID,\n            PID,\n            YYYYMMDD\n   HAVING gap > 0),\n                                               average_gaps AS\n  (SELECT PID,\n          AVG(gap) AS Y\n   FROM gaps_without_dups\n   GROUP BY PID)\nSELECT CUSID,\n       PID,\n       TID,\n       YYYYMMDD,\n       X,\n       Y\nFROM DATA\nLEFT JOIN popularity USING (PID)\nLEFT JOIN average_gaps USING(PID);"
        },
        {
            "description": "How to retrieve the host, Referer header, URL, and payload from HAR requests in BigQuery and parse specific values from nested JSON.?",
            "sql": "CREATE\nTEMPORARY FUNCTION CUSTOM_JSON_EXTRACT(JSON STRING, KEY String) RETURNS string LANGUAGE js AS \"\"\"\n  try { \n    var parsed = JSON.parse(json);\n    for (i = 0; i < parsed.length; i++) { \n      if (parsed[i].name == key) return parsed[i].value\n    }  \n  } catch (e) {}\n  return null;\n\"\"\";\n\n\nSELECT JSON_EXTRACT(payload, \"$._host\")AS HOST,\n       CUSTOM_JSON_EXTRACT(JSON_EXTRACT(payload, \"$.request.headers\"), 'Referer') AS referer,\n       url,\n       payload\nFROM `httparchive.har.2016_01_01_chrome_requests`\nLIMIT 100;"
        },
        {
            "description": "How to extract specific columns from delimited data stored in a string field?",
            "sql": "WITH YourTable AS\n  (SELECT TIMESTAMP '2016-11-03T16:24:09.833Z' AS published_at,\n          '80.91 22.15 45.35 14.41 64.54' AS data_string\n   UNION ALL SELECT TIMESTAMP '2016-11-04T18:34:08.143Z', '75.37 28.43 31.17 34.80 19.33')\nSELECT published_at,\n       parts[OFFSET(0)] AS Temp1,\n       parts[OFFSET(1)] AS Humid1,\n       parts[OFFSET(2)] AS Temp2,\n       parts[OFFSET(3)] AS Humid2\nFROM\n  (SELECT * EXCEPT(data_string),\n            SPLIT(data_string, ' ') AS parts\n   FROM YourTable);"
        },
        {
            "description": "How to retrieve access details for users with base organizational units (OUs) containing '/US/' in their path.?",
            "sql": "SELECT actorEmail,\n       actorCallerType,\n       TIME,\n       uniquequalifier,\n       ipAddress,\n       EventType,\n       EventName,\n       PARAMETER\nFROM `your-project.your_dataset.your_table`\nWHERE EXISTS\n    (SELECT 1\n     FROM UNNEST(baseOUs)\n     WHERE baseOU LIKE '%/US%');"
        },
        {
            "description": "How to retrieve all contents from a table named `example_table` in the `my_dataset` dataset.?",
            "sql": "SELECT *\nFROM `my_dataset.example_table`;"
        },
        {
            "description": "How to retrieve levels 0-3, and the number of times each level was completed for users on app version 1.9.3a?",
            "sql": "SELECT LEVEL AS Level_number,\n                MAX((value = 0) * Levels) AS Trophies0,\n                MAX((value = 1) * Levels) AS Trophies1,\n                MAX((value = 2) * Levels) AS Trophies2,\n                MAX((value = 3) * Levels) AS Trophies3\nFROM\n  (SELECT COUNT(event_dim.name) AS Levels,\n          event_dim.params.key AS LEVEL,\n          event_dim.params.value.int_value AS value,\n   FROM TABLE_DATE_RANGE(mytable_ANDROID.app_events_, TIMESTAMP('2017-05-10'), TIMESTAMP('2017-05-14'))\n   WHERE event_dim.name = 'Levels'\n     AND event_dim.params.key = 'Level_2'\n     AND user_dim.app_info.app_version = '1.9.3a'\n   GROUP BY LEVEL,\n            value) AS levels\nGROUP BY Level_number;"
        },
        {
            "description": "How to use a user-defined SQL function to check if a string field represents a valid date?",
            "sql": "CREATE TEMP FUNCTION IsDate(x STRING) AS (x IS NULL\n                                          OR SAFE_CAST(x AS DATE) IS NOT NULL);\n\nWITH T AS\n  (SELECT '2017-05-01' AS x,\n          '3.14' AS y,\n          '5' AS z\n   UNION ALL SELECT '2017-03-02' AS x,\n                    '1.59' AS y,\n                    '-1' AS z\n   UNION ALL SELECT NULL AS x,\n                    NULL AS y,\n                    NULL AS z)\nSELECT LOGICAL_AND(IsDate(x)) AS x_is_date,\n       LOGICAL_AND(IsDate(y)) AS y_is_date,\n       LOGICAL_AND(IsDate(z)) AS z_is_date\nFROM T;"
        },
        {
            "description": "How to how to convert start/end_ip range to binary of 16-bit?",
            "sql": "SELECT *,\n       NET.SAFE_IP_FROM_STRING(start_ip) AS start_b,\n       NET.SAFE_IP_FROM_STRING(end_ip) AS end_b,\n       NET.IP_TRUNC(NET.SAFE_IP_FROM_STRING(start_ip), 16) AS PREFIX;"
        },
        {
            "description": "How to how to retrieve all records from the `ips` table that have an IPv4 address within a specified range.?",
            "sql": "SELECT *\nFROM `ips` i\nJOIN `ranges` a ON a.prefix = NET.IP_TRUNC(NET.SAFE_IP_FROM_STRING(i.ip), 16)\nWHERE NET.SAFE_IP_FROM_STRING(i.ip) BETWEEN a.start_b AND a.end_b;"
        },
        {
            "description": "How to extract the date portion from a timestamp in milliseconds?",
            "sql": "SELECT EXTRACT(DATE\n               FROM TIMESTAMP_MILLIS(1494865480000));"
        },
        {
            "description": "How to retrieve an overall summary of fruits in an ARRAY after aggregating them together using a JavaScript UDF.?",
            "sql": "CREATE TEMP FUNCTION aggregate_fruits(fruits ARRAY<STRING>) RETURNS STRING LANGUAGE js AS \"\"\"return \"my fruit bag CONTAINS these items: \" + fruits.join(\",\n                                                                                                                                        \");\"\"\";\n\nWITH fruits AS\n  (SELECT \"apple\" AS fruit\n   UNION ALL SELECT \"pear\" AS fruit\n   UNION ALL SELECT \"banana\" AS fruit)\nSELECT aggregate_fruits(ARRAY_AGG(fruit))\nFROM fruits;"
        },
        {
            "description": "How many campaigns were sent by email or SMS on each day?",
            "sql": "SELECT s.campaign_name,\n       date(event_date) AS event_date,\n       'email' medium,\n               count(s.send_id) sends\nFROM pixel_logs.table1 s\nINNER JOIN pixel_logs.full_logs AS l ON l.uid = s.uid\nWHERE 1=1\nGROUP BY event_date,\n         campaign_name\nUNION ALL\nSELECT s.campaign_name,\n       date(event_date) 'sms' medium,\n                              count(s.send_id)\nFROM pixel_logs.table2 s\nINNER JOIN pixel_logs.full_logs AS l ON l.uid = s.uid\nWHERE 1=1\n  AND account_id = 'xxxx'\nGROUP BY event_date,\n         campaign_name\nORDER BY event_date;"
        },
        {
            "description": "How to retrieve the name and welcome message for a custom campaign defined in 'd' with 'campaign = '1'?",
            "sql": "SELECT t.\"name\" AS custom_campaign_defined,\n       t.\"welcome\" AS funnel_step\nFROM\n  (SELECT '1' AS custom_campaign_defined) d\nLEFT JOIN TABLE t ON t.campaign = d.custom_campaign_defined;"
        },
        {
            "description": "How to retrieve the latest customer EAD to for a given order?",
            "sql": "SELECT oi.customer_ead_to,\n       MAX(CAST(oi.customer_ead_to AS INT64)) OVER (PARTITION BY oi.order_id) max_customer_ead_to\nFROM `rawData.order` o,\n     UNNEST (items) oi\nWHERE oi.order_id = 3689393;"
        },
        {
            "description": "How to retrieve unique page views grouped by campaign, date, and member PK?",
            "sql": "SELECT hits.contentgroup.contentgroup2 CampaignGrouping,\n       custd.value member_PK,\n       'Web' Canal,\n             'ES' AS country_id,\n             SUM(hits.contentGroup.contentGroupUniqueViews2) VistasUnicas\nFROM `project_id.dataset_id.ga_sessions_*`,\n     UNNEST(customdimensions) custd,\n     UNNEST(hits) AS hits\nWHERE 1 = 1\n  AND PARSE_TIMESTAMP('%Y%m%d', REGEXP_EXTRACT(_table_suffix, r'.*_(.*)')) BETWEEN TIMESTAMP('2017-05-01') AND TIMESTAMP('2017-05-06')\n  AND hits.contentGroup.contentGroup2<>'(not set)'\n  AND custd.value<>'null'\n  AND hits.contentGroup.contentGroupUniqueViews2 IS NOT NULL\nGROUP BY 1,\n         2\nORDER BY 5 ASC;"
        },
        {
            "description": "How to calculate the average product position from product lists with between 1-100 products?",
            "sql": "SELECT sku,\n       nom / den avg_position\nFROM\n  (SELECT sku,\n          SUM(POSITION * freq) nom,\n          SUM(freq) den\n   FROM\n     (SELECT prods.productsku sku,\n             prods.productlistposition POSITION,\n                                       COUNT(prods.productlistposition) freq\n      FROM `project_id.dataset_id.ga_sessions_*`,\n           UNNEST(hits) AS hits,\n           UNNEST(hits.product) prods\n      WHERE 1 = 1\n        AND PARSE_TIMESTAMP('%Y%m%d', REGEXP_EXTRACT(_table_suffix, r'.*_(.*)')) BETWEEN TIMESTAMP('2016-04-24') AND TIMESTAMP('2016-04-30')\n        AND prods.productlistposition > 0\n      GROUP BY sku,\n               POSITION)\n   GROUP BY sku);"
        },
        {
            "description": "How to retrieve the total number of unique users who visited this URL?",
            "sql": "SELECT COUNT(DISTINCT userid) AS COUNT_DISTINCT_USERS\nFROM hits\nWHERE hits.page.pagepath = 'your page url';"
        },
        {
            "description": "How to approximate quantiles of a list of numeric values?",
            "sql": "SELECT APPROX_QUANTILES(x, 2) AS approx_quantiles\nFROM UNNEST([NULL, NULL, 1, 1, 1, 4, 5, 6, 7, 8, 9, 10]) AS x;"
        },
        {
            "description": "How to retrieve quantiles with their corresponding offsets in BigQuery?",
            "sql": "SELECT quant,\nOFFSET\nFROM UNNEST(\n              (SELECT APPROX_QUANTILES(x, 2) AS quants\n               FROM UNNEST([NULL, NULL, 1, 1, 1, 4, 5, 6, 7, 8, 9, 10]) AS x)) AS quant WITH\nOFFSET\nORDER BY\nOFFSET;"
        },
        {
            "description": "How to find unique phone numbers within 60 minutes of the current time that are not associated with filipe.ferminiano and have triggered a user_authentication event?",
            "sql": "CREATE\nTEMPORARY FUNCTION URL_DECODE(enc STRING) RETURNS STRING LANGUAGE js AS \"\"\"\n  try { \n    return decodeURI(enc);; \n  } catch (e) { return null } \n  return null;\n\"\"\";\n\n\nSELECT replace(JSON_EXTRACT(URL_DECODE(l.ed), '$.phone'), \"\", \"\") AS phone\nFROM pixel_logs.full_logs l\nWHERE ev = 'user_authentication'\n  AND ed not like '%filipe.ferminiano%'\n  AND TIMESTAMP_SUB(CURRENT_TIMESTAMP(), interval 60 MINUTE) > timestamp\nGROUP BY phone ;"
        },
        {
            "description": "How many users visited your website broken out by country and property?",
            "sql": "SELECT date, CASE\n                 WHEN REGEXP_CONTAINS(h.sourcePropertyInfo.sourcePropertyTrackingId, r'82272640') THEN 'MUG'\n                 WHEN h.sourcePropertyInfo.sourcePropertyTrackingId = 'Social' THEN 'Social'\n                 ELSE 'Website'\n             END AS Property,\n             geoNetwork.country AS Country,\n             COUNT(DISTINCT CONCAT(CAST(visitId AS STRING), fullVisitorId)) AS visits,\n             COUNT(DISTINCT(fullVisitorId)) AS Users,\n             h.sourcePropertyInfo.sourcePropertyDisplayName AS display,\n             SUM(CASE\n                     WHEN REGEXP_CONTAINS(h.page.pagepath, r'/') THEN h.latencyTracking.pageLoadTime\n                 END) / SUM(CASE\n                                WHEN REGEXP_CONTAINS(h.page.pagepath, r'/') THEN h.latencyTracking.pageLoadSample\n                            END) AS pageloadspeed,\n             COUNT(DISTINCT CASE\n                                WHEN totals.newVisits = 1 THEN CONCAT(CAST(visitId AS STRING), fullVisitorId)\n                            END) new_visits,\n             COUNT(CASE\n                       WHEN h.type = 'PAGE' THEN h.page.pagepath\n                   END) pageviews,\n             SUM(CASE\n                     WHEN (h.isentrance = TRUE\n                           AND h.isexit = TRUE) THEN 1\n                 END) bounces,\n             COUNT(DISTINCT (CASE\n                                 WHEN device.isMobile = TRUE THEN CONCAT(CAST(visitId AS STRING), fullVisitorId)\n                             END)) mobilevisits,\n             COUNT(DISTINCT (CASE\n                                 WHEN trafficSource.medium = 'organic' THEN CONCAT(CAST(visitId AS STRING), fullVisitorId)\n                             END)) organicvisits,\n             SUM(CASE\n                     WHEN REGEXP_CONTAINS(h.eventInfo.eventAction, 'register$|registersuccess|new registration|account signup|registro') THEN 1\n                 END) AS NewRegistrations,\n             SUM(CASE\n                     WHEN REGEXP_CONTAINS(h.eventInfo.eventAction, 'add to cart|add to bag|click to buy|ass to basket|comprar|addtobasket::') THEN 1\n                 END) AS ClickToBuy,\n             COUNT(h.transaction.transactionid) transactions\nFROM `project_id.dataset_id.ga_sessions_*`,\n     UNNEST(hits) AS h\nWHERE 1 = 1\n  AND PARSE_TIMESTAMP('%Y%m%d', REGEXP_EXTRACT(_table_suffix, r'.*_(.*)')) BETWEEN TIMESTAMP('2017-05-01') AND TIMESTAMP('2017-05-01')\nGROUP BY date,Country,\n              display,\n              Property;"
        },
        {
            "description": "How to retrieve all possible win and EW returns and profits for each day within the duration given in the outer query.?",
            "sql": "WITH prep AS\n  (SELECT *,\n          (((odds - 1)/DIV) + 1) AS ew_odds,\n          (odds*SIZE) AS possible_win_returns, (((odds - 1)/DIV) + 1)*SIZE AS possible_ew_returns\n   FROM scratch.free),\n     prof AS\n  (SELECT *,\n          (possible_ew_returns+possible_win_returns) AS possible_total_win, (possible_win_returns*win) - SIZE AS win_profit, (possible_ew_returns*places) - SIZE AS ew_profit\n   FROM prep),\n     free2 AS\n  (SELECT DATE_TRUNC(prof.date, DAY) AS DAY,\n          SUM(ew_odds) AS ew_odds,\n          SUM(SIZE) AS SIZE,\n          SUM(odds) AS odds,\n          SUM(places) AS places,\n          SUM(DIV) AS divisor,\n          SUM (total_size) AS total_size,\n              SUM(won) AS profit,\n              SUM(ew_profit) AS ew_prof,\n              SUM(win_profit) AS win_prof,\n              SUM(possible_total_win) AS pos_tot_win,\n              SUM(possible_ew_returns) AS pos_ew_ret,\n              SUM(possible_win_returns) AS pos_win_ret\n   FROM prof\n   GROUP BY 1)\nSELECT d.*,\n       f.ew_odds,\n       f.size,\n       f.odds,\n       f.places,\n       f.divisor,\n       f.total_size,\n       f.profit,\n       f.ew_prof AS ew_profit,\n       f.win_prof AS win_profit,\n       f.pos_tot_win AS possible_total_win,\n       f.pos_ew_ret AS possible_ew_returns,\n       f.pos_win_ret AS possible_win_returns,\n       DATE_TRUNC(d.day, WEEK) AS WEEK,\n       DATE_TRUNC(d.day, MONTH) AS MONTH,\n       DATE_TRUNC(d.day, YEAR) AS YEAR,\n       DATE_TRUNC(d.day, QUARTER) AS quarterFROM free2 AS fLEFT\nJOIN accounts.daily_movement AS d ON d.day = f.day;"
        },
        {
            "description": "How to retrieve the total unique views for each campaign grouping, member, and channel on the website for Spain between May 1 and May 6, 2017.?",
            "sql": "SELECT hits.contentgroup.contentgroup2 CampaignGrouping,\n       custd.value member_PK,\n       'Web' Canal,\n             'ES' AS country_id,\n             SUM(hits.contentGroup.contentGroupUniqueViews2) VistasUnicas\nFROM `project_id.dataset_id.ga_sessions_*`,\n     UNNEST(customdimensions) custd,\n     UNNEST(hits) AS hits\nWHERE 1 = 1\n  AND PARSE_TIMESTAMP('%Y%m%d', REGEXP_EXTRACT(_table_suffix, r'.*_(.*)')) BETWEEN TIMESTAMP('2017-05-01') AND TIMESTAMP('2017-05-06')\n  AND hits.contentGroup.contentGroup2<>'(not set)'\n  AND custd.value<>'null'\n  AND hits.contentGroup.contentGroupUniqueViews2 IS NOT NULL\nGROUP BY 1,\n         2\nORDER BY 5 ASC;"
        },
        {
            "description": "How to calculate the average position in the list of products seen in any session in the given time period?",
            "sql": "SELECT sku,\n       nom / den avg_position\nFROM\n  (SELECT sku,\n          SUM(POSITION * freq) nom,\n          SUM(freq) den\n   FROM\n     (SELECT prods.productsku sku,\n             prods.productlistposition POSITION,\n                                       COUNT(prods.productlistposition) freq\n      FROM `project_id.dataset_id.ga_sessions_*`,\n           UNNEST(hits) AS hits,\n           UNNEST(hits.product) prods\n      WHERE 1 = 1\n        AND PARSE_TIMESTAMP('%Y%m%d', REGEXP_EXTRACT(_table_suffix, r'.*_(.*)')) BETWEEN TIMESTAMP('2016-04-24') AND TIMESTAMP('2016-04-30')\n        AND prods.productlistposition > 0\n      GROUP BY sku,\n               POSITION)\n   GROUP BY sku);"
        },
        {
            "description": "How to find the most used length of word that is more than a given value from Shakespeare's work?",
            "sql": "SELECT TOP(word, 30),\n       COUNT(*) AS word_count\nFROM publicdata:samples.shakespeare\nWHERE LENGTH(word) > 10;"
        },
        {
            "description": "How to call a JavaScript UDF from BigQuery?",
            "sql": "CREATE TEMP FUNCTION MyJsFunction(x FLOAT64) RETURNS FLOAT64 LANGUAGE js AS \"\"\"return my_js_function(x);\n\"\"\"OPTIONS (library='gs://[bucketName]/[fileName].js');\n\n\nSELECT MyJsFunction(x)\nFROM MyTable;"
        },
        {
            "description": "How to retrieve cycle hire data for journeys that began after 6am.?",
            "sql": "SELECT *\nFROM `bigquery-public-data.london_bicycles.cycle_hire`\nWHERE EXTRACT(HOUR\n              FROM start_date) > 6;"
        },
        {
            "description": "How to retrieve all hours from 0 to 23?",
            "sql": "SELECT *\nFROM UNNEST(GENERATE_ARRAY(0, 23)) AS HOUR;"
        },
        {
            "description": "How many bike rides have started between 7AM and 4PM for every hour in the dataset?",
            "sql": "WITH hours AS\n  (SELECT *\n   FROM UNNEST(GENERATE_ARRAY(0, 23)) AS HOUR),\n     bike_rides AS\n  (SELECT EXTRACT(HOUR\n                  FROM start_date) AS HOUR,\n          COUNT(*) AS total\n   FROM `bigquery-public-data.london_bicycles.cycle_hire`\n   WHERE EXTRACT(HOUR\n                 FROM start_date) > 6\n   GROUP BY HOUR)\nSELECT HOUR,\n       IF(total IS NULL, 0, total) AS total\nFROM bike_rides\nRIGHT OUTER JOIN hours USING (HOUR);"
        },
        {
            "description": "How to retrieve the job complete status and other query statistics?",
            "sql": "SELECT *,\n       IFNULL(error.status, 'NA') AS error_status,\n       IFNULL(error.message, 'NA') AS error_message,\n       IFNULL(error.debugInfo, 'NA') AS error_debug\nFROM `{}.QUERY_STATISTICS.{}.{}`\nWHERE TYPE = 1\nLIMIT 1;"
        },
        {
            "description": "How to retrieve information about an existing query job. You only need to specify the job ID.?",
            "sql": "SELECT *\nFROM `<your_project_id>.INFORMATION_SCHEMA.QUERY_JOBS`\nWHERE job_id = `5ceceaeb-e17c-4a86-8a27-574ad561b856`;"
        },
        {
            "description": "How to retrieve the day of the week for the dates?",
            "sql": "SELECT FORMAT_DATE('%A', dates) AS day_of_weekFROM your_table_name;"
        },
        {
            "description": "How to return the elements that are present in only one array from a given pair of arrays?",
            "sql": "CREATE TEMP FUNCTION DEDUP_ARRAYS(arr1 ANY TYPE, arr2 ANY TYPE) AS ((ARRAY\n                                                                       (SELECT item\n                                                                        FROM\n                                                                          (SELECT item, ROW_NUMBER() OVER(PARTITION BY item) pos\n                                                                           FROM UNNEST(arr1) item\n                                                                           UNION ALL SELECT item, ROW_NUMBER() OVER(PARTITION BY item) pos\n                                                                           FROM UNNEST(arr2) item)\n                                                                        GROUP BY item, pos\n                                                                        HAVING COUNT(1) = 1)));\n\nWITH `project.dataset.table` AS\n  (SELECT ['A', 'B', 'C', 'A', 'A', 'A'] AS origin_array,\n          ['A', 'A', 'B'] AS secondary_array)\nSELECT DEDUP_ARRAYS(origin_array, secondary_array) AS result_array\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve row values from a table in a column array?",
            "sql": "SELECT ARRAY_AGG(value\n                 ORDER BY\n                 OFFSET) AS result_array\nFROM UNNEST([\"A\", \"B\", \"C\"]) AS value WITH\nOFFSET;"
        },
        {
            "description": "How to retrieve a document ID and type from JSON values in a table?",
            "sql": "SELECT\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_id') doc_id,\n\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_type') doc_type\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve the 'doc_id' and 'doc_type' parameters from the 'table_name' table using a user-defined function?",
            "sql": "CREATE TEMP FUNCTION Extract_Parameter(PARAMETERS ANY TYPE, KEY STRING) AS (\n                                                                              (SELECT value\n                                                                               FROM UNNEST(PARAMETERS)\n                                                                               WHERE name = KEY));\n\nSELECT Extract_Parameter(jsonPayload.parameters, 'doc_id') doc_id,\n       Extract_Parameter(jsonPayload.parameters, 'doc_type') doc_type\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve yellow taxi trip data for the entire month of December 2018 in New York City.?",
            "sql": "CREATE TABLE `myProject.myDataset.myDestinationTable` AS\nSELECT *\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve the total amount of fares for taxi trips in New York City in December 2018?",
            "sql": "SELECT SUM(total_amount)\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve a list of strings and check if a specified integer is found within any of the strings.?",
            "sql": "CREATE TEMP FUNCTION InList(list STRING, num INT64) AS (\n                                                          (SELECT COUNTIF(num = CAST(number AS INT64))\n                                                           FROM UNNEST(SPLIT(list)) number));\n\nWITH `project.dataset.table` AS\n  (SELECT '1,2,3' AS number_list\n   UNION ALL SELECT '2,3,4')\nSELECT number_list,\n       InList(number_list, 1) in_list\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to check if a given number is present in a comma-separated list of numbers?",
            "sql": "SELECT ROW_NUMBER() OVER (\n                          ORDER BY 1) AS ROW,\n       STRING_SPLIT(in_list, \",\") AS number_list,\n       CASE\n           WHEN number_list CONTAINS_STRING('1') THEN 1\n           ELSE 0\n       END AS in_list\nFROM (\n      VALUES ('1,2,3',\n              1), ('2,3,4',\n                   0)) AS t(in_list, expected_result);"
        },
        {
            "description": "How to retrieve a boolean value indicating whether 1 appears in the number list.?",
            "sql": "SELECT IF(CONCAT(',', number_list, ',') LIKE CONCAT('%,1,%'), 1, 0);"
        },
        {
            "description": "How to check if the value '1' is included in the list `number_list`?",
            "sql": "SELECT IF('1' IN UNNEST(SPLIT(number_list)), 1, 0);"
        },
        {
            "description": "How to read element values from a query parameter JSON array based on a name filter?",
            "sql": "SELECT\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_id') doc_id,\n\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_type') doc_type\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to extract specific parameter values from JSON parameters using a user-defined function?",
            "sql": "CREATE TEMP FUNCTION Extract_Parameter(PARAMETERS ANY TYPE, KEY STRING) AS (\n                                                                              (SELECT value\n                                                                               FROM UNNEST(PARAMETERS)\n                                                                               WHERE name = KEY));\n\nSELECT Extract_Parameter(jsonPayload.parameters, 'doc_id') doc_id,\n       Extract_Parameter(jsonPayload.parameters, 'doc_type') doc_typeFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve all the rows from the New York City Taxi Trips dataset for 2018 where the dropoff month is December.?",
            "sql": "CREATE TABLE `myProject.myDataset.myDestinationTable` AS\nSELECT *\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve the total amount for all taxi rides completed in December 2018?",
            "sql": "SELECT SUM(total_amount)\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve counts of specified values in a comma-separated list using SQL.?",
            "sql": "CREATE TEMP FUNCTION InList(list STRING, num INT64) AS (\n                                                          (SELECT COUNTIF(num = CAST(number AS INT64))\n                                                           FROM UNNEST(SPLIT(list)) number));\n\nWITH `project.dataset.table` AS\n  (SELECT '1,2,3' AS number_list\n   UNION ALL SELECT '2,3,4')\nSELECT number_list,\n       InList(number_list, 1) in_list\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve a list of rows which contain a number from the list of numbers?",
            "sql": "SELECT number, ROW_NUMBER() OVER (\n                                  ORDER BY number) AS ROW,\n               IF(number IN (1, 2, 3),1, 0) AS in_list\nFROM my_table_name\nORDER BY number;"
        },
        {
            "description": "How to check if a number is in a list of numbers separated by commas?",
            "sql": "SELECT IF(CONCAT(',', number_list, ',') LIKE CONCAT('%,1,%'), 1, 0);"
        },
        {
            "description": "How to retrieve a flag indicating whether the number '1' appears in the 'number_list' field.?",
            "sql": "SELECT IF('1' IN UNNEST(SPLIT(number_list)), 1, 0);"
        },
        {
            "description": "How to retrieve the averages (as decimals) of the occurrences of two column values?",
            "sql": "SELECT avg(CASE\n               WHEN a_col = 'Hello' THEN 100.0\n               ELSE 0\n           END) AS a_something,\n       avg(CASE\n               WHEN b_col IS NULL THEN 100.0\n               ELSE 0\n           END) AS b_something\nFROM m;"
        },
        {
            "description": "How to retrieve a parameter if one or both parameters in the cross join is not there?",
            "sql": "WITH params AS\n  (SELECT avg(CASE\n                  WHEN a_col = 'Hello' THEN 100.0\n                  ELSE 0\n              END) AS a_something,\n          avg(CASE\n                  WHEN b_col IS NULL THEN 100.0\n                  ELSE 0\n              END) AS b_something\n   FROM m)\nSELECT count(*)\nFROM params\nCROSS JOIN unnest(a_something) AS a_something\nUNION ALL\nSELECT count(*)\nFROM params\nCROSS JOIN unnest(b_something) AS b_something;"
        },
        {
            "description": "How to create a BigQuery table?",
            "sql": "CREATE TABLE `PROJECT_ID.test.expiration` (name STRING, expire_time TIMESTAMP);"
        },
        {
            "description": "How to retrieve the current expiration time of a specified database?",
            "sql": "SELECT CURRENT_TIMESTAMP() AS CURRENT_TIMESTAMP,\n       DATABASE,\n       expiration_timestamp\nFROM `bigquery-public-data.utility_usage.bqml_usage`\nWHERE DATABASE = 'bigquery-public-data';"
        },
        {
            "description": "How to retrieve a table with partitioned data by extracting the timestamp field and partitioning it by day, with an expiration of 7776000000 milliseconds.?",
            "sql": "SELECT RowID, Timestamp\nFROM ML.FEATURES PARTITION BY TIMESTAMP_TRUNC(Timestamp, INTERVAL 1 DAY) OPTIONS (expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 7776000000 MILLISECONDS));"
        },
        {
            "description": "How to retrieve data for specific partitioned day.?",
            "sql": "SELECT *\nFROM `bigquery-public-data.usa_names.usa_1910_current` PARTITIONED BY `name`\nWHERE `state` = \"TX\"\n  AND `name` = \"Jacob\"\n  AND `number` = 1\n  AND DATE(`date`) = \"1950-01-01\"\nLIMIT 10;"
        },
        {
            "description": "How to retrieve the number of unique random values and the count of each unique value in the top 10 million pageviews in Wikipedia in 2019.?",
            "sql": "CREATE TEMP FUNCTION randomThis(VIEWS INT64) RETURNS FLOAT64 LANGUAGE js AS \"\"\"    if (typeof variable === 'undefined') {       variable = Math.random()    }    return variable  \"\"\";\n\nSELECT randomThis(VIEWS),\n       COUNT(*) c\nFROM\n  (SELECT VIEWS\n   FROM `fh-bigquery.wikipedia_v3.pageviews_2019`\n   LIMIT 10000000)\nGROUP BY 1\nORDER BY 2 DESC;"
        },
        {
            "description": "How to retrieve the minimum value of 'col_a' for each unique value in 'id'?",
            "sql": "SELECT id,\n       MIN(col_a) OVER (PARTITION BY id) AS col_bFROM your_table_name;"
        },
        {
            "description": "How to retrieve a limited sample of GDELT events from 1990 onwards that are related to disasters and attacks?",
            "sql": "SELECT *\nFROM `gdelt-bq.full.events`\nWHERE YEAR >= 1990\n  AND EventCode IN ('0211',\n                    '0311',\n                    '061',\n                    '1011',\n                    '1211')\nLIMIT 100;"
        },
        {
            "description": "How to retrieve a list of titles from Wikipedia page view data where the result of a custom MODOLO_MD5 function, when applied to the title, is 0.?",
            "sql": "CREATE TEMP FUNCTION modulo_md5(STR ANY TYPE, m ANY TYPE) AS (\n                                                                (SELECT MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(0 * 256 + num[OFFSET(0)], m) * 256 + num[OFFSET(1)], m) * 256 + num[OFFSET(2)], m) * 256 + num[OFFSET(3)], m) * 256 + num[OFFSET(4)], m) * 256 + num[OFFSET(5)], m) * 256 + num[OFFSET(6)], m) * 256 + num[OFFSET(7)], m) * 256 + num[OFFSET(8)], m) * 256 + num[OFFSET(9)], m) * 256 + num[OFFSET(10)], m) * 256 + num[OFFSET(11)], m) * 256 + num[OFFSET(12)], m) * 256 + num[OFFSET(13)], m) * 256 + num[OFFSET(14)], m) * 256 + num[OFFSET(15)], m)\n                                                                 FROM\n                                                                   (SELECT TO_CODE_POINTS(MD5(STR)) num)));\n\nSELECT title,\n       modulo_md5(title, 177) RESULT,\n                              TO_HEX(MD5(title)) md5\nFROM `fh-bigquery.wikipedia_v3.pageviews_2019`\nWHERE wiki='en'\nLIMIT 100000;"
        },
        {
            "description": "How to compute a modulo hash for a given string using MD5?",
            "sql": "SELECT fhoffa.x.modulo_md5(\"any string\", 177) RESULT;"
        },
        {
            "description": "How to retrieve the percentage of users who took an action on day seven after taking the same action on day zero, grouped by source and country.?",
            "sql": "WITH DATA AS (), cohort_info AS\n  (SELECT user_id,\n          SOURCE,\n          country\n   FROM DATA\n   GROUP BY 1,\n            2,\n            3),\n                 day_0_users AS (),\n                 day_7_users AS (),\n                 joined AS\n  (SELECT cohort_info.source,\n          cohort_info.country,\n          count(DISTINCT day_0_users.user_id) AS day_0_count,\n          count(DISTINCT day_7_users.user_id) AS day_7_count\n   FROM day_0_users\n   LEFT JOIN day_7_users USING(user_id)\n   INNER JOIN cohort_info USING(user_id)\n   GROUP BY 1,\n            2)\nSELECT *,\n       day_7_count/day_0_count AS seven_day_conversion\nFROM joined;"
        },
        {
            "description": "How to retrieve the counter history records with ranking based on timestamp.?",
            "sql": "WITH `project.dataset.counter_history` AS\n  (SELECT 121 CounterID,\n          'new' status,\n                'Nov-09-2019 8:32:19' transaction_time,\n                                      'UNDEFINED' SOURCE\n   UNION ALL SELECT 121,\n                    'new',\n                    'Nov-09-2019 8:32:20',\n                    'UNDEFINED'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:32:21',\n                    'WORKFLOW'\n   UNION ALL SELECT 121,\n                    'new',\n                    'Nov-09-2019 8:32:22',\n                    'WORKFLOW'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:32:59',\n                    'external'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:33:00',\n                    'external'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:33:01',\n                    'external'\n   UNION ALL SELECT 233,\n                    'new',\n                    'Nov-09-2019 8:33:32',\n                    'external'\n   UNION ALL SELECT 233,\n                    'new',\n                    'Nov-09-2019 8:49:58',\n                    'internal'\n   UNION ALL SELECT 233,\n                    'RESOLVED',\n                    'Nov-13-2019 6:51:11',\n                    'internal'\n   UNION ALL SELECT 233,\n                    'CLAIMED',\n                    'Nov-11-2019 22:15:52',\n                    'WORKFLOW'\n   UNION ALL SELECT 233,\n                    'new',\n                    'Nov-11-2019 22:15:54',\n                    'external'\n   UNION ALL SELECT 233,\n                    'CLAIMED',\n                    'Nov-11-2019 22:15:55',\n                    'external'\n   UNION ALL SELECT 156,\n                    'new',\n                    'Nov-11-2019 22:15:56',\n                    'UNDEFINED'\n   UNION ALL SELECT 156,\n                    'CLAIMED',\n                    'Nov-11-2019 22:16:24',\n                    'WORKFLOW'\n   UNION ALL SELECT 156,\n                    'CLAIMED',\n                    'Nov-11-2019 22:16:28',\n                    'external'\n   UNION ALL SELECT 156,\n                    'RESOLVE',\n                    'Nov-11-2019 22:16:56',\n                    'external'),\n     TEMP AS\n  (SELECT * REPLACE(PARSE_TIMESTAMP('%b-%d-%Y %T', transaction_time) AS transaction_time)\n   FROM `project.dataset.counter_history`)\nSELECT * EXCEPT(flag, grp),\n         ROW_NUMBER() OVER(PARTITION BY CounterID, grp\n                           ORDER BY transaction_time) ranking\nFROM\n  (SELECT *,\n          COUNTIF(flag) OVER(PARTITION BY CounterID\n                             ORDER BY transaction_time) grp\n   FROM\n     (SELECT *,\n             (status,\n              SOURCE) != LAG((status, SOURCE)) OVER(PARTITION BY CounterID\n                                                    ORDER BY transaction_time) flag\n      FROM TEMP));"
        },
        {
            "description": "How to retrieve the counter history, excluding seqnum and seqnum_s, and rank the rows by status and distance apart (seqnum_s - seqnum) for each counter_id?",
            "sql": "SELECT ch.*\nEXCEPT (seqnum,\n        seqnum_s), row_number() OVER (PARTITION BY counter_id, status, (seqnum_s - seqnum)\n                                      ORDER BY transaction_time) AS ranking\nFROM\n  (SELECT ch.*,\n          row_number() OVER (PARTITION BY counter_id\n                             ORDER BY transaction_time) AS seqnum,\n          row_number() OVER (PARTITION BY counter_id, status\n                             ORDER BY transaction_time) AS seqnum_s\n   FROM counter_history ch) ch;"
        },
        {
            "description": "How to create a custom scalar function to map a column to a specific value based on another column using BigQuery SQL?",
            "sql": "CREATE TEMP FUNCTION MAP(expr ANY TYPE, map ANY TYPE, `default` ANY TYPE) AS (IFNULL(\n                                                                                       (SELECT RESULT\n                                                                                        FROM\n                                                                                          (SELECT NULL AS SEARCH, NULL AS RESULT\n                                                                                           UNION ALL SELECT *\n                                                                                           FROM UNNEST(map))\n                                                                                        WHERE SEARCH = expr), `default`));\n\nWITH `project.dataset.table` AS\n  (SELECT 1 id,\n          4 location_id\n   UNION ALL SELECT 2,\n                    2\n   UNION ALL SELECT 3,\n                    5)\nSELECT id,\n       location_id,\n       MAP(location_id, [ (1, 'Los Angeles'), (2, 'San Francisco'), (3, 'New York'), (4, 'Seattle') ], 'Non US') AS `Location`\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the Location IDs for rows in a BigQuery table?",
            "sql": "SELECT ROW_ID() AS Row_id,\n       location_id,\n       LOCATION\nFROM `bigquery-public-data.usa_names.usa_1910_current`\nORDER BY ROW_ID DESC;"
        },
        {
            "description": "How to retrieve the top 10 SKUs based on total sales or number of transactions?",
            "sql": "SELECT base.ITEM_SKU_NBR,\n       RANK() OVER (\n                    ORDER BY SUM(base.NET_SLS_AMT) DESC) AS SLS_rank,\n       RANK() OVER (\n                    ORDER BY COUNT(DISTINCT base.txn_id) DESC) AS txn_rank\nFROM `my_table` base\nGROUP BY 1 QUALIFY SLS_rank < 10\nOR txn_rank < 10;"
        },
        {
            "description": "How to retrieve the base domain from a given list of URLs.?",
            "sql": "SELECT ARRAY_REVERSE(SPLIT(RTRIM(url, '/'), '/'))[SAFE_OFFSET(0)]\nFROM yourTable;"
        },
        {
            "description": "How to retrieve data from a table after updating values in columns using a function.?",
            "sql": "CREATE TABLE temp.mytable (a STRING, b STRING);\n\nINSERT INTO temp.mytable (a, b)\nVALUES('aaa','bbb');\n\nCREATE TEMP FUNCTION addsuffix(ROW ANY TYPE) RETURNS STRUCT<a STRING, b STRING> AS (STRUCT(CONCAT(row.a, '_a_suffix') AS a, CONCAT(row.b, '_b_suffix') AS b));\n\nSELECT addsuffix(r) AS withsuffix\nFROM temp.mytable r;"
        },
        {
            "description": "How to add a '_a_suffix' to the a column and a '_b_suffix' to the b column in a table?",
            "sql": "CREATE TEMP FUNCTION addsuffix(ROW ANY TYPE) AS (STRUCT(CONCAT(row.a, '_a_suffix') AS a, CONCAT(row.b, '_b_suffix') AS b));\n\nSELECT addsuffix(r) AS withsuffix\nFROM temp.mytable r;"
        },
        {
            "description": "How to retrieve names from a specific state from the public 'USA baby names' dataset?",
            "sql": "SELECT name\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE state = \"TX\"\nLIMIT 100;"
        },
        {
            "description": "How to retrieve all rows where the 'value' column casted as FLOAT is greater than 0 from the 'patienttable' table.?",
            "sql": "SELECT id,\n       name,\n       CAST(value AS FLOAT) AS resultvalue\nFROM patienttable\nWHERE CAST(value AS FLOAT) > 0;"
        },
        {
            "description": "How to retrieve the most recent complaint for each unique key?",
            "sql": "SELECT unique_key,\n       MAX(created_date) AS created_date\nFROM `bigquery-public-data.311.complaints`\nGROUP BY unique_key;"
        },
        {
            "description": "How to retrieve the column names for a table in BigQuery with Python's BigQuery Python API?",
            "sql": "SELECT COLUMN_NAME\nFROM `bigquery-public-data`.new_york_311.INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME='311_service_requests';"
        },
        {
            "description": "How to get locations from a nested JSON string in BigQuery using JSON_EXTRACT()?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 id,\n          '{\"photos\": [{\"location\": {\"lat\": 111, \"lon\": 222}, \"ts\": \"2019-12-16\", \"uri\": \"aaa\"}, {\"location\": {\"lat\": 333, \"lon\": 444}, \"ts\": \"2019-12-17\", \"uri\": \"bbb\"}]}' content)\nSELECT id,\n       json2array(JSON_EXTRACT(content, \"$.photos\")) AS photos\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve locations for photos in BigQuery.?",
            "sql": "SELECT ROW_ID(),\n       ARRAY_AGG(STRUCT<LOCATION STRUCT<lat INT64, lon INT64>, ts INT64, uri STRING>)\nFROM UNNEST(photos) AS photo\nGROUP BY ROW_ID();"
        },
        {
            "description": "How to extract an array of objects from a JSON string and parse the nested JSON objects?",
            "sql": "CREATE TEMP FUNCTION json2array(JSON STRING) RETURNS ARRAY<STRING> LANGUAGE js AS \"\"\"    return JSON.parse(json).map(x=>JSON.stringify(x));  \"\"\";\n\nWITH `project.dataset.table` AS\n  (SELECT 1 id,\n          '{\"photos\": [{\"location\": {\"lat\": 111, \"lon\": 222}, \"ts\": \"2019-12-16\", \"uri\": \"aaa\"}, {\"location\": {\"lat\": 333, \"lon\": 444}, \"ts\": \"2019-12-17\", \"uri\": \"bbb\"}]}' content)\nSELECT id,\n       array\n  (SELECT AS struct JSON_EXTRACT_SCALAR(photo, \"$.ts\") ts, JSON_EXTRACT_SCALAR(photo, \"$.uri\") uri, STRUCT(JSON_EXTRACT(photo, \"$.location.lat\") AS lat, JSON_EXTRACT(photo, \"$.location.lon\") AS lon) AS LOCATION\n   FROM unnest(json2array(JSON_EXTRACT(content, \"$.photos\"))) photo) AS photos\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the first photo URI for each distinct row id?",
            "sql": "SELECT DISTINCT rowid, photos.uri\nFROM photos\nORDER BY rowid;"
        },
        {
            "description": "How to retrieve the festival name and the closest animal sighting in the last two years based on timestamp.?",
            "sql": "CREATE TABLE temp.a AS\n  (SELECT *\n   FROM UNNEST([STRUCT(TIMESTAMP('2018-01-02 20:01:00') AS time, 'monkey' AS animal)     ,STRUCT('2018-03-04 10:10:10', 'lion')     ,STRUCT('2018-07-04 10:10:10', 'donkey')    ])) ;\n\nCREATE TABLE temp.b AS\n  (SELECT *\n   FROM UNNEST([STRUCT(TIMESTAMP('2017-01-02 10:01:00') AS time, 'one' AS festival)     ,STRUCT('2019-03-04 10:10:10', 'two')     ,STRUCT('2018-07-04 10:10:10', 'three')     ,STRUCT('2018-03-05 10:10:10', 'four')    ])) ;\n\nSELECT b.*,\n       ARRAY_AGG(a\n                 ORDER BY ABS(TIMESTAMP_DIFF(b.time, a.time, SECOND))\n                 LIMIT 1)[OFFSET(0)] closest\nFROM temp.b\nJOIN temp.a ON ABS(timestamp_diff(b.time, a.time, DAY)) < 360*2\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How to calculate total open, won, and lost amounts for each month and accumulate them over time?",
            "sql": "WITH TEMP AS\n  (SELECT id,\n          amount,\n          isWon,\n          isLoss,\n          DATE_TRUNC(Created_Date, MONTH) AS open_month,\n          DATE_TRUNC(DateWon, MONTH) AS win_month,\n          DATE_TRUNC(DateLost, MONTH) AS lost_month\n   FROM `project.dataset.table`), months AS\n  (SELECT MONTH\n   FROM\n     (SELECT MIN(MONTH) min_month,\n             MAX(MONTH) max_month\n      FROM\n        (SELECT open_month MONTH\n         FROM TEMP\n         UNION ALL SELECT win_month\n         FROM TEMP\n         UNION ALL SELECT lost_month\n         FROM TEMP)) t,\n        UNNEST(GENERATE_DATE_ARRAY(t.min_month, max_month, INTERVAL 1 MONTH)) MONTH),\n                                  totals AS\n  (SELECT open_month AS MONTH,\n          SUM(amount) total\n   FROM TEMP\n   GROUP BY open_month),\n                                  wins AS\n  (SELECT win_month AS MONTH,\n          SUM(amount) won\n   FROM TEMP\n   WHERE IsWon\n   GROUP BY win_month),\n                                  losses AS\n  (SELECT lost_month AS MONTH,\n          SUM(amount) loss\n   FROM TEMP\n   WHERE IsLoss\n   GROUP BY lost_month)\nSELECT FORMAT_DATE('%Y-%m', MONTH) AS MONTH,\n       SUM(total - IFNULL(won, 0) - IFNULL(loss, 0)) OVER(\n                                                          ORDER BY MONTH) total,\n                                                     SUM(IFNULL(won, 0)) OVER(\n                                                                              ORDER BY MONTH) won,\n                                                                         SUM(IFNULL(loss, 0)) OVER(\n                                                                                                   ORDER BY MONTH) loss\nFROM months m\nLEFT JOIN totals t USING (MONTH)\nLEFT JOIN wins w USING (MONTH)\nLEFT JOIN losses l USING (MONTH);"
        },
        {
            "description": "How to retrieve the total, won, and loss values for each month in a table with a date column named 'month'.?",
            "sql": "SELECT MONTH,\n       SUM(total) AS total,\n       SUM(won) AS won,\n       SUM(loss) AS loss\nFROM `my_table`\nGROUP BY MONTH;"
        },
        {
            "description": "How to update the 'total' column in the 'temp.users' table by summing the 'total' values from two other rows in the same table?",
            "sql": "CREATE OR REPLACE TABLE temp.users AS\n  (SELECT \"1\" id,\n          3 total\n   UNION ALL SELECT \"2\",\n                    2 total\n   UNION ALL SELECT \"3\",\n                    4 total\n   UNION ALL SELECT \"4\",\n                    5 total) ;\n\nUPDATE temp.users T0\nSET total = T1.total + T2.total\nFROM temp.users T1\nLEFT OUTER JOIN temp.users T2 ON T1.id = T2.id\nWHERE 1>0;"
        },
        {
            "description": "How to update a BigQuery table by joining with itself multiple times?",
            "sql": "CREATE OR REPLACE TABLE temp.users AS\n  (SELECT \"1\" id,\n          3 total\n   UNION ALL SELECT \"2\",\n                    2 total\n   UNION ALL SELECT \"3\",\n                    4 total\n   UNION ALL SELECT \"4\",\n                    5 total) ;\n\nUPDATE temp.users T0\nSET total = T1.total + T2.total\nFROM temp.users T1\nLEFT OUTER JOIN temp.users T2 ON T1.id = T2.id\nWHERE 1>0\n  AND T0.id = T1.id;"
        },
        {
            "description": "How to extract key-value pairs from an array of key=value strings?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'Alice' AS Name,\n          ['a=1','b=2','c=3'] attributes\n   UNION ALL SELECT 'Cheshire Cat',\n                    ['a=4', 'x=5']\n   UNION ALL SELECT 'White Rabbit',\n                    ['a=6', 'c=7'])\nSELECT Name,\n       SPLIT(kv, '=')[OFFSET(0)] KEY,\n                                 SPLIT(kv, '=')[SAFE_OFFSET(1)] value\nFROM `project.dataset.table`,\n     UNNEST(attributes) kv;"
        },
        {
            "description": "How to extract key-value pairs from a JSON array and create a table with the extracted values?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'Alice' AS Name,\n          ['a=1','b=2','c=3'] attributes\n   UNION ALL SELECT 'Cheshire Cat',\n                    ['a=4', 'b=5']\n   UNION ALL SELECT 'White Rabbit',\n                    ['a=6', 'c=7'])\nSELECT Name,\n       MAX(IF(KEY = 'a', value, NULL)) a,\n       MAX(IF(KEY = 'b', value, NULL)) b,\n       MAX(IF(KEY = 'c', value, NULL)) c\nFROM\n  (SELECT Name,\n          SPLIT(kv, '=')[OFFSET(0)] KEY,\n                                    SPLIT(kv, '=')[SAFE_OFFSET(1)] value\n   FROM `project.dataset.table`,\n        UNNEST(attributes) kv)\nGROUP BY Name;"
        },
        {
            "description": "How to retrieve team lead information for each user?",
            "sql": "WITH users AS\n  (SELECT \"1\" id,\n          \"2,3\" teamlead_ids,\n          \"Saelesrep_John\" Name\n   UNION ALL SELECT \"2\",\n                    NULL,\n                    \"Teamlead_Steve\"\n   UNION ALL SELECT \"3\",\n                    NULL,\n                    \"Teamlead_Kark\"\n   UNION ALL SELECT \"4\",\n                    \"2\",\n                    \"Salesrep_Buck\")\nSELECT id,\n\n  (SELECT ARRAY\n     (SELECT STRUCT(teamlead.name AS name, teamlead.id AS customId))\n   FROM users teamlead\n   WHERE id IN UNNEST(SPLIT(user.teamlead_ids))) AS teamLead\nFROM users USER;"
        },
        {
            "description": "How to retrieve team leaders for a given user?",
            "sql": "WITH users AS\n  (SELECT \"1\" id,\n          \"2,3\" teamlead_ids,\n          \"Saelesrep_John\" Name\n   UNION ALL SELECT \"2\",\n                    NULL,\n                    \"Teamlead_Steve\"\n   UNION ALL SELECT \"3\",\n                    NULL,\n                    \"Teamlead_Kark\"\n   UNION ALL SELECT \"4\",\n                    \"2\",\n                    \"Salesrep_Buck\")\nSELECT id,\n\n  (SELECT ARRAY_AGG(\n                      (SELECT STRUCT(teamlead.name AS name, teamlead.id AS customId)))\n   FROM users teamlead\n   WHERE id IN UNNEST(SPLIT(user.teamlead_ids))) AS teamLead\nFROM users USER;"
        },
        {
            "description": "How to Retrieve Data from a Custom Nested Structure?",
            "sql": "CREATE OR REPLACE TABLE temp.users AS\n  (SELECT \"1\" id,\n          \"2,3\" teamlead_ids,\n          \"Saelesrep_John\" Name\n   UNION ALL SELECT \"2\",\n                    NULL,\n                    \"Teamlead_Steve\"\n   UNION ALL SELECT \"3\",\n                    NULL,\n                    \"Teamlead_Kark\"\n   UNION ALL SELECT \"4\",\n                    \"2\",\n                    \"Salesrep_Buck\") ;\n\nSELECT id,\n       ARRAY_AGG(\n                   (SELECT STRUCT(teamlead.name AS name, teamlead.id AS customId)\n                    FROM temp.users teamlead\n                    WHERE user_team_lead = teamlead.id)\n                 IGNORE NULLS) AS teamLead\nFROM temp.users\nLEFT JOIN UNNEST(SPLIT(teamlead_ids)) user_team_lead\nGROUP BY id\nORDER BY id;"
        },
        {
            "description": "How to retrieve data for each entry in 'data' with the maximum timestamp, joined with 'filterData'?",
            "sql": "WITH DATA AS\n  (SELECT '123' AS UID,\n          3 AS goodinfo,\n          DATE('2019-12-12') AS timestamp\n   UNION ALL SELECT '123' AS UID,\n                    5 AS goodinfo,\n                    DATE('2019-01-12') AS timestamp\n   UNION ALL SELECT '234' AS UID,\n                    11 AS goodinfo,\n                    DATE('2019-10-12') AS timestamp), filterData AS\n  (SELECT UID,\n          max(timestamp) maxTimestamp\n   FROM DATA\n   GROUP BY UID)\nSELECT data.uid,\n       goodinfo,\n       filterData.maxTimestamp AS maxTimestamp\nFROM DATA\nINNER JOIN filterData ON data.uid = filterData.uid\nAND data.timestamp = filterData.maxTimestamp;"
        },
        {
            "description": "How many page views did the top Google-related Wikipedia page have between January 1, 2018 and January 8, 2018?",
            "sql": "WITH DATA AS\n  (SELECT *\n   FROM `fh-bigquery.wikipedia_v3.pageviews_2018`\n   WHERE wiki='en'\n     AND title LIKE 'Goo%')\nSELECT title,\n       SUM(VIEWS) VIEWS\nFROM DATA\nWHERE DATE(datehour) BETWEEN '2018-01-01' AND '2018-01-08' # 2.68 GB   GROUP BY 1 ORDER BY 2 DESC LIMIT 1;"
        },
        {
            "description": "How to retrieve the page title with the highest total views in English Wikipedia across all articles starting with 'Goo' within a 7-day period starting from January 1, 2018?",
            "sql": "WITH DATA AS\n  (SELECT *\n   FROM `fh-bigquery.wikipedia_v3.pageviews_2018`\n   WHERE wiki='en'\n     AND title LIKE 'Goo%'), min_date AS\n  (SELECT DATE('2018-01-01'))\nSELECT title,\n       SUM(VIEWS) VIEWS\nFROM DATA\nWHERE DATE(datehour) BETWEEN\n    (SELECT *\n     FROM min_date) AND DATE_ADD(\n                                   (SELECT *\n                                    FROM min_date), INTERVAL 7 DAY)\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1;"
        },
        {
            "description": "How to create a partitioned table using SQL?",
            "sql": "CREATE TABLE `temp.questions_partitioned` PARTITION BY DATE(creation_date) AS\nSELECT *\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to create a partitioned and clustered temp table?",
            "sql": "CREATE TABLE `temp.questions_clustered` PARTITION BY fake_date CLUSTER BY creation_date AS\nSELECT *,\n       DATE('2000-01-01') fake_date\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to retrieve the sum of scores for questions created after '2019-01-01'?",
            "sql": "SELECT sum(score)\nFROM `temp.questions_clustered`\nWHERE creation_date > \"2019-01-01\";"
        },
        {
            "description": "How to retrieve the length of the `emailed_users` array in each row.?",
            "sql": "SELECT ARRAY_LENGTH(emailed_users) AS Number_of_items2\nFROM your_table_name;"
        },
        {
            "description": "How to get the number of elements in an array?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT ['[email\u00a0protected]',\n           '[email\u00a0protected]',\n           '[email\u00a0protected]',\n           '[email\u00a0protected]'] emailed_users)\nSELECT ARRAY_LENGTH(emailed_users) AS Number_of_items2\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve for each camera how many accidents occurred within a radius of half a mile on its road.?",
            "sql": "SELECT c.*,\n       accidents_in_perimeter\nFROM\n  (SELECT ANY_VALUE(c) AS c,\n          COUNT(1) AS accidents_in_perimeter\n   FROM `project.dataset.cameras` c\n   JOIN `project.dataset.accidents` a ON c.road = a.street\n   AND a.mile BETWEEN c.mile - 0.5 AND c.mile + 0.5\n   GROUP BY FORMAT('%t', c));"
        },
        {
            "description": "How to retrieve accidents that happened within a certain perimeter of a specific road.?",
            "sql": "SELECT city,\n       state,\n       road,\n       mile,\n       SUM(accidents_in_perimeter) AS total_accidents_in_perimeter\nFROM\n  (SELECT ROW_NUMBER() OVER (PARTITION BY road\n                             ORDER BY mile) AS row_number,\n          city,\n          state,\n          road,\n          CAST(mile AS FLOAT64) AS mile,\n          CAST(accidents_in_perimeter AS INT64) AS accidents_in_perimeter\n   FROM UNNEST(GENERATE_ARRAY(mile - 10, mile + 10, 0.01)) AS mile,\n        locations\n   WHERE NOT IS_NULL(accidents_in_perimeter) INTERSECT\n     SELECT ROW_NUMBER() OVER (PARTITION BY road\n                               ORDER BY mile) AS row_number,\n            city,\n            state,\n            road,\n            CAST(mile AS FLOAT64) AS mile,\n            CAST(accidents_in_perimeter AS INT64) AS accidents_in_perimeter\n     FROM UNNEST(GENERATE_ARRAY(mile - 5, mile + 5, 0.01)) AS mile,\n          locations WHERE NOT IS_NULL(accidents_in_perimeter)) AS sub\nGROUP BY city,\n         state,\n         road,\n         mile;"
        },
        {
            "description": "How to group rows by a column and nest values from other columns into JSON format?",
            "sql": "WITH DATA AS\n  (SELECT 1 AS id,\n          '1v1' AS val1,\n          '1v2' AS val2\n   UNION ALL SELECT 1,\n                    '1v3',\n                    '2v4'\n   UNION ALL SELECT 2,\n                    '2v1',\n                    '2v2'), grouped AS\n  (SELECT id,\n          array_agg(struct(val1, val2)) x\n   FROM DATA\n   GROUP BY 1)\nSELECT id,\n       to_json_string(x) AS JSON\nFROM grouped;"
        },
        {
            "description": "How to retrieve the distribution of student ages, grouped into age groups (10-20, 20-30, etc.).?",
            "sql": "WITH students AS\n  (SELECT 9 AS age\n   UNION ALL SELECT 20 AS age\n   UNION ALL SELECT 25 AS age\n   UNION ALL SELECT 31 AS age\n   UNION ALL SELECT 32 AS age\n   UNION ALL SELECT 33 AS age)\nSELECT RANGE_BUCKET(age, [10, 20, 30]) AS age_group,\n       COUNT(*) AS COUNT\nFROM students\nGROUP BY 1;"
        },
        {
            "description": "How to count assets in different groups based on their `asset_no` values?",
            "sql": "WITH t (..your query here)\nSELECT RANGE_BUCKET(asset_no, [10, 20, 30]) AS asset_group,\n       COUNT(*) AS COUNT\nFROM t\nGROUP BY 1;"
        },
        {
            "description": "How to round numeric values to different precisions in BigQuery?",
            "sql": "SELECT ROUND(3953.65, 1),\n       ROUND(numeric '3053.665',2),\n       ROUND(numeric '3053.6665',3);"
        },
        {
            "description": "How to get the truncated value of a number to a specified decimal place?",
            "sql": "SELECT TRUNC(3.1955, 3),\n       TRUNC(numeric'3.195',3),\n       TRUNC(3.1955, 4),\n       TRUNC(numeric '3.1965',4),\n       TRUNC(3.1945, 4);"
        },
        {
            "description": "How to retrieve the portion of the string in 'mycol' that follows the 'contact_type__' prefix and contains only alphanumeric characters and the underscore.?",
            "sql": "SELECT regexp_extract(mycol, 'contact_type__([a-zA-Z0-9_]+)') AS extracted_value\nFROM your_table_name;"
        },
        {
            "description": "How to update TableA with new values for columns A and B based on the value of Final?",
            "sql": "UPDATE TableA\nSET A = CASE\n            WHEN FINAL IN (1,\n                           2) THEN 1\n            ELSE 0\n        END\nSET B = CASE WHEN FINAL = 2 THEN 1 ELSE 0\nWHERE FINAL IN (1,\n                2)\n  AND FINAL <> A+B;"
        },
        {
            "description": "How to retrieve the count of `session_start` events for each table partitioned by `_TABLE_SUFFIX` in the `analytics_202222094.events_*` dataset.?",
            "sql": "SELECT _TABLE_SUFFIX AS table_suffix,\n       COUNTIF(event_name = 'session_start')\nFROM `analytics_202222094.events_*`\nGROUP BY _TABLE_SUFFIX;"
        },
        {
            "description": "How to retrieve the schema from JSON files stored in a Cloud Storage bucket?",
            "sql": "CREATE EXTERNAL DATA SOURCE my_data_source OPTIONS(format='json' LOCATION='gs://[BUCKET_NAME]' SCHEMA= { fields: [        {          name: 'STRING'          type: 'STRING'        }      ] });"
        },
        {
            "description": "How to retrieve the number of entries recorded for each day in the field 'timestamp_field' in the table 'table'?",
            "sql": "SELECT date(timestamp_field, 'America/Los_Angeles') AS dte,\n       count(*)\nFROM TABLE\nGROUP BY dte;"
        },
        {
            "description": "How to retrieve daily counts of records and the running count of records for each month?",
            "sql": "SELECT dte,\n       count(*),\n       sum(count(*)) OVER (PARTITION BY extract(YEAR\n                                                FROM date_add(dte, interval 1 MONTH))\n                           ORDER BY min(timestamp_field)) AS running_cnt\nFROM\n  (SELECT t.*,\n          date(timestamp_field, 'America/Los_Angeles') AS dte\n   FROM t) t\nGROUP BY dte;"
        },
        {
            "description": "How to retrieve the top 5 cities by total sales and their sales.?",
            "sql": "SELECT sale.*\nFROM\n  (SELECT ARRAY_AGG(t\n                    ORDER BY sales DESC\n                    LIMIT 5) top_cities\n   FROM\n     (SELECT ORD.shipping_address_city city,\n             ORDL.sku,\n             sum(ORDL.price) SALES\n      FROM database.ORDER ORD\n      INNER JOIN database.ORDER_LINE ORDL ON ORD.ID = ORDL.order_id\n      WHERE shipping_address_city IS NOT NULL\n      GROUP BY ORD.shipping_address_city,\n               ORDL.sku) t\n   GROUP BY city) t,\n     UNNEST(top_cities) sale;"
        },
        {
            "description": "How to retrieve the boolean with the largest value that also has the latest datetime for each name?",
            "sql": "SELECT AS VALUE ARRAY_AGG(t\n                          ORDER BY bool DESC, dt DESC\n                          LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY name;"
        },
        {
            "description": "How to retrieve the latest updated row for each name?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'Car' name,\n                '2019-12-01' dt,\n                             TRUE bool\n   UNION ALL SELECT 'Car',\n                    '2019-12-03',\n                    FALSE\n   UNION ALL SELECT 'Bus',\n                    '2019-12-05',\n                    FALSE\n   UNION ALL SELECT 'Bus',\n                    '2019-12-11',\n                    FALSE)\nSELECT AS VALUE ARRAY_AGG(t\n                          ORDER BY bool DESC, dt DESC\n                          LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY name;"
        },
        {
            "description": "How to retrieve the sum of A_value, B_value and C_value grouped by Type?",
            "sql": "SELECT SUM(CASE TYPE\n               WHEN 'A' THEN A_value\n               WHEN 'B' THEN B_value\n               WHEN 'C' THEN C_value\n               ELSE 0\n           END) AS Type_value,\n       TYPE\nFROM `project.dataset.table`\nGROUP BY TYPE;"
        },
        {
            "description": "How to calculate the sum of multiple numeric columns grouped by category?",
            "sql": "SELECT SUM(IFNULL(A_value, 0) + IFNULL(B_value, 0) + IFNULL(C_value, 0)) AS Type_value,\n       TYPE\nFROM `project.dataset.table`\nGROUP BY TYPE;"
        },
        {
            "description": "How to retrieve the fourth part of a string split by a hyphen?",
            "sql": "SELECT SPLIT(STR, '-')[OFFSET(3)] AS fourth_part\nFROM your_table_name;"
        },
        {
            "description": "How to retrieve the fourth element of the string, delimited by '-' characters?",
            "sql": "SELECT SPLIT(STR, '-')[SAFE_OFFSET(3)] AS fourth_element\nFROM your_table_name;"
        },
        {
            "description": "How to find all geospatial elements within a defined distance of a given point?",
            "sql": "SELECT ST_DWithin(ST_GeogFromText('POLYGON(( -139.833984375 16.97274101999902, -138.33984375 15.029685756555674, -67.060546875 48.516604348867475, -68.37890625 49.89463439573421, -139.833984375 16.97274101999902))'), ST_GeogPoint(-139.833984375, 16.97274101999902), 10);"
        },
        {
            "description": "How to retrieve country codes as a comma-separated string, grouped by date?",
            "sql": "SELECT string_agg(id, ',') AS id ,\n       string_agg(country, ',') AS country ,\n       string_agg(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to group and concatenate values in a table by date?",
            "sql": "SELECT group_concat(id, ',') AS id ,\n       group_concat(country, ',') AS country ,\n       group_concat(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to get all combinations of rows from two tables using CROSS JOIN?",
            "sql": "SELECT t1.*\nFROM table1\nCROSS JOIN\n  (SELECT 1 AS n\n   UNION ALL SELECT 2\n   UNION ALL SELECT 3) n;"
        },
        {
            "description": "How to unnest a sequence of numbers (1, 2, 3) and combine (cross join) the results with rows from a table?",
            "sql": "SELECT t1.*\nFROM table1\nCROSS JOIN UNNEST(GENERATE_ARRAY(1, 3)) n;"
        },
        {
            "description": "How to create a comma-delimited list of values in BigQuery?",
            "sql": "SELECT string_agg(id, ',') AS id ,\n       string_agg(country, ',') AS country ,\n       string_agg(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to retrieve concatenation results for ID, country and code per date.?",
            "sql": "SELECT group_concat(id, ',') AS id ,\n       group_concat(country, ',') AS country ,\n       group_concat(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to retrieve all rows from table1, concatenated with the numbers 1, 2, and 3 in a new column 'n'.?",
            "sql": "SELECT t1.*\nFROM table1\nCROSS JOIN\n  (SELECT 1 AS n\n   UNION ALL SELECT 2\n   UNION ALL SELECT 3) n;"
        },
        {
            "description": "How to retrieve all rows from table1 along with 3 additional rows (with NULL values for columns not in table1) using UNNEST and GENERATE_ARRAY.?",
            "sql": "SELECT t1.*\nFROM table1\nCROSS JOIN UNNEST(GENERATE_ARRAY(1, 3)) n;"
        },
        {
            "description": "How to retrieve all data from table1 that is within the date range of any of the StartDate to EndDate ranges in table2 where table2.ID appears as any of the Camp fields in table1?",
            "sql": "SELECT *\nFROM `myproject.table1` AS t1\nFULL OUTER JOIN `myproject.table2` AS t2 ON TRUE\nWHERE t1.Date BETWEEN PARSE_DATE('%m/%d/%y', t2.StartDate) AND PARSE_DATE('%m/%d/%y', t2.EndDate)\n  AND t2.ID IN (t1.Camp1ID,\n                t1.Camp2ID,\n                t1.Camp3ID,\n                t1.Camp4ID,\n                t1.Camp5ID,\n                t1.Camp6ID,\n                t1.Camp7ID,\n                t1.Camp8ID,\n                t1.Camp9ID,\n                t1.Camp10ID,\n                t1.Camp11ID,\n                t1.Camp12ID,\n                t1.Camp13ID,\n                t1.Camp14ID,\n                t1.Camp15ID,\n                t1.Camp16ID);"
        },
        {
            "description": "How to retrieve customer metrics based on percentiles of revenue?",
            "sql": "SELECT FLOOR(seqnum * 100 / cnt) AS tile,\n       COUNT(customer_id),\n       COUNTIF(num_orders = 1) AS num_single_orders,\n       AVG(revenue),\n       ROUND(ROW/COUNT(customer_id), 0) percentile\nFROM\n  (SELECT c.*,\n          ROW_NUMBER() OVER (\n                             ORDER BY revenue DESC) - 1 AS seqnum,\n          COUNT(*) OVER () AS cnt\n   FROM customers c) c\nGROUP BY tile\nORDER BY tile;"
        },
        {
            "description": "How to retrieve a revenue coefficient for each order by summing up the product of other orders' val1 and val2 that are within a 24-hour and 6-minute window before and after the order time.?",
            "sql": "WITH `project.dataset.test_data` AS\n  (SELECT 1 val1,\n          7 val2,\n          'ord001' id,\n                   TIMESTAMP('2019-01-01 04:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    14 val2,\n                    'ord002' id,\n                             TIMESTAMP('2019-01-02 05:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    21 val2,\n                    'ord003' id,\n                             TIMESTAMP('2019-01-03 06:00:00') dt_order),\n     revenue_coeff AS\n  (SELECT td1.id,\n          td1.val1 * SUM(td2.val2) / SUM(td2.val1)\n   FROM `project.dataset.test_data` td1\n   CROSS JOIN `project.dataset.test_data` td2\n   WHERE td2.dt_order >= TIMESTAMP_SUB(td1.dt_order, INTERVAL 24 HOUR)\n     AND td2.dt_order < TIMESTAMP_ADD(td1.dt_order, INTERVAL 6 MINUTE)\n   GROUP BY td1.id,\n            td1.val1)\nSELECT *\nFROM revenue_coeff;"
        },
        {
            "description": "How to compute revene coefficients based on a rolling 4-hour window?",
            "sql": "WITH `project.dataset.test_data` AS\n  (SELECT 1 val1,\n          7 val2,\n          'ord001' id,\n                   TIMESTAMP('2019-01-01 04:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    14 val2,\n                    'ord002' id,\n                             TIMESTAMP('2019-01-02 05:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    21 val2,\n                    'ord003' id,\n                             TIMESTAMP('2019-01-03 06:00:00') dt_order),\n     revenue_coeff AS\n  (SELECT id,\n          val1 * SUM(val2) OVER(win) / SUM(val1) OVER(win)\n   FROM `project.dataset.test_data` td1 WINDOW win AS (\n                                                       ORDER BY UNIX_SECONDS(dt_order) RANGE BETWEEN 86400 PRECEDING AND 359 FOLLOWING))\nSELECT *\nFROM revenue_coeff;"
        },
        {
            "description": "How to retrieve data from today's and tomorrow's partitioned tables?",
            "sql": "SELECT *\nFROM `project.dataset.tablename*`\nWHERE _TABLE_SUFFIX = CONCAT('_',\n                             FORMAT_DATE('%Y%m%d', CURRENT_DATE())\n  OR _TABLE_SUFFIX = CONCAT('2_',\n                            FORMAT_DATE('%Y%m%d', CURRENT_DATE());"
        },
        {
            "description": "How to extract the week from a date?",
            "sql": "SELECT EXTRACT(WEEK\n               FROM date) AS week_number\nFROM your_table_name;"
        },
        {
            "description": "How to get the status of a running or recently run BigQuery job?",
            "sql": "SELECT *\nFROM [BIGQUERY-PUBLIC-DATA:utility_usage_explorer.bq_jobs]\nWHERE job_id = \"<BIGQUERY_JOB_ID>\";"
        },
        {
            "description": "How to how to extract values from a specific, JSON-formatted field?",
            "sql": "SELECT REGEXP_EXTRACT(hits_eventInfo_eventLabel, r'\"Loc\":\".*\"') AS extracted_value\nFROM your_table_name;"
        },
        {
            "description": "How to retrieve the row count of locations where a product is recommended?",
            "sql": "SELECT Recommendation_Location,\n       COUNT(*) AS Product_Count\nFROM Recommendation_table\nGROUP BY Recommendation_Location;"
        },
        {
            "description": "How to extract the location as a string from a JSON object stored in a string column?",
            "sql": "SELECT REGEXP_EXTRACT(hits_eventInfo_eventLabel, r'\"Loc\":\"(.*?)\"') AS LOCATION\nFROM your_table_name;"
        },
        {
            "description": "How to retrieve the recommendation location for a given row?",
            "sql": "SELECT Recommendation_Location\nFROM UNNEST(recommendation.location) AS Recommendation_Location;"
        },
        {
            "description": "How to retrieve the top 300 themes for GKG rows with date between 2015-03-03 00:00:00 UTC+00:00 and 2015-03-04 00:00:00 UTC+00:00 and containing the word 'Netanyahu' in the V2Persons field?",
            "sql": "SELECT theme,\n       COUNT(*) AS COUNT\nFROM\n  (SELECT REGEXP_REPLACE(value, r',.*', '') theme\n   FROM `gdelt-bq.gdeltv2.gkg`,\n        UNNEST(SPLIT(V2Themes, ';')) value\n   WHERE DATE>20150302000000\n     AND DATE < 20150304000000\n     AND V2Persons LIKE '%Netanyahu%')\nGROUP BY theme\nORDER BY 2 DESC\nLIMIT 300;"
        },
        {
            "description": "How to retrieve a comma-separated list of article concept names for each article identifier.?",
            "sql": "SELECT identifier,\n\n  (SELECT STRING_AGG(name, ', ')\n   FROM UNNEST(concepts)) AS conceptName\nFROM `project.dataset.articles`;"
        },
        {
            "description": "How to how to retrieve a list of concepts for each article? (newline-separated)?",
            "sql": "SELECT identifier,\n\n  (SELECT STRING_AGG(name, ', ')\n   FROM articles.concepts) AS conceptName\nFROM `project.dataset.articles` articles;"
        },
        {
            "description": "How to retrieve only the second row in BigQuery using a row identifier?",
            "sql": "SELECT conceptName\nFROM\n  (SELECT conceptName,\n          ROW_NUMBER() OVER () AS rownum\n   FROM `bigquery-public-data.stackoverflow.posts_questions`\n   WHERE 1 = 1) sub\nWHERE rownum = 2;"
        },
        {
            "description": "How to retrieve all rows from a table containing a body, and then for each row, return an array of matching keywords, if any, and the original body.?",
            "sql": "WITH keywords AS\n  (SELECT LOWER(keyword) AS keyword\n   FROM UNNEST(['Car', 'Vehicle', 'Motorcycle']) keyword)\nSELECT REGEXP_EXTRACT_ALL(LOWER(BODY), keywords_regexp) AS mentions,\n       BODY\nFROM `project.dataset.table`,\n  (SELECT CONCAT(r'.{1,50}\b(?:', STRING_AGG(keyword, '|'), r')\b.{1,50}') AS keywords_regexp\n   FROM keywords)\nWHERE REGEXP_CONTAINS(BODY, keywords_regexp);"
        },
        {
            "description": "How to retrieve text documents that contain a mention of any given keyword, and include the word surrounding it (up to 50 characters are retrieved for each side of the match).?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT text AS BODY\n   FROM `bigquery-public-data.hacker_news.comments`),\n     keywords AS\n  (SELECT LOWER(keyword) AS keyword\n   FROM UNNEST(['Car', 'Vehicle', 'Motorcycle']) keyword)\nSELECT REGEXP_EXTRACT_ALL(LOWER(BODY), keywords_regexp) AS mentions,\n       BODY\nFROM `project.dataset.table`,\n  (SELECT CONCAT(r'.{1,50}\b(?:', STRING_AGG(keyword, '|'), r')\b.{1,50}') AS keywords_regexp\n   FROM keywords)\nWHERE REGEXP_CONTAINS(BODY, keywords_regexp);"
        },
        {
            "description": "How to retrieve the body of comments from Hacker News that contains either the word 'Car', 'Vehicle', or 'Motorcycle', and group the results by comment body along with an array of matching mentions.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT text AS BODY\n   FROM `bigquery-public-data.hacker_news.comments`),\n     keywords AS\n  (SELECT CONCAT(r'\b', LOWER(keyword), r'\b') AS keyword_test,\n          CONCAT(r'.{1,50}\b', LOWER(keyword), r'\b.{1,50}') AS keyword\n   FROM UNNEST(['Car', 'Vehicle', 'Motorcycle']) keyword)\nSELECT ARRAY_CONCAT_AGG(mention) AS mentions,\n       BODY\nFROM\n  (SELECT BODY,\n          REGEXP_EXTRACT_ALL(LOWER(BODY), keyword) AS mention\n   FROM\n     (SELECT keyword,\n             BODY\n      FROM `project.dataset.table`,\n           keywords\n      WHERE REGEXP_CONTAINS(BODY, keyword_test)))\nGROUP BY BODY;"
        },
        {
            "description": "How to retrieve only unique sessions and event types?",
            "sql": "SELECT SESSION,\n       eventType,\n       eventOrder\nFROM\n  (SELECT t.*,\n          lag(eventType) over(PARTITION BY SESSION\n                              ORDER BY eventOrder) lag_eventType\n   FROM mytable t) t\nWHERE lag_eventType IS NULL\n  OR eventType != lag_eventType;"
        },
        {
            "description": "How to retrieve the date by parsing a given string in the format '%Y%m%d'.?",
            "sql": "SELECT PARSE_DATE('%Y%m%d', '20191024');"
        },
        {
            "description": "How to retrieve the minimum and maximum timestamps grouped by device ID and session ID where a session ID is defined as a sequence of rows with a timestamp difference of less than 60 seconds.?",
            "sql": "SELECT MIN(Min_Timestamp) AS Min_Timestamp,\n       MAX(Max_Timestamp) AS Max_Timestamp,\n       Device_ID,\n       Session_ID\nFROM\n  (SELECT * EXCEPT(flag, Session_ID),\n            CONCAT(Device_ID, CAST(COUNTIF(flag) OVER(PARTITION BY Device_ID\n                                                      ORDER BY Max_Timestamp) AS STRING)) AS Session_ID\n   FROM\n     (SELECT *,\n             IFNULL(TIMESTAMP_DIFF(Min_Timestamp, LAG(Max_Timestamp) OVER(PARTITION BY Device_ID\n                                                                          ORDER BY Max_Timestamp), SECOND), 999) > 60 flag\n      FROM `project.dataset.table`))\nGROUP BY Device_ID,\n         Session_ID;"
        },
        {
            "description": "How to create a session ID for each unique pair of minimum and maximum timestamps within a 60-second window?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT TIMESTAMP '2019-12-03 23:05:30.416 UTC' Min_Timestamp, TIMESTAMP '2019-12-03 23:09:13.502 UTC' Max_Timestamp,\n                                                                                                         'AAAAA' Device_ID,\n                                                                                                                 'I90HYTRFJI' Session_ID\n   UNION ALL SELECT '2019-12-03 23:09:21.517 UTC',\n                    '2019-12-03 23:09:53.353 UTC',\n                    'AAAAA',\n                    '98UHIGSNJR'\n   UNION ALL SELECT '2019-12-03 00:00:28.933 UTC',\n                    '2019-12-03 00:09:03.473 UTC',\n                    'BBBBB',\n                    '32QE8Y76TG'\n   UNION ALL SELECT '2019-12-03 00:09:19.106 UTC',\n                    '2019-12-03 00:23:26.554 UTC',\n                    'BBBBB',\n                    'R4GUY432AD'\n   UNION ALL SELECT '2019-12-03 00:23:26.818 UTC',\n                    '2019-12-03 00:23:26.837 UTC',\n                    'BBBBB',\n                    'E32GUYE328'\n   UNION ALL SELECT '2019-12-03 17:00:32.160 UTC',\n                    '2019-12-03 17:03:48.758 UTC',\n                    'BBBBB',\n                    'GY1EW32876'\n   UNION ALL SELECT '2019-12-03 17:03:58.069 UTC',\n                    '2019-12-03 17:17:12.408 UTC',\n                    'BBBBB',\n                    '2876T128Y7'\n   UNION ALL SELECT '2019-12-03 17:18:24.528 UTC',\n                    '2019-12-03 17:18:27.516 UTC',\n                    'BBBBB',\n                    '098U6598U5'\n   UNION ALL SELECT '2019-12-03 16:30:29.970 UTC',\n                    '2019-12-03 18:44:18.972 UTC',\n                    'CCCCC',\n                    'UWI4UII2J4'\n   UNION ALL SELECT '2019-12-04 17:32:19.285 UTC',\n                    '2019-12-04 17:32:24.668 UTC',\n                    'CCCCC',\n                    'G3247ROIUH')\nSELECT MIN(Min_Timestamp) AS Min_Timestamp,\n       MAX(Max_Timestamp) AS Max_Timestamp,\n       Device_ID,\n       Session_ID\nFROM\n  (SELECT * EXCEPT(flag, Session_ID),\n            CONCAT(Device_ID, CAST(COUNTIF(flag) OVER(PARTITION BY Device_ID\n                                                      ORDER BY Max_Timestamp) AS STRING)) AS Session_ID\n   FROM\n     (SELECT *,\n             IFNULL(TIMESTAMP_DIFF(Min_Timestamp, LAG(Max_Timestamp) OVER(PARTITION BY Device_ID\n                                                                          ORDER BY Max_Timestamp), SECOND), 999) > 60 flag\n      FROM `project.dataset.table`))\nGROUP BY Device_ID,\n         Session_ID;"
        },
        {
            "description": "How to retrieve the earliest and latest timestamp values along with the device and session IDs corresponding to each row.?",
            "sql": "SELECT Min(Timestamp) AS Min_Timestamp,\n       Max(Timestamp) AS Max_Timestamp,\n       Device_ID,\n       Session_ID\nFROM `my_dataset.my_table`;"
        },
        {
            "description": "How to retrieve the distinct sales data for 'Kero-Coco' products in Brazil from August to October 2019, grouped by `FECHA` (date), `product_trademark`, `VENTAS` (sales), `ORDENES` (orders), `USUARIOS` (users), and `main_grouped_store`.?",
            "sql": "SELECT DISTINCT FECHA,\n                product_trademark,\n                VENTAS,\n                ORDENES,\n                USUARIOS,\n                main_grouped_store\nFROM DB\nWHERE (product_trademark LIKE '%Kero-Coco%'\n       OR product_trademark LIKE '%kero-coco%')\n  AND COUNTRY = 'BR'\n  AND FECHA BETWEEN '201908' AND '201910'\nORDER BY VENTAS;"
        },
        {
            "description": "How to find the sales performance of 'Kero Coco' products in Brazil between August and October 2019?",
            "sql": "SELECT DISTINCT FECHA,\n                product_trademark,\n                VENTAS,\n                ORDENES,\n                USUARIOS,\n                main_grouped_store\nFROM DB\nWHERE LOWER(product_trademark) LIKE '%kero-coco%'\n  AND COUNTRY = 'BR'\n  AND FECHA BETWEEN '201908' AND '201910'\nORDER BY VENTAS;"
        },
        {
            "description": "How to how to split a string into two columns, one with the first item and another with the remaining items.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'how.now.brown.cow' col\n   UNION ALL SELECT 'how')\nSELECT col,\n       SPLIT(col, '.')[OFFSET(0)] AS first_item,\n\n  (SELECT STRING_AGG(item, '.'\n                     ORDER BY\n                     OFFSET)\n   FROM UNNEST(SPLIT(col, '.')) item WITH\n   OFFSET\n   WHERE\n     OFFSET > 0) AS rest_of_items\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the dates from the raw start_time field using this query?",
            "sql": "SELECT EXTRACT(DATE\n               FROM PARSE_TIMESTAMP('%m/%d/%Y %H:%M:%S %Z %z', start_time)) AS date\nFROM `cc_raw.cc_exp`;"
        },
        {
            "description": "How to retrieve the date component from a timestamp string in CET timezone using EXTRACT function?",
            "sql": "SELECT EXTRACT(DATE\n               FROM PARSE_TIMESTAMP('%m/%d/%Y %H:%M:%S %Z %z', '11/27/2019 14:40:15 CET +0100')) AS date;"
        },
        {
            "description": "How to retrieve the restaurant name, restaurant ID, and user ID for all ConfirmOrderBtn events that occurred between 20191110 and the current date for a specific app ID?",
            "sql": "SELECT *\nFROM\n  (SELECT\n     (SELECT x.value\n      FROM UNNEST(user_properties) x\n      WHERE x.key='restaurantName'\n        AND x.value IS NOT NULL).string_value AS restaurantName,\n     (SELECT x.value\n      FROM UNNEST(user_properties) x\n      WHERE x.key='restaurantId'\n        AND x.value IS NOT NULL).string_value AS restaurantID,\n     (SELECT x.value\n      FROM UNNEST(user_properties) x\n      WHERE x.key='user_id'\n        AND x.value IS NOT NULL).string_value AS USER\n   FROM `project.dataset.some_data_set`\n   WHERE event_name=\"ConfirmOrderBtn\"\n     AND event_date BETWEEN '20191110' AND '_*'\n     AND app_info.id = \"app_id\")\nWHERE NOT (restaurantName IS NULL\n           OR restaurantID IS NULL\n           OR USER IS NULL);"
        },
        {
            "description": "How to retrieve the values of a specific column list from a table within a 15-day range?",
            "sql": "SELECT <COLUMN list>\nFROM `project.dataset.table`\nWHERE DATE(run_time) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 15 DAY) AND CURRENT_DATE();"
        },
        {
            "description": "How to retrieve the start and end time of each activity block?",
            "sql": "SELECT ROW_NUMBER() OVER(\n                         ORDER BY grp) block_num,\n                    MIN(datetime) activity_start,\n                    MAX(datetime) activity_end\nFROM\n  (SELECT *,\n          COUNTIF(flag) OVER(\n                             ORDER BY datetime) grp\n   FROM\n     (SELECT *,\n             active != LAG(active) OVER(\n                                        ORDER BY datetime) flag\n      FROM `project.dataset.activity`))\nWHERE active = 1\nGROUP BY grp;"
        },
        {
            "description": "How to retrieve the first and last row from a table?",
            "sql": "SELECT *\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER () AS rn\n   FROM <TABLE>\n   ORDER BY block_num) subquery\nWHERE rn IN (1,\n               (SELECT COUNT(*)\n                FROM <TABLE>));"
        },
        {
            "description": "How to query BigQuery tables to get all data from a folder in bucket?",
            "sql": "SELECT *\nFROM `project-id.dataset.table`\nWHERE folder = 'folder_path';"
        },
        {
            "description": "How to retrieve the network and IP range for each geographic location based on an IPv4 address?",
            "sql": "CREATE TEMP FUNCTION cidrToRange(CIDR STRING) RETURNS STRUCT<start_IP STRING, end_IP STRING> LANGUAGE js AS \"\"\"    var beg = CIDR.substr(CIDR,CIDR.indexOf('/'));    var end = beg;    var off = (1<<(32-parseInt(CIDR.substr(CIDR.indexOf('/')+1))))-1;     var sub = beg.split('.').map(function(a){return parseInt(a)});    var buf = new ArrayBuffer(4);     var i32 = new Uint32Array(buf);    i32[0]  = (sub[0]<<24) + (sub[1]<<16) + (sub[2]<<8) + (sub[3]) + off;    var end = Array.apply([],new Uint8Array(buf)).reverse().join('.');    return {start_IP: beg, end_IP: end};  \"\"\";\n\nSELECT network,\n       IP_range.*\nFROM `bigquery-public-data.geolite2.ipv4_city_blocks`,\n     UNNEST([cidrToRange(network)]) IP_range;"
        },
        {
            "description": "How to retrieve all unique rows from the table, excluding rows that have multiple occurrences of the same interval_uid and a null duration.?",
            "sql": "WITH unwanted_rows AS\n  (SELECT a.*\n   FROM `table` a\n   JOIN\n     (SELECT interval_uid,\n             COUNT(*)\n      FROM `table`\n      GROUP BY interval_uid\n      HAVING COUNT(*) > 1) b ON a.interval_uid = b.interval_uid\n   WHERE duration IS NULL)\nSELECT *\nFROM `table`\nEXCEPT DISTINCT\nSELECT *\nFROM unwanted_rows;"
        },
        {
            "description": "How to retrieve observations with a unique identifier for each group of observations for each sensorname by time.?",
            "sql": "SELECT * EXCEPT(grp),\n         ROW_NUMBER() OVER(PARTITION BY sensorname, grp\n                           ORDER BY TIME) iteration_id\nFROM\n  (SELECT *,\n          COUNTIF(iteration_start) OVER(PARTITION BY sensorname\n                                        ORDER BY TIME) grp\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to find the iteration ID for each row in a table, based on the values of a specific column?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT '1' value,\n              'a' sensorname, TIMESTAMP '2019-12-03 22:11:09' TIME,\n                                                              TRUE iteration_start\n   UNION ALL SELECT '2',\n                    'a',\n                    '2019-12-03 22:11:10',\n                    FALSE\n   UNION ALL SELECT '3',\n                    'a',\n                    '2019-12-03 22:11:11',\n                    FALSE\n   UNION ALL SELECT '4',\n                    'a',\n                    '2019-12-03 22:11:12',\n                    TRUE\n   UNION ALL SELECT '5',\n                    'a',\n                    '2019-12-03 22:11:13',\n                    FALSE\n   UNION ALL SELECT '6',\n                    'a',\n                    '2019-12-03 22:11:14',\n                    FALSE\n   UNION ALL SELECT '7',\n                    'a',\n                    '2019-12-03 22:11:15',\n                    FALSE)\nSELECT * EXCEPT(grp),\n         ROW_NUMBER() OVER(PARTITION BY sensorname, grp\n                           ORDER BY TIME) iteration_id\nFROM\n  (SELECT *,\n          COUNTIF(iteration_start) OVER(PARTITION BY sensorname\n                                        ORDER BY TIME) grp\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to retrieve unique sensor names associated with iterations that were started with 'true' values and also ended with 'true' values in the iteration_end column.?",
            "sql": "SELECT DISTINCT sensorname\nFROM\n  (SELECT *,\n          IF((iteration_start=TRUE\n              AND iteration_end = TRUE), 1, 0) AS iteration_true\n   FROM your_table)\nWHERE iteration_true = 1;"
        },
        {
            "description": "How to assign a unique number to each different value of a specified column in a table in BigQuery?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 pos,\n          'a' AS letter,\n          'Nick' AS name\n   UNION ALL SELECT 2,\n                    'b',\n                    'Nick'\n   UNION ALL SELECT 3,\n                    'd',\n                    'Nick'\n   UNION ALL SELECT 4,\n                    't',\n                    'Joe'\n   UNION ALL SELECT 5,\n                    'u',\n                    'Joe'\n   UNION ALL SELECT 6,\n                    'n',\n                    'Nick'\n   UNION ALL SELECT 7,\n                    'a',\n                    'Nick'\n   UNION ALL SELECT 8,\n                    'z',\n                    'Nick'\n   UNION ALL SELECT 9,\n                    'p',\n                    'Chris'\n   UNION ALL SELECT 10,\n                    'm',\n                    'Chris'\n   UNION ALL SELECT 11,\n                    'n',\n                    'Joe'\n   UNION ALL SELECT 12,\n                    'b',\n                    'Joe')\nSELECT * EXCEPT(num),\n         1 + COUNTIF(num) OVER(\n                               ORDER BY pos) num\nFROM\n  (SELECT *,\n          name != LAG(name) OVER(\n                                 ORDER BY pos) num\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to retrieve the most recent result for each unique confirmation_number?",
            "sql": "SELECT AS VALUE ARRAY_AGG(r\n                          ORDER BY seq DESC\n                          LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.results_table` r\nGROUP BY confirmation_number;"
        },
        {
            "description": "How to retrieve the total amount of all trips in the Yellow Taxi Trip dataset for the year 2018.?",
            "sql": "SELECT SUM(total_amount)\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`;"
        },
        {
            "description": "How to filter rows where the _TABLE_SUFFIX is greater than the date formatted in YYYYMMDD format, when the current date is subtracted by 3 days?",
            "sql": "SELECT *\nFROM your_table_name\nWHERE _TABLE_SUFFIX > FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY));"
        },
        {
            "description": "How many points did each user earn in a particular day?",
            "sql": "SELECT userID,\n       SUM(markedDates.d_2018_11_30.earnedPoint) AS allEarnedPoint\nFROM `project.dataset.table`\nGROUP BY userID;"
        },
        {
            "description": "How to retrieve the total earned points for each user between specific dates.?",
            "sql": "SELECT userID,\n       SUM(CAST(JSON_EXTRACT(REGEXP_EXTRACT(x, r\"d_.*?:(.*)\"), '$.earnedPoint') AS FLOAT64)) allEarnedPoint\nFROM `project.dataset.table`,\n     UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(markedDates), r\"d_.*?:{.*?}\")) x\nWHERE REGEXP_EXTRACT(x, r\"d_(.*?)\") BETWEEN '2018_12_02' AND '2018_12_05'\nGROUP BY userID;"
        },
        {
            "description": "How to use JSON_EXTRACT_ALL() to extract values using regex on a nested STRUCT type in BigQuery?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 userID,\n          STRUCT(STRUCT(0 AS earnedPoint, TRUE AS earnedShare) AS d_2018_11_30, STRUCT(1 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_01, STRUCT(2 AS earnedPoint, FALSE AS earnedShare) AS d_2018_12_02, STRUCT(3 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_03, STRUCT(4 AS earnedPoint, FALSE AS earnedShare) AS d_2018_12_04, STRUCT(5 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_05, STRUCT(6 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_06) markedDates)\nSELECT userID,\n       SUM(CAST(JSON_EXTRACT(REGEXP_EXTRACT(x, r'\"d_.*?\":(.*)'), '$.earnedPoint') AS FLOAT64)) allEarnedPoint\nFROM `project.dataset.table`,\n     UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(markedDates), r'\"d_.*?\":{.*?}')) x\nWHERE REGEXP_EXTRACT(x, r'\"d_(.*?)\"') BETWEEN '2018_12_02' AND '2018_12_05'\nGROUP BY userID;"
        },
        {
            "description": "How to create a calendar of dates from a start date to an end date, incrementing by weeks?",
            "sql": "SELECT dte,\n       t.ended,\n       t.package\nFROM\n  (SELECT t,\n          GENERATE_DATE_ARRAY(t.purchased, t.ended, interval 1 WEEK) AS dtes\n   FROM\n     (SELECT date('2019-01-01') AS purchased,\n             date('2019-02-01') AS ended,\n             '1MOnth' AS PACKAGE) t) t\nCROSS JOIN UNNEST(t.dtes) dte;"
        },
        {
            "description": "How to retrieve a table's expiration timestamp?",
            "sql": "SELECT *\nFROM `my_project.my_dataset.INFORMATION_SCHEMA.TABLE_OPTIONS`\nWHERE option_name='expiration_timestamp';"
        },
        {
            "description": "How to retrieve the average of the difference between consecutive days for each event category and event planner, using a rolling window.?",
            "sql": "SELECT * EXCEPT(DAY, diff),\n         IFNULL(AVG(diff) OVER(PARTITION BY event_category, event_planner\n                               ORDER BY DAY), 0) rolling_avg\nFROM\n  (SELECT *,\n          DATE_DIFF(DAY, LAG(DAY) OVER(PARTITION BY event_category, event_planner\n                                       ORDER BY DAY), DAY) diff\n   FROM\n     (SELECT *,\n             SAFE_CAST(date AS DATE) AS DAY\n      FROM `project.dataset.table`));"
        },
        {
            "description": "How many events were planned by John?",
            "sql": "SELECT COUNT(*) total_events_planned\nFROM `project.dataset.table`\nWHERE event_planner = 'John';"
        },
        {
            "description": "How do the number of event planners contribute to the rolling average of events?",
            "sql": "SELECT date, event_category,\n             event_planner,\n             rolling_avg\nFROM ML.PREDICT(MODEL `{project_id}.{dataset_id}.{model_id}`, TABLE `{project_id}.{dataset_id}.{table_id}`)\nORDER BY date, event_category,\n               event_planner,\n               rolling_avg;"
        },
        {
            "description": "How to retrieve the rolling average of the 'diff' column for each event_category and event_planner over the past 2 days.?",
            "sql": "SELECT * EXCEPT(DAY, diff),\n         IFNULL(AVG(diff) OVER(PARTITION BY event_category, event_planner\n                               ORDER BY DAY ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0) rolling_avg\nFROM\n  (SELECT *,\n          DATE_DIFF(DAY, LAG(DAY) OVER(PARTITION BY event_category, event_planner\n                                       ORDER BY DAY), DAY) diff\n   FROM\n     (SELECT *,\n             SAFE_CAST(date AS DATE) AS DAY\n      FROM `project.dataset.table`));"
        },
        {
            "description": "How to retrieve the previous matching start date for each row where the start date is equal to the end date?",
            "sql": "SELECT t.*,\n       (CASE\n            WHEN start_date = end_date THEN lag(start_date) OVER (PARTITION BY (CASE\n                                                                                    WHEN start_date = end_date THEN 1\n                                                                                    ELSE 0\n                                                                                END)\n                                                                  ORDER BY start_date)\n        END) AS prev_eq_start_date\nFROM t;"
        },
        {
            "description": "How to get the previous date of start_date when start_date and end_date are the same?",
            "sql": "SELECT t.*,\n       (CASE\n            WHEN start_date = end_date THEN lag(start_date) OVER (PARTITION BY start_date = end_date\n                                                                  ORDER BY start_date)\n        END) AS prev_eq_start_date\nFROM t;"
        },
        {
            "description": "How to retrieve the previous start date for rows with the same start and end date, or NULL otherwise.?",
            "sql": "SELECT t.*,\n       (CASE\n            WHEN start_date = end_date THEN lag(start_date) OVER (PARTITION BY (CASE\n                                                                                    WHEN start_date = end_date THEN 1\n                                                                                    ELSE 2\n                                                                                END), (CASE\n                                                                                           WHEN start_date <> end_date THEN start_date\n                                                                                       END)\n                                                                  ORDER BY start_date)\n        END) AS prev_eq_start_date\nFROM t;"
        },
        {
            "description": "How to determine the content group for users upon joining and subsequent page views within a session?",
            "sql": "SELECT date, fullVisitorId,\n             visitId,\n             STRING_AGG(CASE\n                            WHEN hit.page.pagePath LIKE '%join/complete%' THEN 'join_complete'\n                            ELSE hit.contentGroup.contentGroup1\n                        END , '#'\n                        ORDER BY hit.hitNumber)\nFROM `xxxxx-ga-datasets.xxxx.ga_sessions_*` AS t,\n     UNNEST(hits) AS hit\nWHERE _TABLE_SUFFIX BETWEEN '20190101' AND '20190101'\n  AND hit.type='PAGE'\nGROUP BY 1,\n         2,\n         3\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to retrieve the bad row in the good_lines table?",
            "sql": "SELECT *\nFROM `PROJECT_ID.dataflow_test.good_lines`\nWHERE INDEX='this is a bad row';"
        },
        {
            "description": "How to retrieve any value for column c where column a's occurrences are greater than 1 within each group of column b.?",
            "sql": "SELECT a,\n       b,\n       ANY_VALUE(c) c\nFROM\n  (SELECT b,\n          ARRAY_AGG(STRUCT(a, c)) arr\n   FROM `project.dataset.table`\n   GROUP BY b\n   HAVING COUNT(DISTINCT a) > 1), UNNEST(arr)\nGROUP BY a,\n         b;"
        },
        {
            "description": "How to create a dataset called 'project.dataset.table' and insert sample data into it?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1111 a,\n          'XXXX10' b,\n                   '2019-01-01' c\n   UNION ALL SELECT 1111,\n                    'XXXX10',\n                    '2019-01-02'\n   UNION ALL SELECT 1111,\n                    'XXXX10',\n                    '2019-01-03'\n   UNION ALL SELECT 1111,\n                    'XXXX10',\n                    '2019-01-04'\n   UNION ALL SELECT 2222,\n                    'XXXX11',\n                    '2019-01-01'\n   UNION ALL SELECT 2222,\n                    'XXXX11',\n                    '2019-01-02'\n   UNION ALL SELECT 2222,\n                    'XXXX11',\n                    '2019-01-03'\n   UNION ALL SELECT 3333,\n                    'XXXX12',\n                    '2019-01-01'\n   UNION ALL SELECT 4444,\n                    'XXXX13',\n                    '2019-01-01'\n   UNION ALL SELECT 5555,\n                    'XXXX10',\n                    '2019-01-01'\n   UNION ALL SELECT 6666,\n                    'XXXX11',\n                    '2019-01-03');"
        },
        {
            "description": "How to fetch the start and end time of the current week in CST time?",
            "sql": "SELECT TIMESTAMP(DATE_TRUNC(CURRENT_DATE(), WEEK), 'CST6CDT') AS start_week,\n       TIMESTAMP_SUB(TIMESTAMP(DATE_ADD(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK), 'CST6CDT'), INTERVAL 1 SECOND) AS end_week;"
        },
        {
            "description": "How to retrieve the starting and ending dates of the first week in a given month and year.?",
            "sql": "SELECT DATE_TRUNC(DATE('2019-12-01'), WEEK) AS start_week,\n       DATE_ADD(DATE_TRUNC(DATE('2019-12-01'), WEEK), INTERVAL 6 DAY) AS end_week;"
        },
        {
            "description": "How to retrieve the start and end of the current week in CST6CDT timezone.?",
            "sql": "CREATE TEMP FUNCTION week_boundary(DAY DATE) AS (STRUCT(TIMESTAMP(DATE_TRUNC(DAY, WEEK), 'CST6CDT') AS start_week, TIMESTAMP_SUB(TIMESTAMP(DATE_ADD(DATE_TRUNC(DAY, WEEK), INTERVAL 1 WEEK), 'CST6CDT'), INTERVAL 1 SECOND) AS end_week));\n\nSELECT week_boundary(CURRENT_DATE()).*;"
        },
        {
            "description": "How to retrieve unique dates and corresponding column values from `cols` array in a JOIN?",
            "sql": "SELECT DISTINCT DATE(mytimestamp) mydate,\n                col2,\n                col3\nFROM `project.dataset.table`\nLEFT JOIN UNNEST(cols);"
        },
        {
            "description": "How to retrieve column col2, the array of structs in column cols, and the timestamp stored as a string in column mytimestamp.?",
            "sql": "SELECT col2,\n       cols,\n       STRING(mytimestamp) mytimestamp\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the names and colors of all objects in the table that have multiple accounts associated with them.?",
            "sql": "SELECT ACCOUNT,\n       name,\n       color\nFROM\n  (SELECT name,\n          ARRAY_AGG(STRUCT(ACCOUNT, color)) arr\n   FROM `project.dataset.table`\n   GROUP BY name\n   HAVING COUNT(DISTINCT ACCOUNT) > 1), UNNEST(arr);"
        },
        {
            "description": "How to retrieve the unique combination of account name and color?",
            "sql": "SELECT DISTINCT ACCOUNT,\n                color\nFROM TABLE_NAME;"
        },
        {
            "description": "How to create a BigQuery table with a range partition on customer_id and a bucket width of 10?",
            "sql": "CREATE TABLE `project.dataset.table` PARTITION BY RANGE_BUCKET(customer_id, GENERATE_ARRAY(0, 100, 10)) AS\nSELECT 1 AS customer_id,\n       DATE '2019-10-01' AS DAY;"
        },
        {
            "description": "How to retrieve the names, hole numbers, planned & measured depths for each hole in Frasure Creek Mining.?",
            "sql": "SELECT name,\n       un_holes.Number AS hole_number,\n       un_holes.PlannedDepth.Value AS planned_depth,\n       un_measured.Value AS measured_depth\nFROM reporting.reporting_data_staging\nLEFT JOIN UNNEST (Holes) AS un_holes ON 1=1\nLEFT JOIN UNNEST (un_holes.MeasuredDepths) AS un_measured ON 1=1\nWHERE mineName = 'Frasure Creek Mining';"
        },
        {
            "description": "How to count the number of rows in a table where the sum of two columns is greater than one?",
            "sql": "SELECT IDm,\n       COUNTIF(A + B > 1) qualified_counts\nFROM `project.dataset.table`\nGROUP BY IDm;"
        },
        {
            "description": "How to retrieve all crm_ids from `table` where the _PARTITIONTIME is 'date2' and is also present in `table` with _PARTITIONTIME 'date1'?",
            "sql": "WITH t1 AS\n  (SELECT crm_id AS w1_crm\n   FROM `table`\n   WHERE DATE(_PARTITIONTIME) = \"date1\"),\n     t2 AS\n  (SELECT crm_id\n   FROM `table`\n   WHERE DATE(_PARTITIONTIME) = \"date2\")\nSELECT crm_id\nFROM t2\nINNER JOIN t1 ON w1_crm = crm_id;"
        },
        {
            "description": "How to extract a scalar value from a JSON object using SQL?",
            "sql": "WITH DATA AS\n  (SELECT '{ \"name\" : \"Jakob\", \"age\" : \"6\" }' AS my_json)\nSELECT JSON_EXTRACT_SCALAR(my_json, '$.name') AS name,\n       JSON_EXTRACT_SCALAR(my_json, '$.age') AS age\nFROM DATA;"
        },
        {
            "description": "How to extract a value from a JSON object?",
            "sql": "WITH DATA AS\n  (SELECT '{ \"name\" : \"Jakob\", \"age\" : \"6\" }' AS my_json)\nSELECT JSON_EXTRACT_SCALAR(my_json, '$.name') AS name,\n       JSON_EXTRACT_SCALAR(my_json, '$.age') AS age\nFROM DATA;"
        },
        {
            "description": "How to find the most popular misspelled phrases in a table?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'anderstand' STR\n   UNION ALL SELECT 'anderstan'\n   UNION ALL SELECT 'andersta'\n   UNION ALL SELECT 'anderst'\n   UNION ALL SELECT 'understand'\n   UNION ALL SELECT 'understan'\n   UNION ALL SELECT 'understa'\n   UNION ALL SELECT 'underst'\n   UNION ALL SELECT 'unders'\n   UNION ALL SELECT 'under'\n   UNION ALL SELECT 'understand i'\n   UNION ALL SELECT 'understand i'\n   UNION ALL SELECT 'understand it'\n   UNION ALL SELECT 'understand it'\n   UNION ALL SELECT 'understand it y'\n   UNION ALL SELECT 'understand it ye'\n   UNION ALL SELECT 'understand it yes'\n   UNION ALL SELECT 'understand it yes it'\n   UNION ALL SELECT 'understand it yes it'),\n     TEMP AS\n  (SELECT STR,\n          COUNT(1) `count`\n   FROM `project.dataset.table`\n   GROUP BY STR)\nSELECT STR,\n       `count`\nFROM\n  (SELECT STR,\n          `count`,\n          STARTS_WITH(prev_str, STR)\n   AND ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STR, r' ')) = ARRAY_LENGTH(REGEXP_EXTRACT_ALL(prev_str, r' ')) AS flag\n   FROM\n     (SELECT STR,\n             `count`,\n             LAG(STR) OVER(\n                           ORDER BY STR DESC) AS prev_str\n      FROM TEMP))\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to get unique values across multiple columns?",
            "sql": "SELECT DISTINCT CASE\n                    WHEN STR LIKE '%understand%' THEN 'understand'\n                    WHEN STR LIKE '%anderstand%' THEN 'anderstand'\n                    ELSE 'unknown'\n                END AS STR;"
        },
        {
            "description": "How to retrieve all strings from a table where the string is not a prefix of any of the subsequent strings in the table.?",
            "sql": "WITH TEMP AS\n  (SELECT STR,\n          COUNT(1) `count`\n   FROM `project.dataset.table`\n   GROUP BY STR)\nSELECT STR,\n       `count`\nFROM\n  (SELECT STR,\n          `count`,\n          STARTS_WITH(prev_str, STR)\n   AND ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STR, r' ')) = ARRAY_LENGTH(REGEXP_EXTRACT_ALL(prev_str, r' ')) AS flag\n   FROM\n     (SELECT STR,\n             `count`,\n             LAG(STR) OVER(\n                           ORDER BY STR DESC) AS prev_str\n      FROM TEMP))\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve a list of strings from a table where the string is not preceded by another string in the table?",
            "sql": "SELECT STR\nFROM\n  (SELECT STR,\n          STARTS_WITH(prev_str, STR)\n   AND ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STR, r' ')) = ARRAY_LENGTH(REGEXP_EXTRACT_ALL(prev_str, r' ')) AS flag\n   FROM\n     (SELECT STR,\n             LAG(STR) OVER(\n                           ORDER BY STR DESC) AS prev_str\n      FROM `project.dataset.table`))\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve a list of misspelled words related to 'understand'?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'anderstand' STR\n   UNION ALL SELECT 'anderstan'\n   UNION ALL SELECT 'andersta'\n   UNION ALL SELECT 'anderst'\n   UNION ALL SELECT 'understand' STR\n   UNION ALL SELECT 'understan'\n   UNION ALL SELECT 'understa'\n   UNION ALL SELECT 'underst'\n   UNION ALL SELECT 'unders'\n   UNION ALL SELECT 'under'\n   UNION ALL SELECT 'understand i'\n   UNION ALL SELECT 'understand it'\n   UNION ALL SELECT 'understand it y'\n   UNION ALL SELECT 'understand it ye'\n   UNION ALL SELECT 'understand it yes'\n   UNION ALL SELECT 'understand it yes it')\nSELECT DISTINCT STR\nFROM `project.dataset.table`\nORDER BY STR ASC;"
        },
        {
            "description": "How to identify the unique words in a column with no duplicates?",
            "sql": "SELECT DISTINCT STR\nFROM UNNEST([\"understand it yes it\",\"understand it yes\",\"understand it\",\"understand\",\"anderstand\"]) AS STR;"
        },
        {
            "description": "How to display the results of SELECTing from a table?",
            "sql": "SELECT team,\n       score\nFROM DATA;"
        },
        {
            "description": "How many events occurred for each team's score?",
            "sql": "SELECT score,\n       COUNT(*) AS num_events\nFROM ML.LOGS.EVENTS\nGROUP BY score;"
        },
        {
            "description": "How to retrieve all unique 'str' values from the table, ordered in descending order.?",
            "sql": "SELECT STR\nFROM\n  (SELECT STR,\n          STARTS_WITH(LAG(STR) OVER(\n                                    ORDER BY STR DESC), STR) flag\n   FROM `project.dataset.table`)\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve all unique strings within the provided list of nearly identical strings, but only those in the order in which they originally appear in the list.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'anderstand' STR\n   UNION ALL SELECT 'anderstan'\n   UNION ALL SELECT 'andersta'\n   UNION ALL SELECT 'anderst'\n   UNION ALL SELECT 'understand' STR\n   UNION ALL SELECT 'understan'\n   UNION ALL SELECT 'understa'\n   UNION ALL SELECT 'underst'\n   UNION ALL SELECT 'unders'\n   UNION ALL SELECT 'under')\nSELECT STR\nFROM\n  (SELECT STR,\n          STARTS_WITH(LAG(STR) OVER(\n                                    ORDER BY STR DESC), STR) flag\n   FROM `project.dataset.table`)\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve alternate spelling of a given word using BigQuery Autocomplete.?",
            "sql": "SELECT word\nFROM `bigquery-public-data.samples.shakespeare`\nWHERE word LIKE '%understand%';"
        },
        {
            "description": "How to retrieve a single row of data?",
            "sql": "SELECT AS VALUE ARRAY_AGG(t\n                          ORDER BY DIFF\n                          LIMIT 1)[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY appId,\n         clientId;"
        },
        {
            "description": "How many raids, wins, and entries are there per channel, and what is the overall win rate?",
            "sql": "SELECT r.channel,\n       COUNT(DISTINCT r.id) AS raids,\n       COUNT(DISTINCT w.raid_id) AS wins,\n       COUNT(DISTINCT e.raid_id) AS entries,\n       CAST(COUNT(DISTINCT w.raid_id) AS FLOAT) / COUNT(DISTINCT e.raid_id) AS win_rate\nFROM raid r\nLEFT JOIN entry e ON e.raid_id = r.id\nLEFT JOIN win w ON w.raid_id = r.id\nGROUP BY r.channel;"
        },
        {
            "description": "How to retrieve the data from the specified table in BigQuery, filtering the results to include rows where the value of the \"channel\" column is either \"#antonidas\" or \"#anvilmar\".?",
            "sql": "SELECT *\nFROM `bigquery-public-data.stackoverflow.posts_questions`\nWHERE tags like '%google-bigquery%';"
        },
        {
            "description": "How long was it between previous timestamp and event, in minutes?",
            "sql": "SELECT TIMESTAMP_DIFF(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', prev_time), PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', event_datetime), MINUTE)\nFROM `project.dataset.messages`;"
        },
        {
            "description": "How many rows have an event with a value of 2 in the 'events' array?",
            "sql": "SELECT COUNT(*)\nFROM `project.mydataset.mytable`\nWHERE 2 IN UNNEST(EVENTS);"
        },
        {
            "description": "How to count the number of elements equal to 2 within an array of each row?",
            "sql": "SELECT COUNTIF(2 IN UNNEST(EVENTS))\nFROM `project.mydataset.mytable`;"
        },
        {
            "description": "Retrieve how many visitors did not have category A?",
            "sql": "WITH all_visitors AS\n  (SELECT DISTINCT FullVisitorid\n   FROM `project.dataset.my_table`),\n     eventCategory_As AS\n  (SELECT DISTINCT FullVistorid\n   FROM `project.dataset.my_table`\n   LEFT JOIN unnest(hits) h\n   WHERE h.event.eventCategory = 'A')\nSELECT a.FullVisitorid\nFROM all_visitors a\nLEFT JOIN eventCategory_As b ON a.FullVistiorid = b.FullVisitorid\nWHERE b.FullVisitorid IS NULL;"
        },
        {
            "description": "How to retrieve the checksum of a string.?",
            "sql": "SELECT checksum(\"my_string\") AS checksum;"
        },
        {
            "description": "How to retrieve the states of completed jobs where the type is 'bigquery_resource'?",
            "sql": "SELECT resource.type\nFROM `INFORMATION_SCHEMA.JOBS_V2`\nWHERE protoPayload.serviceData.jobCompletedEvent.job.jobStatus.state = \"DONE\"\n  AND protoPayload.serviceData.jobCompletedEvent.job.jobMetadata.taskType = \"bigquery_resource\"\n  AND severity = \"INFO\";"
        },
        {
            "description": "How to get all rows with columns from multiple sub-query UNNEST results in BigQuery?",
            "sql": "SELECT user_id,\n\n  (SELECT AS STRUCT *\n   FROM UNNEST([a.features]),\n        UNNEST([b.features])) AS features\nFROM `project.dataset.tableA` a\nINNER JOIN `project.dataset.tableB` b USING(user_id);"
        },
        {
            "description": "How to nest rows in a single column?",
            "sql": "WITH `project.dataset.tableA` AS\n  (SELECT 1 user_id,\n          STRUCT(1 AS x, 2 AS y, 3 AS z) features),\n     `project.dataset.tableB` AS\n  (SELECT 1 user_id,\n          STRUCT(1 AS c, 2 AS d) features)\nSELECT user_id,\n\n  (SELECT AS STRUCT *\n   FROM UNNEST([a.features]),\n        UNNEST([b.features])) AS features\nFROM `project.dataset.tableA` a\nINNER JOIN `project.dataset.tableB` b USING(user_id);"
        },
        {
            "description": "How to retrieve a value with column `ValueId` in table `project.dataset.table` and label it as `ValueId`?",
            "sql": "SELECT t.* REPLACE(val AS ValueId)\nFROM `project.dataset.table` t,\n     UNNEST(SPLIT(ValueId)) AS val;"
        },
        {
            "description": "How to retrieve visitor IDs and visit IDs for visitors who viewed a specific page and completed a specific event.?",
            "sql": "WITH unnested AS\n  (SELECT FullVisitorid,\n          Visitid,\n          h.page.pagepath,\n          h.event.eventCategory\n   FROM `dataset.table`\n   LEFT JOIN unnest(hits) h),\n     somepage AS\n  (SELECT FullVisitorid,\n          Visitid\n   FROM unnested\n   WHERE pagepath = 'somepage'\n   GROUP BY 1,\n            2),\n     someevent AS\n  (SELECT FulVisitorid,\n          Visitid\n   FROM unnested\n   WHERE eventCategory = 'someevent'\n   GROUP BY 1,\n            2),\n     joined AS\n  (SELECT FulVisitorid,\n          Visitid\n   FROM somepage\n   INNER JOIN someevent USING(FullVisitorid,\n                              Visitid))\nSELECT *\nFROM joined;"
        },
        {
            "description": "How to retrieve the train number, date, maximum number of wagons, maximum total weight, and maximum total length for each train and date, grouped by train number and date.?",
            "sql": "WITH TEMP AS\n  (SELECT train_no,\n          dt,\n          MIN(startpoint) startpoint,\n          MAX(endpoint) endpoint\n   FROM `project.dataset.table`\n   GROUP BY train_no,\n            dt)\nSELECT train_no,\n       dt,\n       MAX(wagons) max_wagons,\n       MAX(total_weight) AS max_total_weight,\n       MAX(total_len) max_total_len\nFROM\n  (SELECT train_no,\n          dt,\n          POINT,\n          COUNT(wagon_no) wagons,\n          SUM(weight) total_weight,\n          SUM(LEN) total_len\n   FROM TEMP,\n        UNNEST(GENERATE_ARRAY(startpoint, endpoint)) POINT\n   LEFT JOIN `project.dataset.table` t USING(train_no,\n                                             dt)\n   WHERE POINT >= t.startpoint\n     AND POINT < t.endpoint\n   GROUP BY train_no,\n            dt,\n            POINT)\nGROUP BY train_no,\n         dt;"
        },
        {
            "description": "How to find the train that carried the maximum load and length of all the wagons in a given date range?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 train_no,\n          123 wagon_no,\n          1000 weight,\n          20 LEN,\n             '20190101' dt,\n                        0 startpoint,\n                        7 endpoint\n   UNION ALL SELECT 1,\n                    234,\n                    2000,\n                    20,\n                    '20190101',\n                    1,\n                    2\n   UNION ALL SELECT 1,\n                    345,\n                    3000,\n                    30,\n                    '20190101',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    456,\n                    1000,\n                    40,\n                    '20190101',\n                    1,\n                    6\n   UNION ALL SELECT 2,\n                    987,\n                    1000,\n                    10,\n                    '20190101',\n                    0,\n                    8\n   UNION ALL SELECT 2,\n                    876,\n                    2000,\n                    20,\n                    '20190101',\n                    1,\n                    2\n   UNION ALL SELECT 2,\n                    765,\n                    3000,\n                    20,\n                    '20190101',\n                    1,\n                    5\n   UNION ALL SELECT 2,\n                    654,\n                    1000,\n                    20,\n                    '20190101',\n                    1,\n                    6),\n     TEMP AS\n  (SELECT train_no,\n          dt,\n          MIN(startpoint) startpoint,\n          MAX(endpoint) endpoint\n   FROM `project.dataset.table`\n   GROUP BY train_no,\n            dt)\nSELECT train_no,\n       dt,\n       MAX(wagons) max_wagons,\n       MAX(total_weight) AS max_total_weight,\n       MAX(total_len) max_total_len\nFROM\n  (SELECT train_no,\n          dt,\n          POINT,\n          COUNT(wagon_no) wagons,\n          SUM(weight) total_weight,\n          SUM(LEN) total_len\n   FROM TEMP,\n        UNNEST(GENERATE_ARRAY(startpoint, endpoint)) POINT\n   LEFT JOIN `project.dataset.table` t USING(train_no,\n                                             dt)\n   WHERE POINT >= t.startpoint\n     AND POINT < t.endpoint\n   GROUP BY train_no,\n            dt,\n            POINT)\nGROUP BY train_no,\n         dt;"
        },
        {
            "description": "How to retrieve the maximum number wagons, total weight, and total length of two trains?",
            "sql": "SELECT train_no,\n       dt,\n       MAX(max_wagons),\n       MAX(max_total_weight),\n       MAX(max_total_len)\nFROM ROW\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How to retrieve rows based on a filter that compares the date component of a timestamp column to values in an array of dates.?",
            "sql": "SELECT *\nFROM your_table_name\nWHERE DATE(my_time) IN\n    (SELECT d\n     FROM UNNEST(date_array) AS d);"
        },
        {
            "description": "How to retrieve the start and end times of intervals where the value of a given column changes.?",
            "sql": "WITH DATA AS\n  (SELECT 'abc' AS Value1,\n          123 AS Value2,\n          1 AS start_time,\n          2 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    2 AS start_time,\n                    3 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    3 AS start_time,\n                    4 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    4 AS start_time,\n                    5 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    5 AS start_time,\n                    6 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    6 AS start_time,\n                    7 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    7 AS start_time,\n                    8 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    8 AS start_time,\n                    9 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    9 AS start_time,\n                    10 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    10 AS start_time,\n                    11 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    11 AS start_time,\n                    12 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    12 AS start_time,\n                    13 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    13 AS start_time,\n                    14 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    14 AS start_time,\n                    15 AS end_time), delta AS\n  (SELECT *,\n          CASE\n              WHEN Value2 != lag(Value2) OVER (PARTITION BY Value1\n                                               ORDER BY start_time) THEN 1\n              ELSE 0\n          END AS value_changed\n   FROM DATA),\n                                     changes AS\n  (SELECT Value1,\n          Value2,\n          start_time,\n          end_time,\n          sum(value_changed) OVER (PARTITION BY Value1\n                                   ORDER BY start_time) AS change_index\n   FROM delta)\nSELECT Value1,\n       Value2,\n       change_index,\n       min(start_time) AS start_time,\n       max(end_time) AS end_time\nFROM changes\nGROUP BY Value1,\n         Value2,\n         change_index;"
        },
        {
            "description": "How to retrieve the average number of rows per day for rows in a table where the date is between a given range.?",
            "sql": "SELECT AVG(Num_Rows) AS avg_rows_per_day\nFROM\n  (SELECT DATE(Published_Date) AS DAY,\n          COUNT(*) AS Num_Rows\n   FROM `project.dataset.mytable`\n   WHERE DATE(Published_Date) BETWEEN '2019-07-01' AND '2019-07-31'\n   GROUP BY DAY);"
        },
        {
            "description": "How to retrieve stats for different players on different teams, where each row represents a particular stat for a player.?",
            "sql": "SELECT *\nFROM\n  (SELECT 'joe' name,\n                'bills' team,\n                        FALSE AS is_o,\n                                 7 AS stat1,\n                                 95 AS stat1_pctile,\n                                 9 AS stat2,\n                                 82 AS stat2_pctile),\n  (SELECT 'joe' name,\n                'bills' team,\n                        TRUE AS is_o,\n                                1 AS stat1,\n                                37 AS stat1_pctile,\n                                2 AS stat3,\n                                17 AS stat3_pctile),\n  (SELECT 'tim' name,\n                'jets' team,\n                       FALSE AS is_o,\n                                12 AS stat2,\n                                85 AS stat2_pctile,\n                                13 AS stat3,\n                                69 AS stat3_pctile);"
        },
        {
            "description": "How to how to pull the top 10 total number of articles titled 'Abe' viewed on the Spanish Wikipedia between September 1st and 10th, 2019? Group by the view date.?",
            "sql": "WITH DATA AS\n  (SELECT *\n   FROM `bigquery-public-data.wikipedia.pageviews_2019`\n   WHERE DATE(datehour) BETWEEN \"2019-09-01\" AND \"2019-09-10\"\n     AND wiki = 'es'\n     AND title LIKE 'Abe%'\n     AND VIEWS > 10)\nSELECT first_day,\n       COUNT(*) c,\n       STRING_AGG(title\n                  LIMIT 10) new_items\nFROM\n  (SELECT title,\n          TIMESTAMP_TRUNC(MIN(datehour), DAY) first_day\n   FROM DATA\n   GROUP BY title)\nGROUP BY first_day\nORDER BY first_day;"
        },
        {
            "description": "How to retrieve the number of days since the last positive value and the timestamp of that last positive value for each customer.?",
            "sql": "WITH last_positive AS\n  (SELECT customer_id,\n          ARRAY_AGG(`timestamp`\n                    ORDER BY `timestamp` DESC\n                    LIMIT 1)[OFFSET(0)] `timestamp`\n   FROM `project.dataset.table`\n   WHERE value >= 0\n   GROUP BY customer_id),\n     last_any AS\n  (SELECT customer_id,\n          MAX(`timestamp`) `timestamp`\n   FROM `project.dataset.table`\n   GROUP BY customer_id)\nSELECT customer_id,\n       DATE_DIFF(a.timestamp, b.timestamp, DAY) days_since,\n       DATE_ADD(b.timestamp, INTERVAL 1 DAY) `timestamp`\nFROM last_any a\nJOIN last_positive b USING(customer_id)\nWHERE a.timestamp > b.timestamp;"
        },
        {
            "description": "How to retrieve the number of days since the last positive value for each customer.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 id,\n          1 customer_id,\n          -200 value, DATE '2019-11-18' `timestamp`\n   UNION ALL SELECT 2,\n                    1,\n                    100,\n                    '2019-11-17'\n   UNION ALL SELECT 3,\n                    1,\n                    -500,\n                    '2019-11-16'\n   UNION ALL SELECT 4,\n                    1,\n                    -200,\n                    '2019-11-15'\n   UNION ALL SELECT 5,\n                    2,\n                    200,\n                    '2019-11-15'\n   UNION ALL SELECT 6,\n                    1,\n                    0,\n                    '2019-11-14'),\n     last_positive AS\n  (SELECT customer_id,\n          ARRAY_AGG(`timestamp`\n                    ORDER BY `timestamp` DESC\n                    LIMIT 1)[OFFSET(0)] `timestamp`\n   FROM `project.dataset.table`\n   WHERE value >= 0\n   GROUP BY customer_id),\n     last_any AS\n  (SELECT customer_id,\n          MAX(`timestamp`) `timestamp`\n   FROM `project.dataset.table`\n   GROUP BY customer_id)\nSELECT customer_id,\n       DATE_DIFF(a.timestamp, b.timestamp, DAY) days_since,\n       DATE_ADD(b.timestamp, INTERVAL 1 DAY) `timestamp`\nFROM last_any a\nJOIN last_positive b USING(customer_id)\nWHERE a.timestamp > b.timestamp;"
        },
        {
            "description": "How to retrieve days since by customer ID.?",
            "sql": "SELECT customer_id,\n       days_since, timestamp\nFROM `bigquery-public-data.utility_us.country_code_iso`\nWHERE customer_id IN (1);"
        },
        {
            "description": "How to select from two separate tables using a cross join?",
            "sql": "SELECT origin,\n       d.destination,\n       v.visitors\nFROM dataset.table t\nCROSS JOIN UNNEST(struct.destination) s WITH\nOFFSET nd\nLEFT JOIN UNNEST(struct.visitors) v WITH\nOFFSET nv ON nd = nv;"
        },
        {
            "description": "How to find the number of orders placed by each customer, the date of their first order, and the revenue from their first and second orders?",
            "sql": "SELECT customer_id,\n       COUNT(*) num_orders,\n       MIN(order_date) first_order_date,\n       MAX(CASE\n               WHEN seqnum = 1 THEN revenue\n           END) AS revenue_1,\n       MAX(CASE\n               WHEN seqnum = 2 THEN revenue\n           END) AS revenue_2\nFROM\n  (SELECT o.*,\n          ROW_NUMBER() OVER (PARTITION BY customer_id\n                             ORDER BY order_date) AS seqnum\n   FROM `orders` o) o\nGROUP BY customer_id;"
        },
        {
            "description": "How do I find all distinct customers and, for each customer, retrieve the number of orders placed, their first order date, and the first and second highest revenue-generating orders?",
            "sql": "SELECT customer_id,\n       COUNT(*) num_orders,\n       MIN(order_date) first_order_date,\n       ARRAY_AGG(revenue\n                 ORDER BY order_date\n                 LIMIT 2) AS revenue_1_2\nFROM `orders` o\nGROUP BY customer_id;"
        },
        {
            "description": "How to how to retrieve device states from the 'gbl-imt-homerider-basguillaueb.bi_data' dataset?",
            "sql": "SELECT *\nFROM `gbl-imt-homerider-basguillaueb.bi_data.device_states`;"
        },
        {
            "description": "How to retrieve the string 40123456 by removing the leading sequence of characters '0039p' from the string '0039p40123456'.?",
            "sql": "SELECT LTRIM(\"0039p40123456\", \"p039\");"
        },
        {
            "description": "How to retrieve a list of events with a column of concatenated route values, sorted by another column.?",
            "sql": "SELECT *,\n       STRING_AGG(route) OVER(\n                              ORDER BY TIME) journey\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve a journey path from a list of timestamps and corresponding routes?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT TIME '11:03:01' TIME,\n                          'home' route\n   UNION ALL SELECT '11:03:04',\n                    'category'\n   UNION ALL SELECT '11:03:10',\n                    'product'\n   UNION ALL SELECT '11:03:21',\n                    'cart')\nSELECT *,\n       STRING_AGG(route) OVER(\n                              ORDER BY TIME) journey\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the customer journey path?",
            "sql": "SELECT TIME,\n       route,\n       journey\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions`_\nWHERE CONTAINS(route, 'home')\nORDER BY TIME;"
        },
        {
            "description": "How to retrieve counts from BigQuery?",
            "sql": "SELECT COUNT(*)\nFROM my_table;"
        },
        {
            "description": "How to generate a uniform random date within a given range for a specified number of IDs?",
            "sql": "WITH PARAMETERS AS\n  (SELECT 100 ids_count, DATE '2010-01-01' start_date, DATE '2020-12-31' finish_date)\nSELECT id,\n       DATE_FROM_UNIX_DATE(CAST\n                             (START +\n                                (finish - START) * RAND() AS INT64)) random_date\nFROM PARAMETERS,\n     UNNEST(GENERATE_ARRAY(1, ids_count)) id,\n     UNNEST([STRUCT(UNIX_DATE(start_date) AS start, UNIX_DATE(finish_date) AS finish)]);"
        },
        {
            "description": "How to how to retrieve all categories that are either a direct child or a subchild of a given category.?",
            "sql": "SELECT cc.*\nFROM `project.dataset.categories` c\nCROSS JOIN unnest(array[id, parent_id]) c_id\nLEFT JOIN categories cc ON cc.id = c_id;"
        },
        {
            "description": "How to retrieve categories with ID 2106 or that have 2016 as a child category.?",
            "sql": "SELECT c.*\nFROM `project.dataset.categories` c\nWHERE c.id = 2106\n  OR EXISTS\n    (SELECT 1\n     FROM `project.dataset.categories` c2\n     WHERE c2.id = 2016\n       AND c2.parentid = c.id);"
        },
        {
            "description": "How to retrieve the most recently assigned owner ID and date for a given timestamp, and the last modification date for each timestamp.?",
            "sql": "SELECT timestamp, COALESCE(owner_id, last_value(owner_id\n                                                IGNORE nulls) OVER (\n                                                                    ORDER BY timestamp)) AS owner_id,\n                  COALESCE(owner_assigneddate, LAST_VALUE(owner_assigneddate\n                                                          IGNORE NULLS) OVER (\n                                                                              ORDER BY TIMESTAMP)) AS owner_assigneddate,\n                  COALESCE(lastmodifieddate, LAST_VALUE(lastmodifieddate\n                                                        IGNORE NULLS) OVER (\n                                                                            ORDER BY TIMESTAMP)) AS lastmodifieddate\nFROM cte\nORDER BY timestamp ASC;"
        },
        {
            "description": "How to how to retrieve hit data for users who have visited page 22 at least once, have visited page 13 more than 0 times, and have either not visited page 22 or have visited page 22.?",
            "sql": "SELECT h.*\nFROM\n  (SELECT h.*,\n          countif(page like '%/page_13') OVER (PARTITION BY USER\n                                               ORDER BY hit_time) AS hit_13,\n          countif(page like '%/page_22') OVER (PARTITION BY USER\n                                               ORDER BY hit_time) AS hit_22,\n          countif(page like '%/page_22') OVER (PARTITION BY USER) AS has_22\n   FROM hits h) h\nWHERE has_22\n  AND hit_13 > 0\n  AND (hit_22 = 0\n       OR page like '%/page_22);"
        },
        {
            "description": "How to retrieve all user paths that include both /page_13 and /page_22?",
            "sql": "SELECT h.user,\n       string_agg(page\n                  ORDER BY hit_time, ' -> ')\nFROM\n  (SELECT h.*\n   FROM\n     (SELECT h.*,\n             countif(page like '%/page_13') OVER (PARTITION BY USER\n                                                  ORDER BY hit_time) AS hit_13,\n             countif(page like '%/page_22') OVER (PARTITION BY USER\n                                                  ORDER BY hit_time) AS hit_22,\n             countif(page like '%/page_22') OVER (PARTITION BY USER) AS has_22\n      FROM hits h) h\n   WHERE has_22\n     AND hit_13 > 0\n     AND (hit_22 = 0\n          OR page like '%/page_22)) h\nGROUP BY USER;"
        },
        {
            "description": "How to retrieve the window numbers for each spend_date_id based on the spend_date_id gaps being greater than 200 days.?",
            "sql": "CREATE TEMP FUNCTION splits(arr ARRAY<INT64>, SIZE INT64) RETURNS ARRAY<INT64> LANGUAGE js AS \"\"\"    var cut = parseInt(arr[0]) + parseInt(size);    var result = [arr[0]];    for(i=1; i<arr.length; i++){      if (arr[i] >= cut) {        result.push(arr[i]);         cut = parseInt(arr[i]) + parseInt(size);        }    };    return result;  \"\"\";\n\nWITH dirty_split AS\n  (SELECT spend_date_id,\n          COUNTIF(flag) OVER(\n                             ORDER BY spend_date_id) new_big_window\n   FROM\n     (SELECT spend_date_id,\n             spend_date_id - LAG(spend_date_id) OVER(\n                                                     ORDER BY spend_date_id) > 200 flag\n      FROM `project.dataset.table`)),\n     precise_split AS\n  (SELECT new_big_window,\n          splits(ARRAY_AGG(spend_date_id), 200) splits\n   FROM dirty_split\n   GROUP BY new_big_window),\n     numbering AS\n  (SELECT new_big_window,\n          val,\n          ROW_NUMBER() OVER(\n                            ORDER BY new_big_window, val) - 1 AS active_window\n   FROM precise_split,\n        UNNEST(splits) val)\nSELECT spend_date_id,\n       active_window\nFROM `project.dataset.table` t\nJOIN numbering n ON t.spend_date_id BETWEEN n.val AND n.val + 200 - 1;"
        },
        {
            "description": "How to split time series data into chunks of fixed time?",
            "sql": "CREATE TEMP FUNCTION splits(arr ARRAY<INT64>, SIZE INT64) RETURNS ARRAY<INT64> LANGUAGE js AS \"\"\"    var cut = parseInt(arr[0]) + parseInt(size);    var result = [arr[0]];    for(i=1; i<arr.length; i++){      if (arr[i] >= cut) {        result.push(arr[i]);         cut = parseInt(arr[i]) + parseInt(size);        }    };    return result;  \"\"\";\n\nWITH `project.dataset.table` AS\n  (SELECT *\n   FROM UNNEST([0,350,450,500,550,650,700]) AS spend_date_id),\n     dirty_split AS\n  (SELECT spend_date_id,\n          COUNTIF(flag) OVER(\n                             ORDER BY spend_date_id) new_big_window\n   FROM\n     (SELECT spend_date_id,\n             spend_date_id - LAG(spend_date_id) OVER(\n                                                     ORDER BY spend_date_id) > 200 flag\n      FROM `project.dataset.table`)),\n     precise_split AS\n  (SELECT new_big_window,\n          splits(ARRAY_AGG(spend_date_id), 200) splits\n   FROM dirty_split\n   GROUP BY new_big_window),\n     numbering AS\n  (SELECT new_big_window,\n          val,\n          ROW_NUMBER() OVER(\n                            ORDER BY new_big_window, val) - 1 AS active_window\n   FROM precise_split,\n        UNNEST(splits) val)\nSELECT spend_date_id,\n       active_window\nFROM `project.dataset.table` t\nJOIN numbering n ON t.spend_date_id BETWEEN n.val AND n.val + 200 - 1\nORDER BY spend_date_id;"
        },
        {
            "description": "How to retrieve distinct active windows for a given spend date ID.?",
            "sql": "SELECT DISTINCT active_window\nFROM spend_dates;"
        },
        {
            "description": "How to retrieve the repo names from the first 100 commits in the public GitHub repos dataset?",
            "sql": "SELECT repo_name\nFROM `bigquery-public-data.github_repos.commits`\nLIMIT 100;"
        },
        {
            "description": "How to retrieve a list of unique repository names from the commits table?",
            "sql": "SELECT DISTINCT(repo_name_unnest)\nFROM `bigquery-public-data.github_repos.commits`\nCROSS JOIN UNNEST(repo_name) AS repo_name_unnest;"
        },
        {
            "description": "How to retrieve data from a JSON string formatted as '[['item1',quantity,unit_price],...]' using UNNEST and SPLIT.?",
            "sql": "WITH TABLE AS\n  (SELECT 1 AS ID,\n          '[[item1,2,1.99],[item2,1,4.99]]' AS DATA\n   UNION ALL SELECT 2 AS ID,\n                    '[[item1,2,1.99]]' AS DATA)\nSELECT ID id,\n       SPLIT(A, ',')[OFFSET(0)] AS A,\n       SPLIT(A, ',')[OFFSET(1)] AS B,\n       SPLIT(A, ',')[OFFSET(2)] AS C\nFROM TABLE t,\n           UNNEST(SPLIT(SUBSTR(DATA, 3, LENGTH(DATA) - 4), '],[')) A;"
        },
        {
            "description": "How to retrieve an ARRAY of the values in the 'my_column' column.?",
            "sql": "SELECT ARRAY\n  (SELECT value\n   FROM t.my_column) AS my_column_values\nFROM `project.dataset.my_table` t;"
        },
        {
            "description": "How to retrieve a list of values from a specific array-type column?",
            "sql": "SELECT\n  (SELECT ARRAY_AGG(value)\n   FROM t.my_column) my_column_values\nFROM `project.dataset.my_table` t;"
        },
        {
            "description": "How to retrieve an array with a range of consecutive numbers based on min and max values?",
            "sql": "SELECT tt\nFROM\n  (SELECT MIN(t.num) AS min_num,\n          MAX(t.num) AS max_num\n   FROM t) t\nCROSS JOIN UNNEST(GENERATE_ARRAY(t.min_num, t.max_num)) tt;"
        },
        {
            "description": "How to retrieve all rows from table `t` where the `type` is `A` and there is a row with `type` B after the current row within a window of unbounded rows.?",
            "sql": "WITH t (id, TYPE, orderdate) AS\n  (SELECT 1 ,\n          'A' , date '2019-03-01'\n   UNION SELECT 2 ,\n                'B' , date '2019-03-04'\n   UNION SELECT 3 ,\n                'B' , date '2019-03-04'\n   UNION SELECT 4 ,\n                'A' , date '2019-03-05'\n   UNION SELECT 5 ,\n                'A' , date '2019-03-06'\n   UNION SELECT 6 ,\n                'B' , date '2019-04-05')\nSELECT t.*\nFROM\n  (SELECT t.*,\n          min(CASE\n                  WHEN TYPE = 'B' THEN orderdate\n              END) OVER (\n                         ORDER BY orderdate ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS next_b_orderdate\n   FROM t) t\nWHERE TYPE = 'A';"
        },
        {
            "description": "How to retrieve all the orders placed between 2019-01-01 and 2019-02-01 with a total price greater than 100, and grouped by contact_email and billing_address.?",
            "sql": "SELECT o.*\nFROM\n  (SELECT o.*,\n          min(processed_at) over(PARTITION BY contact_email, billing_address) min_processed_at,\n                            sum(total_price) over(PARTITION BY contact_email, billing_address) sum_total_price\n   FROM\n     (SELECT o.*,\n             row_number() over(PARTITION BY id) INSTANCE\n      FROM orders o) o\n   WHERE INSTANCE = 1) o\nWHERE processed_at BETWEEN '2019-01-01 00:00:00 UTC' AND '2019-02-01 00:00:00 UTC'\n  AND sum_total_price > 100;"
        },
        {
            "description": "How to round a TIMESTAMP with MILLISECOND precision to the nearest second?",
            "sql": "SELECT TIMESTAMP_TRUNC(TIMESTAMP_ADD(ingest_time, INTERVAL 500 MILLISECOND), SECOND)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the rounded timestamp value to the nearest second and add 500 milliseconds to the original timestamp.?",
            "sql": "SELECT TIMESTAMP_TRUNC(TIMESTAMP_ADD(ingest_time, INTERVAL 500 MILLISECOND), SECOND)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to group data and perform calculations within those groups in ranges?",
            "sql": "SELECT cast(x/10 AS int64) AS bucket,\n       min(x) AS min_x,\n       max(x) AS max_x\nFROM unnest(generate_array(1, 1000, 1)) x\nGROUP BY 1;"
        },
        {
            "description": "How to create a new table named 'newtable' with two columns: 'name' (STRING) and 'info' (ARRAY of STRUCTs)?",
            "sql": "CREATE TABLE dataset.newtable (name STRING, info ARRAY<STRUCT<KEY STRING, value FLOAT64>>);"
        },
        {
            "description": "How to insert a new row into a table with a STRUCT type column?",
            "sql": "INSERT dataset.newtable\nVALUES ('John', [('a', 0.7), ('b', 0.8), ('c', 1.2)]);"
        },
        {
            "description": "How to create a new table with a name, struct info, and string and float64 data types?",
            "sql": "CREATE TABLE dataset.newtable AS\nSELECT 'John' AS name,\n       [STRUCT<key STRING, value FLOAT64>('a', 0.7), ('b', 0.8), ('c', 1.2)] info;"
        },
        {
            "description": "How to retrieve the sum of gross and net values for each product in a nested array, excluding voided products?",
            "sql": "SELECT *,\n  (SELECT AS STRUCT SUM(gross) gross,\n                    SUM(net) net\n   FROM UNNEST(product)\n   WHERE NOT isVoided).*\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve a nested STRUCT array from a table where the DWHKey is not null.?",
            "sql": "WITH DATA AS\n  (SELECT '2019-1-1' CreateDate,\n                     [struct<DWHKey string, LineNumber int64>('hasKey', 1), (null, null)] product\n   UNION ALL SELECT '2019-1-2',\n                    [struct<DWHKey string, LineNumber int64>(null, null), (null, null), (null, null)]\n   UNION ALL SELECT '2019-1-2',\n                    [struct<DWHKey string, LineNumber int64>('hasKey', 1), (null, null), ('hasKey', 1), (null, null)])\nSELECT *\nREPLACE (array\n           (SELECT AS struct *\n            FROM unnest(product)\n            WHERE DWHKey IS NOT NULL) AS product)\nFROM DATA;"
        },
        {
            "description": "How to retrieve rows with empty `product`?",
            "sql": "SELECT *\nFROM t1\nWHERE product = ARRAY[];"
        },
        {
            "description": "How to replace the value_pctile with its complement when is_o is true, otherwise leave it unchanged?",
            "sql": "SELECT * REPLACE(IF(is_o, 100 - value_pctile, value_pctile) AS value_pctile)\nFROM flattened_table;"
        },
        {
            "description": "How to find rows where the start and end date of a time period in one table overlaps with specific dates stored in another table?",
            "sql": "SELECT *\nFROM your_table_name\nWHERE SAFE.PARSE_DATE('%Y-%m-%d', Master.Date) BETWEEN SAFE.PARSE_DATE('%m/%d/%y', Platforms.StartDate) AND SAFE.PARSE_DATE('%m/%d/%y', Platforms.EndDate);"
        },
        {
            "description": "How to retrieve the substring after the 'MOB_' string.?",
            "sql": "SELECT SUBSTRING(your_field, LOCATE('MOB_', your_field)+4)\nFROM your_table;"
        },
        {
            "description": "How to retrieve the text after the 'MOB_' substring in the 'your_field' column.?",
            "sql": "SELECT REGEXP_SUBSTR(your_field, '(?<=MOB_).*$')\nFROM your_table;"
        },
        {
            "description": "How to retrieve the characters after 'MOB_' in your_field.?",
            "sql": "SELECT substr(regexp_substr(your_field, 'MOB_(.*)'), 5) \"result\"\nFROM your_table;"
        },
        {
            "description": "How to retrieve the value following the string sequence 'MOB_' in the specified field?",
            "sql": "SELECT regexp_substr(your_field, 'MOB_(.*)', 1, 1, NULL, 1) \"result\"\nFROM your_table;"
        },
        {
            "description": "How to retrieve the timestamp truncated to the second.?",
            "sql": "SELECT TIMESTAMP_TRUNC('2019-11-11 19:10:57.181 UTC', SECOND) AS truncated_timestamp;"
        },
        {
            "description": "How to retrieve the contact emails from a table of orders where the instance is 1 and the processed_at column falls between 2018-01-01 and 2020-01-01, and also group the results by contact_email and only retrieve the ones that have processed_at values in at least two distinct years?",
            "sql": "SELECT o.contact_email\nFROM `table.orders o`\nWHERE INSTANCE = 1\n  AND processed_at >= timestamp('2018-01-01')\n  AND processed_at < timestamp('2020-01-01')\nGROUP BY o.contact_email\nHAVING count(DISTINCT year(processed_at)) = 2;"
        },
        {
            "description": "How much did Topshop/Topman spend on creatives with 'TS\\_AW19' in their name on September 20th, 2019?",
            "sql": "SELECT date, creative_name,\n             SUM(revenue)*2 AS spend\nFROM `crate-media-group-client-data.DV360_ALL.GGLDV360BM_CREATIVE_*`\nWHERE advertiser LIKE '%Topshop/Topman%'\n  AND creative_name LIKE '%TS\\_AW19%'\n  AND date = '2019-09-20'\nGROUP BY 1,\n         2\nORDER BY creative_name;"
        },
        {
            "description": "How to count the number of rows in a table where a given column matches a regular expression?",
            "sql": "WITH DATA AS\n  (SELECT 'abc' text)\nSELECT COUNT(*) c\nFROM DATA\nWHERE REGEXP_CONTAINS(text, '(?i)(a|b|c)');"
        },
        {
            "description": "How to perform a case-insensitive regular expression match in BigQuery?",
            "sql": "WITH DATA AS\n  (SELECT 'abc' text)\nSELECT COUNT(*) c\nFROM DATA\nWHERE REGEXP_CONTAINS(text, '(?i)(a)');"
        },
        {
            "description": "How to retrieve details regarding employees and project-related information, where employee dates fall within specific project start and end dates.?",
            "sql": "WITH `bigquery-project-123.emp` AS\n  (SELECT 1 EmpNo,\n          'IT101' EmpITPrj,\n                  NULL EmpFinPrj,\n                       NULL EmpHRPrj,\n                            NULL EmpIntPrj,\n                                 '2019-09-01' EmpDate\n   UNION ALL SELECT 2,\n                    NULL,\n                    'Fin101',\n                    NULL,\n                    NULL,\n                    '2001-06-05'\n   UNION ALL SELECT 3,\n                    NULL,\n                    'Fin102',\n                    NULL,\n                    NULL,\n                    '2005-11-25'\n   UNION ALL SELECT 4,\n                    NULL,\n                    NULL,\n                    NULL,\n                    'Int501',\n                    '2010-10-15'\n   UNION ALL SELECT 5,\n                    NULL,\n                    NULL,\n                    NULL,\n                    'Int105',\n                    '2019-01-10'\n   UNION ALL SELECT 6,\n                    NULL,\n                    NULL,\n                    NULL,\n                    'Int444',\n                    '2015-12-03'\n   UNION ALL SELECT 7,\n                    NULL,\n                    NULL,\n                    'HR110',\n                    NULL,\n                    '2012-08-19'\n   UNION ALL SELECT 8,\n                    'IT101',\n                    NULL,\n                    NULL,\n                    NULL,\n                    '2011-04-24'\n   UNION ALL SELECT 9,\n                    NULL,\n                    NULL,\n                    'HR105',\n                    NULL,\n                    '2005-02-09'\n   UNION ALL SELECT 10,\n                    'IT102',\n                    NULL,\n                    NULL,\n                    NULL,\n                    '2006-07-11'),\n     `bigquery-project-123.prj` AS\n  (SELECT 'Fin102' PrjID,\n                   '10/14/2005' PrjStartDate,\n                                '12/14/2005' PrjEndDate\n   UNION ALL SELECT 'IT102',\n                    '07/11/2006',\n                    '10/30/2006'\n   UNION ALL SELECT 'IT110',\n                    '11/15/2010',\n                    '01/31/2011'\n   UNION ALL SELECT 'Int101',\n                    '01/01/2015',\n                    '03/31/2015'\n   UNION ALL SELECT 'HR110',\n                    '05/19/2012',\n                    '08/19/2012'\n   UNION ALL SELECT 'Int444',\n                    '01/01/2015',\n                    '03/01/2015')\nSELECT *\nFROM `bigquery-project-123.emp` AS t1\nJOIN `bigquery-project-123.prj` t2 ON t2.PrjID IN (t1.EmpITPrj,\n                                                   t1.EmpFinPrj,\n                                                   t1.EmpHRPrj,\n                                                   t1.EmpIntPrj)\nAND SAFE.PARSE_DATE(\"%Y-%m-%d\", t1.EmpDate) BETWEEN SAFE.PARSE_DATE(\"%m/%d/%Y\", t2.PrjStartDate) AND SAFE.PARSE_DATE(\"%m/%d/%Y\", t2.PrjEndDate);"
        },
        {
            "description": "How to how to retrieve distinct project IDs (with no duplicates):?",
            "sql": "WITH EmployeeProjects AS\n  (SELECT EmpNo,\n          EmpITPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpITPrj IS NOT NULL\n   UNION ALL SELECT EmpNo,\n                    EmpFinPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpFinPrj IS NOT NULL\n   UNION ALL SELECT EmpNo,\n                    EmpHRPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpHRPrj IS NOT NULL\n   UNION ALL SELECT EmpNo,\n                    EmpIntPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpIntPrj IS NOT NULL)\nSELECT DISTINCT ProjectName\nFROM EmployeeProjects;"
        },
        {
            "description": "How to rank records in BigQuery based on specific criteria?",
            "sql": "WITH correct_games_played AS\n  (SELECT \"a\" AS name,\n          7 AS num1,\n          0.4 AS num2,\n          0.55 AS num3\n   UNION ALL SELECT \"b\" AS name,\n                    13 AS num1,\n                    0.53 AS num2,\n                    0.37 AS num3\n   UNION ALL SELECT \"c\" AS name,\n                    4 AS num1,\n                    0.42 AS num2,\n                    0.32 AS num3\n   UNION ALL SELECT \"d\" AS name,\n                    17 AS num1,\n                    0.6 AS num2,\n                    0.23 AS num3\n   UNION ALL SELECT \"e\" AS name,\n                    7 AS num1,\n                    0.3 AS num2,\n                    0.25 AS num3\n   UNION ALL SELECT \"f\" AS name,\n                    16 AS num1,\n                    0.7 AS num2,\n                    0.43 AS num3\n   UNION ALL SELECT \"g\" AS name,\n                    10 AS num1,\n                    0.53 AS num2,\n                    0.52 AS num3\n   UNION ALL SELECT \"h\" AS name,\n                    5 AS num1,\n                    0.54 AS num2,\n                    0.21 AS num3\n   UNION ALL SELECT \"i\" AS name,\n                    9 AS num1,\n                    0.56 AS num2,\n                    0.17 AS num3\n   UNION ALL SELECT \"j\" AS name,\n                    3 AS num1,\n                    0.75 AS num2,\n                    0.53 AS num3)\nSELECT *,\n       RANK() OVER(\n                   ORDER BY num1 DESC) AS num1_rank,\n       IF(num1 > 4, RANK() OVER(\n                                ORDER BY IF(num1 > 4, num2, NULL) DESC), NULL) AS num2_rank,\n       IF(num1 > 3, RANK() OVER(\n                                ORDER BY IF(num1 > 3, num3, NULL) DESC), NULL) AS num3_rank\nFROM correct_games_played;"
        },
        {
            "description": "How to retrieve records by key.?",
            "sql": "SELECT *\nFROM UNNEST(user_id_json_string) AS json_string;"
        },
        {
            "description": "How to calculate the field goal percentage for each player within a subquery where the field goal attempts are nested in a separate struct?",
            "sql": "WITH wide_stats AS\n  (SELECT 'joe' name,\n                'bills' team,\n                        STRUCT(STRUCT(7 AS fga, 5 AS fgm) AS o, STRUCT(8 AS fga, 3 AS fgm) AS d) AS t1,\n                        STRUCT(STRUCT(3 AS fga, 4 AS fgm) AS o, STRUCT(9 AS fga, 2 AS fgm) AS d) AS t2\n   UNION ALL SELECT 'nick' name,\n                           'jets' team,\n                                  STRUCT(STRUCT(12 AS fga, 7 AS fgm) AS o, STRUCT(13 AS fga, 7 AS fgm) AS d) AS t1,\n                                  STRUCT(STRUCT(15 AS fga, 7 AS fgm) AS o, STRUCT(22 AS fga, 7 AS fgm) AS d) AS t2)\nSELECT *\nREPLACE (\n           (SELECT AS STRUCT t1.* REPLACE (\n                                             (SELECT AS STRUCT t1.o.*,\n                                                               SAFE_DIVIDE(wide_stats.t1.o.fgm, wide_stats.t1.o.fga) AS fg_pct) AS o)) AS t1)\nFROM wide_stats;"
        },
        {
            "description": "How to retrieve game statistics for two players, 'joe' and 'nick', from two teams, 'bills' and 'jets'.?",
            "sql": "WITH wide_stats AS\n  (SELECT 'joe' name,\n                'bills' team,\n                        STRUCT(STRUCT(7 AS fga) AS o, STRUCT(8 AS fga) AS d) AS t1,\n                        STRUCT(STRUCT(3 AS fga) AS o, STRUCT(9 AS fga) AS d) AS t2,\n                        STRUCT(3 AS pts, 9 AS ast, 5 AS reb) AS t3,\n                        7 tov,\n                        3 blk\n   UNION ALL SELECT 'nick' name,\n                           'jets' team,\n                                  STRUCT(STRUCT(12 AS fga) AS o, STRUCT(13 AS fga) AS d) AS t1,\n                                  STRUCT(STRUCT(15 AS fga) AS o, STRUCT(22 AS fga) AS d) AS t2,\n                                  STRUCT(13 AS pts, 5 AS ast, 15 AS reb) AS t3,\n                                  75 tov,\n                                  23 blk),\n     flat_stats AS\n  (SELECT name,\n          team,\n          t1.o.fga AS t1_o_fga,\n          t1.d.fga AS t1_d_fga,\n          t2.o.fga AS t2_o_fga,\n          t2.d.fga AS t2_d_fga,\n          t3.pts AS t3_pts,\n          t3.ast AS t3_ast,\n          t3.reb AS t3_reb,\n          tov,\n          blk\n   FROM wide_stats)\nSELECT name,\n       team,\n       metric,\n       COALESCE(CAST(value AS FLOAT64), 0) value\nFROM\n  (SELECT name,\n          team,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(0)], r'^\"|\"$', '') metric,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(1)], r'^\"|\"$', '') value\n   FROM flat_stats,\n        UNNEST(SPLIT(REGEXP_REPLACE(TO_JSON_STRING(flat_stats), r'{|}', ''))) pair)\nWHERE NOT LOWER(metric) IN ('name',\n                            'team');"
        },
        {
            "description": "How many field goals did Joe and Nick make in total?",
            "sql": "SELECT SUM(CASE\n               WHEN team = 'bills' THEN CASE\n                                            WHEN metric = 't1_o_fga' THEN value\n                                            WHEN metric = 't2_o_fga' THEN value\n                                            ELSE 0\n                                        END\n               WHEN team = 'jets' THEN CASE\n                                           WHEN metric = 't1_o_fga' THEN value\n                                           WHEN metric = 't2_o_fga' THEN value\n                                           ELSE 0\n                                       END\n               ELSE 0\n           END) AS total_o_fga;"
        },
        {
            "description": "How to retrieve player-specific statistics from an unpacked JSON object?",
            "sql": "SELECT name,\n       team,\n       metric,\n       SAFE_CAST(value AS FLOAT64) value\nFROM\n  (SELECT name,\n          team,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(0)], r'^\"|\"$', '') metric,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(1)], r'^\"|\"$', '') value\n   FROM `project.dataset.flat_stats` flat_stats,\n        UNNEST(SPLIT(REGEXP_REPLACE(TO_JSON_STRING(flat_stats), r'{|}', ''))) pair)\nWHERE NOT LOWER(metric) IN ('name',\n                            'team');"
        },
        {
            "description": "How to retrieve teams and games for all offensive and defensive stats as nested records within each row?",
            "sql": "SELECT team,\n       game,\n\n  (SELECT AS STRUCT offensive.*\n   EXCEPT (team,\n           game)) AS offensive,\n\n  (SELECT AS STRUCT defensive.*\n   EXCEPT (team,\n           game)) AS defensive\nFROM offensive\nFULL JOIN defensive USING (team,\n                           game);"
        },
        {
            "description": "How to select specific fields from a complex BigQuery object?",
            "sql": "SELECT team,\n       game,\n       offensive.fga AS off_fga,\n       offensive.fgm AS off_fgm,\n       offensive.ast AS off_ast,\n       offensive.blk AS off_blk,\n       offensive.stk AS off_stk,\n       defensive.fga AS def_fga,\n       defensive.fgm AS def_fgm,\n       defensive.ast AS def_ast,\n       defensive.blk AS def_blk,\n       defensive.stk AS def_stk\nFROM UNNEST([STRUCT<team STRING, game STRING, offensive STRUCT<fga STRING, fgm STRING, ast STRING, blk STRING, stk STRING>, defensive STRUCT<fga STRING, fgm STRING, ast STRING, blk STRING, stk STRING>>] [STRUCT(\"1\", \"1\", STRUCT(\"1\", \"2\", \"3\", \"4\", \"5\"), STRUCT(\"21\", \"22\", \"23\", \"24\", \"25\"))]);"
        },
        {
            "description": "How to how to retrieve all rows where there's no 'event2' or the 'event2' sequence is less than or equal to the current 'sequence'.?",
            "sql": "SELECT t.*\nFROM\n  (SELECT t.*,\n          min(CASE\n                  WHEN TYPE = 'event2' THEN SEQUENCE\n              END) OVER (PARTITION BY id) AS event2_sequence\n   FROM t) t\nWHERE event2_sequence IS NULL\n  OR SEQUENCE <= event2_sequence;"
        },
        {
            "description": "How to retrieve all records of a given ID for a table, based on the minimum sequence of an event2 type.?",
            "sql": "SELECT t.*\nFROM t\nWHERE t.sequence <=\n    (SELECT min(t2.sequence)\n     FROM t t2\n     WHERE t2.id = t.id\n       AND t2.type = 'event2');"
        },
        {
            "description": "How to retrieve the rows of table `t` with a sequence number that isn't greater than the sequence number of the first row with `type`=`event2` in table `t`?",
            "sql": "SELECT t.*\nFROM t\nWHERE t.sequence <=\n    (SELECT coalesce(min(CASE\n                             WHEN t2.type = 'event2' THEN t2.sequence\n                         END), max(t2.sequence))\n     FROM t t2\n     WHERE t2.id = t.id);"
        },
        {
            "description": "How to retrieve the latest value associated with each customer and their latest month available.?",
            "sql": "WITH customers AS\n  (SELECT DISTINCT customer_id\n   FROM `project.dataset.table`),\n     months AS\n  (SELECT MONTH\n   FROM\n     (SELECT DATE_TRUNC(MIN(timestamp), MONTH) min_month,\n             DATE_TRUNC(MAX(timestamp), MONTH) max_month\n      FROM `project.dataset.table`), UNNEST(GENERATE_DATE_ARRAY(min_month, max_month, INTERVAL 1 MONTH)) MONTH)\nSELECT customer_id,\n       IFNULL(value, LEAD(value) OVER(win)) value,\n       IFNULL(timestamp, DATE_ADD(LEAD(timestamp) OVER(win), INTERVAL DATE_DIFF(MONTH, LEAD(MONTH) OVER(win), MONTH) MONTH)) timestamp\nFROM months,\n     customers\nLEFT JOIN\n  (SELECT DATE_TRUNC(timestamp, MONTH) MONTH,\n                                       customer_id,\n                                       ARRAY_AGG(STRUCT(value, timestamp)\n                                                 ORDER BY timestamp DESC\n                                                 LIMIT 1)[OFFSET(0)].*\n   FROM `project.dataset.table`\n   GROUP BY MONTH,\n            customer_id) USING(MONTH,\n                               customer_id) WINDOW win AS (PARTITION BY customer_id\n                                                           ORDER BY MONTH DESC);"
        },
        {
            "description": "How to retrieve the last value for each customer for each month.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 customer_id,\n          -500 value, DATE '2019-10-12' timestamp\n   UNION ALL SELECT 1,\n                    -300,\n                    '2019-10-11'\n   UNION ALL SELECT 1,\n                    -200,\n                    '2019-10-10'\n   UNION ALL SELECT 2,\n                    200,\n                    '2019-09-10'\n   UNION ALL SELECT 2,\n                    100,\n                    '2019-08-11'\n   UNION ALL SELECT 2,\n                    50,\n                    '2019-07-12'\n   UNION ALL SELECT 1,\n                    600,\n                    '2019-09-02'),\n     customers AS\n  (SELECT DISTINCT customer_id\n   FROM `project.dataset.table`),\n     months AS\n  (SELECT MONTH\n   FROM\n     (SELECT DATE_TRUNC(MIN(timestamp), MONTH) min_month,\n             DATE_TRUNC(MAX(timestamp), MONTH) max_month\n      FROM `project.dataset.table`), UNNEST(GENERATE_DATE_ARRAY(min_month, max_month, INTERVAL 1 MONTH)) MONTH)\nSELECT customer_id,\n       IFNULL(value, LEAD(value) OVER(win)) value,\n       IFNULL(timestamp, DATE_ADD(LEAD(timestamp) OVER(win), INTERVAL DATE_DIFF(MONTH, LEAD(MONTH) OVER(win), MONTH) MONTH)) timestamp\nFROM months,\n     customers\nLEFT JOIN\n  (SELECT DATE_TRUNC(timestamp, MONTH) MONTH,\n                                       customer_id,\n                                       ARRAY_AGG(STRUCT(value, timestamp)\n                                                 ORDER BY timestamp DESC\n                                                 LIMIT 1)[OFFSET(0)].*\n   FROM `project.dataset.table`\n   GROUP BY MONTH,\n            customer_id) USING(MONTH,\n                               customer_id) WINDOW win AS (PARTITION BY customer_id\n                                                           ORDER BY MONTH DESC);"
        },
        {
            "description": "How to create a partitioned version of a table with sub-partitions for each day of a column.?",
            "sql": "CREATE TABLE `temp.questions_partitioned` PARTITION BY DATE(creation_date) AS\nSELECT *\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to create a partitioned and clustered table with a computed fake_date column?",
            "sql": "CREATE TABLE `temp.questions_clustered` PARTITION BY fake_date CLUSTER BY creation_date AS\nSELECT *,\n       DATE('2000-01-01') fake_date\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to retrieve the total score for all questions created after 2019-01-01?",
            "sql": "SELECT sum(score)\nFROM `temp.questions_clustered`\nWHERE creation_date > \"2019-01-01\";"
        },
        {
            "description": "How to retrieve the sum of values within a specified number of days for each city?",
            "sql": "CREATE TEMP FUNCTION my_func(arr ARRAY<STRUCT<date_col DATE, val_col INT64>>, days INT64) AS (\n                                                                                                (SELECT CAST(SUM(IF(date_col > DATE_SUB(CURRENT_DATE(), INTERVAL days DAY), val_col, 0)) AS INT64)\n                                                                                                 FROM UNNEST(arr)));\n\nSELECT city,\n       my_func(ARRAY_AGG((date, value)), 7) value_7,\n       my_func(ARRAY_AGG((date, value)), 14) value_14\nFROM `project.dataset.table`\nGROUP BY city;"
        },
        {
            "description": "How to retrieve data points on a 7-day and 14-day interval for a specific column, using ARRAY_AGG.?",
            "sql": "SELECT my_func(ARRAY_AGG((date, value2)), 7) value2_7,\n       my_func(ARRAY_AGG((date, value2)), 14) value2_14;"
        },
        {
            "description": "How many customers placed the indicated number of orders between the specified dates?",
            "sql": "SELECT total_transaction,\n       COUNT(*)\nFROM\n  (SELECT customer_no,\n          COUNT(*) AS total_transaction\n   FROM [bi-dwhdev-01:source.daily_order]\n   WHERE DATE(order_time) >= '2018-04-01'\n     AND DATE(order_time) <= '2018-04-10'\n   GROUP BY customer_no) c\nGROUP BY total_transaction\nORDER BY total_transaction DESC;"
        },
        {
            "description": "How to retrieve the commit ID, repository name, and commit date for a specific GitHub repository?",
            "sql": "SELECT\nCOMMIT AS\nCOMMIT, repo_name AS repo_name,\n        committer.date AS DATE\nFROM `bigquery-public-data.github_repos.commits`\nWHERE 'torvalds/linux' IN UNNEST(repo_name)\nLIMIT 10;"
        },
        {
            "description": "How to retrieve the count of null values for each column in a table.?",
            "sql": "SELECT col_name,\n       COUNT(1) nulls_count\nFROM `project.dataset.table` t,\n     UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(t), r\"(\\w+)\":null')) col_name\nGROUP BY col_name;"
        },
        {
            "description": "How to retrieve the agent's earliest and latest booking dates for each destination.?",
            "sql": "SELECT agent_id,\n       travel_destination,\n       min(date_of_booking) first_date_of_booking,\n       max(date_of_booking) max_date_of_booking\nFROM\n  (SELECT t.*,\n          row_number() over(PARTITION BY agent_id\n                            ORDER BY date_of_booking) rn1,\n                       row_number() over(PARTITION BY agent_id, travel_destination\n                                         ORDER BY date_of_booking) rn2\n   FROM mytable t) t\nGROUP BY agent_id,\n         rn1 - rn2,\n         travel_destination\nORDER BY first_date_of_booking;"
        },
        {
            "description": "How to retrieve all unique customer IDs associated with travel destinations visited by a given agent ID.?",
            "sql": "SELECT DISTINCT customer_id\nFROM sample_data.bookings\nWHERE agent_id = 'A1001';"
        },
        {
            "description": "How to retrieve a list of unique agent ids and a count of the number of bookings they have made?",
            "sql": "SELECT agent_id,\n       COUNT(travel_destination) AS number_of_bookings\nFROM bookings\nGROUP BY agent_id;"
        },
        {
            "description": "How to retrieve agent travel destinations and collect related information.?",
            "sql": "SELECT agent_id,\n       string_agg(travel_destination\n                  ORDER BY first_date_of_booking) travel_destination\nFROM () t\nGROUP BY agent_id;"
        },
        {
            "description": "How to retrieve first n values from an array, and return as a new array?",
            "sql": "CREATE TEMP FUNCTION TopN(arr ANY TYPE, n INT64) AS (ARRAY\n                                                       (SELECT x\n                                                        FROM UNNEST(arr) AS x WITH\n                                                        OFFSET OFF\n                                                        WHERE OFF < n\n                                                        ORDER BY OFF));\n\nWITH DATA AS\n  (SELECT 1001 AS id,\n          ['a', 'b', 'c'] AS array_1\n   UNION ALL SELECT 1002 AS id,\n                    ['d', 'e', 'f', 'g'] AS array_1\n   UNION ALL SELECT 1003 AS id,\n                    ['h', 'i'] AS array_1)\nSELECT *,\n       TopN(array_1, 2) AS my_result\nFROM DATA;"
        },
        {
            "description": "How to retrieve cycle hire data for journeys that began after 6am.?",
            "sql": "SELECT *\nFROM `bigquery-public-data.london_bicycles.cycle_hire`\nWHERE EXTRACT(HOUR\n              FROM start_date) > 6;"
        },
        {
            "description": "How to retrieve all hours from 0 to 23?",
            "sql": "SELECT *\nFROM UNNEST(GENERATE_ARRAY(0, 23)) AS HOUR;"
        },
        {
            "description": "How many bike rides have started between 7AM and 4PM for every hour in the dataset?",
            "sql": "WITH hours AS\n  (SELECT *\n   FROM UNNEST(GENERATE_ARRAY(0, 23)) AS HOUR),\n     bike_rides AS\n  (SELECT EXTRACT(HOUR\n                  FROM start_date) AS HOUR,\n          COUNT(*) AS total\n   FROM `bigquery-public-data.london_bicycles.cycle_hire`\n   WHERE EXTRACT(HOUR\n                 FROM start_date) > 6\n   GROUP BY HOUR)\nSELECT HOUR,\n       IF(total IS NULL, 0, total) AS total\nFROM bike_rides\nRIGHT OUTER JOIN hours USING (HOUR);"
        },
        {
            "description": "How to retrieve the job complete status and other query statistics?",
            "sql": "SELECT *,\n       IFNULL(error.status, 'NA') AS error_status,\n       IFNULL(error.message, 'NA') AS error_message,\n       IFNULL(error.debugInfo, 'NA') AS error_debug\nFROM `{}.QUERY_STATISTICS.{}.{}`\nWHERE TYPE = 1\n;"
        },
        {
            "description": "How to retrieve information about an existing query job. You only need to specify the job ID.?",
            "sql": "SELECT *\nFROM `<your_project_id>.INFORMATION_SCHEMA.QUERY_JOBS`\nWHERE job_id = `5ceceaeb-e17c-4a86-8a27-574ad561b856`;"
        },
        {
            "description": "How to retrieve the day of the week for the dates?",
            "sql": "SELECT FORMAT_DATE('%A', dates) AS day_of_week FROM `project.dataset.`project.dataset.table`_name`;"
        },
        {
            "description": "How to return the elements that are present in only one array from a given pair of arrays?",
            "sql": "CREATE TEMP FUNCTION DEDUP_ARRAYS(arr1 ANY TYPE, arr2 ANY TYPE) AS ((ARRAY\n                                                                       (SELECT item\n                                                                        FROM\n                                                                          (SELECT item, ROW_NUMBER() OVER(PARTITION BY item) pos\n                                                                           FROM UNNEST(arr1) item\n                                                                           UNION ALL SELECT item, ROW_NUMBER() OVER(PARTITION BY item) pos\n                                                                           FROM UNNEST(arr2) item)\n                                                                        GROUP BY item, pos\n                                                                        HAVING COUNT(1) = 1)));\n\nWITH `project.dataset.table` AS\n  (SELECT ['A', 'B', 'C', 'A', 'A', 'A'] AS origin_array,\n          ['A', 'A', 'B'] AS secondary_array)\nSELECT DEDUP_ARRAYS(origin_array, secondary_array) AS result_array\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve row values from a table in a column array?",
            "sql": "SELECT ARRAY_AGG(value\n                 ORDER BY\n                 OFFSET) AS result_array\nFROM UNNEST([\"A\", \"B\", \"C\"]) AS value WITH\nOFFSET;"
        },
        {
            "description": "How to retrieve a document ID and type from JSON values in a table?",
            "sql": "SELECT\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_id') doc_id,\n\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_type') doc_type\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve the 'doc_id' and 'doc_type' parameters from the 'table_name' table using a user-defined function?",
            "sql": "CREATE TEMP FUNCTION Extract_Parameter(PARAMETERS ANY TYPE, KEY STRING) AS (\n                                                                              (SELECT value\n                                                                               FROM UNNEST(PARAMETERS)\n                                                                               WHERE name = KEY));\n\nSELECT Extract_Parameter(jsonPayload.parameters, 'doc_id') doc_id,\n       Extract_Parameter(jsonPayload.parameters, 'doc_type') doc_type\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve yellow taxi trip data for the entire month of December 2018 in New York City.?",
            "sql": "CREATE TABLE `myProject.myDataset.myDestinationTable` AS\nSELECT *\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve the total amount of fares for taxi trips in New York City in December 2018?",
            "sql": "SELECT SUM(total_amount)\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve a list of strings and check if a specified integer is found within any of the strings.?",
            "sql": "CREATE TEMP FUNCTION InList(list STRING, num INT64) AS (\n                                                          (SELECT COUNTIF(num = CAST(number AS INT64))\n                                                           FROM UNNEST(SPLIT(list)) number));\n\nWITH `project.dataset.table` AS\n  (SELECT '1,2,3' AS number_list\n   UNION ALL SELECT '2,3,4')\nSELECT number_list,\n       InList(number_list, 1) in_list\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to check if a given number is present in a comma-separated list of numbers?",
            "sql": "SELECT ROW_NUMBER() OVER (\n                          ORDER BY 1) AS ROW,\n       STRING_SPLIT(in_list, \",\") AS number_list,\n       CASE\n           WHEN number_list CONTAINS_STRING('1') THEN 1\n           ELSE 0\n       END AS in_list\nFROM (\n      VALUES ('1,2,3',\n              1), ('2,3,4',\n                   0)) AS t(in_list, expected_result);"
        },
        {
            "description": "How to retrieve a boolean value indicating whether 1 appears in the number list.?",
            "sql": "SELECT IF(CONCAT(',', number_list, ',') LIKE CONCAT('%,1,%'), 1, 0);"
        },
        {
            "description": "How to check if the value '1' is included in the list `number_list`?",
            "sql": "SELECT IF('1' IN UNNEST(SPLIT(number_list)), 1, 0);"
        },
        {
            "description": "How to read element values from a query parameter JSON array based on a name filter?",
            "sql": "SELECT\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_id') doc_id,\n\n  (SELECT value\n   FROM UNNEST(jsonPayload.parameters)\n   WHERE name = 'doc_type') doc_type\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to extract specific parameter values from JSON parameters using a user-defined function?",
            "sql": "CREATE TEMP FUNCTION Extract_Parameter(PARAMETERS ANY TYPE, KEY STRING) AS (\n                                                                              (SELECT value\n                                                                               FROM UNNEST(PARAMETERS)\n                                                                               WHERE name = KEY));\n\nSELECT Extract_Parameter(jsonPayload.parameters, 'doc_id') doc_id,\n       Extract_Parameter(jsonPayload.parameters, 'doc_type') doc_typeFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve all the rows from the New York City Taxi Trips dataset for 2018 where the dropoff month is December.?",
            "sql": "CREATE TABLE `myProject.myDataset.myDestinationTable` AS\nSELECT *\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve the total amount for all taxi rides completed in December 2018?",
            "sql": "SELECT SUM(total_amount)\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`\nWHERE EXTRACT(MONTH\n              FROM dropoff_datetime) = 12;"
        },
        {
            "description": "How to retrieve counts of specified values in a comma-separated list using SQL.?",
            "sql": "CREATE TEMP FUNCTION InList(list STRING, num INT64) AS (\n                                                          (SELECT COUNTIF(num = CAST(number AS INT64))\n                                                           FROM UNNEST(SPLIT(list)) number));\n\nWITH `project.dataset.table` AS\n  (SELECT '1,2,3' AS number_list\n   UNION ALL SELECT '2,3,4')\nSELECT number_list,\n       InList(number_list, 1) in_list\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve a list of rows which contain a number from the list of numbers?",
            "sql": "SELECT number, ROW_NUMBER() OVER (\n                                  ORDER BY number) AS ROW,\n               IF(number IN (1, 2, 3),1, 0) AS in_list\nFROM my_table_name\nORDER BY number;"
        },
        {
            "description": "How to check if a number is in a list of numbers separated by commas?",
            "sql": "SELECT IF(CONCAT(',', number_list, ',') LIKE CONCAT('%,1,%'), 1, 0);"
        },
        {
            "description": "How to retrieve a flag indicating whether the number '1' appears in the 'number_list' field.?",
            "sql": "SELECT IF('1' IN UNNEST(SPLIT(number_list)), 1, 0);"
        },
        {
            "description": "How to retrieve the averages (as decimals) of the occurrences of two column values?",
            "sql": "SELECT avg(CASE\n               WHEN a_col = 'Hello' THEN 100.0\n               ELSE 0\n           END) AS a_something,\n       avg(CASE\n               WHEN b_col IS NULL THEN 100.0\n               ELSE 0\n           END) AS b_something\nFROM m;"
        },
        {
            "description": "How to retrieve a parameter if one or both parameters in the cross join is not there?",
            "sql": "WITH params AS\n  (SELECT avg(CASE\n                  WHEN a_col = 'Hello' THEN 100.0\n                  ELSE 0\n              END) AS a_something,\n          avg(CASE\n                  WHEN b_col IS NULL THEN 100.0\n                  ELSE 0\n              END) AS b_something\n   FROM m)\nSELECT count(*)\nFROM params\nCROSS JOIN unnest(a_something) AS a_something\nUNION ALL\nSELECT count(*)\nFROM params\nCROSS JOIN unnest(b_something) AS b_something;"
        },
        {
            "description": "How to create a BigQuery table?",
            "sql": "CREATE TABLE `PROJECT_ID.test.expiration` (name STRING, expire_time TIMESTAMP);"
        },
        {
            "description": "How to retrieve the current expiration time of a specified database?",
            "sql": "SELECT CURRENT_TIMESTAMP() AS CURRENT_TIMESTAMP,\n       DATABASE,\n       expiration_timestamp\nFROM `bigquery-public-data.utility_usage.bqml_usage`\nWHERE DATABASE = 'bigquery-public-data';"
        },
        {
            "description": "How to retrieve a table with partitioned data by extracting the timestamp field and partitioning it by day, with an expiration of 7776000000 milliseconds.?",
            "sql": "SELECT RowID, Timestamp\nFROM ML.FEATURES PARTITION BY TIMESTAMP_TRUNC(Timestamp, INTERVAL 1 DAY) OPTIONS (expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 7776000000 MILLISECONDS));"
        },
        {
            "description": "How to retrieve data for specific partitioned day.?",
            "sql": "SELECT *\nFROM `bigquery-public-data.usa_names.usa_1910_current` PARTITIONED BY `name`\nWHERE `state` = \"TX\"\n  AND `name` = \"Jacob\"\n  AND `number` = 1\n  AND DATE(`date`) = \"1950-01-01\"\n;"
        },
        {
            "description": "How to retrieve the number of unique random values and the count of each unique value in the top 10 million pageviews in Wikipedia in 2019.?",
            "sql": "CREATE TEMP FUNCTION randomThis(VIEWS INT64) RETURNS FLOAT64 LANGUAGE js AS \"\"\"    if (typeof variable === 'undefined') {       variable = Math.random()    }    return variable  \"\"\";\n\nSELECT randomThis(VIEWS),\n       COUNT(*) c\nFROM\n  (SELECT VIEWS\n   FROM `fh-bigquery.wikipedia_v3.pageviews_2019`\n   )\nGROUP BY 1\nORDER BY 2 DESC;"
        },
        {
            "description": "How to retrieve the minimum value of 'col_a' for each unique value in 'id'?",
            "sql": "SELECT id,\n       MIN(col_a) OVER (PARTITION BY id) AS col_bFROM `project.dataset.table`_name;"
        },
        {
            "description": "How to retrieve a limited sample of GDELT events from 1990 onwards that are related to disasters and attacks?",
            "sql": "SELECT *\nFROM `gdelt-bq.full.events`\nWHERE YEAR >= 1990\n  AND EventCode IN ('0211',\n                    '0311',\n                    '061',\n                    '1011',\n                    '1211')\n;"
        },
        {
            "description": "How to retrieve a list of titles from Wikipedia page view data where the result of a custom MODOLO_MD5 function, when applied to the title, is 0.?",
            "sql": "CREATE TEMP FUNCTION modulo_md5(STR ANY TYPE, m ANY TYPE) AS (\n                                                                (SELECT MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(MOD(0 * 256 + num[OFFSET(0)], m) * 256 + num[OFFSET(1)], m) * 256 + num[OFFSET(2)], m) * 256 + num[OFFSET(3)], m) * 256 + num[OFFSET(4)], m) * 256 + num[OFFSET(5)], m) * 256 + num[OFFSET(6)], m) * 256 + num[OFFSET(7)], m) * 256 + num[OFFSET(8)], m) * 256 + num[OFFSET(9)], m) * 256 + num[OFFSET(10)], m) * 256 + num[OFFSET(11)], m) * 256 + num[OFFSET(12)], m) * 256 + num[OFFSET(13)], m) * 256 + num[OFFSET(14)], m) * 256 + num[OFFSET(15)], m)\n                                                                 FROM\n                                                                   (SELECT TO_CODE_POINTS(MD5(STR)) num)));\n\nSELECT title,\n       modulo_md5(title, 177) RESULT,\n                              TO_HEX(MD5(title)) md5\nFROM `fh-bigquery.wikipedia_v3.pageviews_2019`\nWHERE wiki='en'\n;"
        },
        {
            "description": "How to compute a modulo hash for a given string using MD5?",
            "sql": "SELECT fhoffa.x.modulo_md5(\"any string\", 177) RESULT;"
        },
        {
            "description": "How to retrieve the percentage of users who took an action on day seven after taking the same action on day zero, grouped by source and country.?",
            "sql": "WITH DATA AS (), cohort_info AS\n  (SELECT user_id,\n          SOURCE,\n          country\n   FROM DATA\n   GROUP BY 1,\n            2,\n            3),\n                 day_0_users AS (),\n                 day_7_users AS (),\n                 joined AS\n  (SELECT cohort_info.source,\n          cohort_info.country,\n          count(DISTINCT day_0_users.user_id) AS day_0_count,\n          count(DISTINCT day_7_users.user_id) AS day_7_count\n   FROM day_0_users\n   LEFT JOIN day_7_users USING(user_id)\n   INNER JOIN cohort_info USING(user_id)\n   GROUP BY 1,\n            2)\nSELECT *,\n       day_7_count/day_0_count AS seven_day_conversion\nFROM joined;"
        },
        {
            "description": "How to retrieve the counter history records with ranking based on timestamp.?",
            "sql": "WITH `project.dataset.counter_history` AS\n  (SELECT 121 CounterID,\n          'new' status,\n                'Nov-09-2019 8:32:19' transaction_time,\n                                      'UNDEFINED' SOURCE\n   UNION ALL SELECT 121,\n                    'new',\n                    'Nov-09-2019 8:32:20',\n                    'UNDEFINED'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:32:21',\n                    'WORKFLOW'\n   UNION ALL SELECT 121,\n                    'new',\n                    'Nov-09-2019 8:32:22',\n                    'WORKFLOW'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:32:59',\n                    'external'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:33:00',\n                    'external'\n   UNION ALL SELECT 121,\n                    'CLAIMED',\n                    'Nov-09-2019 8:33:01',\n                    'external'\n   UNION ALL SELECT 233,\n                    'new',\n                    'Nov-09-2019 8:33:32',\n                    'external'\n   UNION ALL SELECT 233,\n                    'new',\n                    'Nov-09-2019 8:49:58',\n                    'internal'\n   UNION ALL SELECT 233,\n                    'RESOLVED',\n                    'Nov-13-2019 6:51:11',\n                    'internal'\n   UNION ALL SELECT 233,\n                    'CLAIMED',\n                    'Nov-11-2019 22:15:52',\n                    'WORKFLOW'\n   UNION ALL SELECT 233,\n                    'new',\n                    'Nov-11-2019 22:15:54',\n                    'external'\n   UNION ALL SELECT 233,\n                    'CLAIMED',\n                    'Nov-11-2019 22:15:55',\n                    'external'\n   UNION ALL SELECT 156,\n                    'new',\n                    'Nov-11-2019 22:15:56',\n                    'UNDEFINED'\n   UNION ALL SELECT 156,\n                    'CLAIMED',\n                    'Nov-11-2019 22:16:24',\n                    'WORKFLOW'\n   UNION ALL SELECT 156,\n                    'CLAIMED',\n                    'Nov-11-2019 22:16:28',\n                    'external'\n   UNION ALL SELECT 156,\n                    'RESOLVE',\n                    'Nov-11-2019 22:16:56',\n                    'external'),\n     TEMP AS\n  (SELECT * REPLACE(PARSE_TIMESTAMP('%b-%d-%Y %T', transaction_time) AS transaction_time)\n   FROM `project.dataset.counter_history`)\nSELECT * EXCEPT(flag, grp),\n         ROW_NUMBER() OVER(PARTITION BY CounterID, grp\n                           ORDER BY transaction_time) ranking\nFROM\n  (SELECT *,\n          COUNTIF(flag) OVER(PARTITION BY CounterID\n                             ORDER BY transaction_time) grp\n   FROM\n     (SELECT *,\n             (status,\n              SOURCE) != LAG((status, SOURCE)) OVER(PARTITION BY CounterID\n                                                    ORDER BY transaction_time) flag\n      FROM TEMP));"
        },
        {
            "description": "How to retrieve the counter history, excluding seqnum and seqnum_s, and rank the rows by status and distance apart (seqnum_s - seqnum) for each counter_id?",
            "sql": "SELECT ch.*\nEXCEPT (seqnum,\n        seqnum_s), row_number() OVER (PARTITION BY counter_id, status, (seqnum_s - seqnum)\n                                      ORDER BY transaction_time) AS ranking\nFROM\n  (SELECT ch.*,\n          row_number() OVER (PARTITION BY counter_id\n                             ORDER BY transaction_time) AS seqnum,\n          row_number() OVER (PARTITION BY counter_id, status\n                             ORDER BY transaction_time) AS seqnum_s\n   FROM counter_history ch) ch;"
        },
        {
            "description": "How to create a custom scalar function to map a column to a specific value based on another column using BigQuery SQL?",
            "sql": "CREATE TEMP FUNCTION MAP(expr ANY TYPE, map ANY TYPE, `default` ANY TYPE) AS (IFNULL(\n                                                                                       (SELECT RESULT\n                                                                                        FROM\n                                                                                          (SELECT NULL AS SEARCH, NULL AS RESULT\n                                                                                           UNION ALL SELECT *\n                                                                                           FROM UNNEST(map))\n                                                                                        WHERE SEARCH = expr), `default`));\n\nWITH `project.dataset.table` AS\n  (SELECT 1 id,\n          4 location_id\n   UNION ALL SELECT 2,\n                    2\n   UNION ALL SELECT 3,\n                    5)\nSELECT id,\n       location_id,\n       MAP(location_id, [ (1, 'Los Angeles'), (2, 'San Francisco'), (3, 'New York'), (4, 'Seattle') ], 'Non US') AS `Location`\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the Location IDs for rows in a BigQuery table?",
            "sql": "SELECT ROW_ID() AS Row_id,\n       location_id,\n       LOCATION\nFROM `bigquery-public-data.usa_names.usa_1910_current`\nORDER BY ROW_ID DESC;"
        },
        {
            "description": "How to retrieve the top 10 SKUs based on total sales or number of transactions?",
            "sql": "SELECT base.ITEM_SKU_NBR,\n       RANK() OVER (\n                    ORDER BY SUM(base.NET_SLS_AMT) DESC) AS SLS_rank,\n       RANK() OVER (\n                    ORDER BY COUNT(DISTINCT base.txn_id) DESC) AS txn_rank\nFROM `my_table` base\nGROUP BY 1 QUALIFY SLS_rank < 10\nOR txn_rank < 10;"
        },
        {
            "description": "How to retrieve the base domain from a given list of URLs.?",
            "sql": "SELECT ARRAY_REVERSE(SPLIT(RTRIM(url, '/'), '/'))[SAFE_OFFSET(0)]\nFROM yourTable;"
        },
        {
            "description": "How to retrieve data from a table after updating values in columns using a function.?",
            "sql": "CREATE TABLE temp.mytable (a STRING, b STRING);\n\nINSERT INTO temp.mytable (a, b)\nVALUES('aaa','bbb');\n\nCREATE TEMP FUNCTION addsuffix(ROW ANY TYPE) RETURNS STRUCT<a STRING, b STRING> AS (STRUCT(CONCAT(row.a, '_a_suffix') AS a, CONCAT(row.b, '_b_suffix') AS b));\n\nSELECT addsuffix(r) AS withsuffix\nFROM temp.mytable r;"
        },
        {
            "description": "How to add a '_a_suffix' to the a column and a '_b_suffix' to the b column in a table?",
            "sql": "CREATE TEMP FUNCTION addsuffix(ROW ANY TYPE) AS (STRUCT(CONCAT(row.a, '_a_suffix') AS a, CONCAT(row.b, '_b_suffix') AS b));\n\nSELECT addsuffix(r) AS withsuffix\nFROM temp.mytable r;"
        },
        {
            "description": "How to retrieve names from a specific state from the public 'USA baby names' dataset?",
            "sql": "SELECT name\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE state = \"TX\"\n;"
        },
        {
            "description": "How to retrieve all rows where the 'value' column casted as FLOAT is greater than 0 from the 'patienttable' table.?",
            "sql": "SELECT id,\n       name,\n       CAST(value AS FLOAT) AS resultvalue\nFROM patienttable\nWHERE CAST(value AS FLOAT) > 0;"
        },
        {
            "description": "How to retrieve the most recent complaint for each unique key?",
            "sql": "SELECT unique_key,\n       MAX(created_date) AS created_date\nFROM `bigquery-public-data.311.complaints`\nGROUP BY unique_key;"
        },
        {
            "description": "How to retrieve the column names for a table in BigQuery with Python's BigQuery Python API?",
            "sql": "SELECT COLUMN_NAME\nFROM `bigquery-public-data`.new_york_311.INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME='311_service_requests';"
        },
        {
            "description": "How to get locations from a nested JSON string in BigQuery using JSON_EXTRACT()?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 id,\n          '{\"photos\": [{\"location\": {\"lat\": 111, \"lon\": 222}, \"ts\": \"2019-12-16\", \"uri\": \"aaa\"}, {\"location\": {\"lat\": 333, \"lon\": 444}, \"ts\": \"2019-12-17\", \"uri\": \"bbb\"}]}' content)\nSELECT id,\n       json2array(JSON_EXTRACT(content, \"$.photos\")) AS photos\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve locations for photos in BigQuery.?",
            "sql": "SELECT ROW_ID(),\n       ARRAY_AGG(STRUCT<LOCATION STRUCT<lat INT64, lon INT64>, ts INT64, uri STRING>)\nFROM UNNEST(photos) AS photo\nGROUP BY ROW_ID();"
        },
        {
            "description": "How to extract an array of objects from a JSON string and parse the nested JSON objects?",
            "sql": "CREATE TEMP FUNCTION json2array(JSON STRING) RETURNS ARRAY<STRING> LANGUAGE js AS \"\"\"    return JSON.parse(json).map(x=>JSON.stringify(x));  \"\"\";\n\nWITH `project.dataset.table` AS\n  (SELECT 1 id,\n          '{\"photos\": [{\"location\": {\"lat\": 111, \"lon\": 222}, \"ts\": \"2019-12-16\", \"uri\": \"aaa\"}, {\"location\": {\"lat\": 333, \"lon\": 444}, \"ts\": \"2019-12-17\", \"uri\": \"bbb\"}]}' content)\nSELECT id,\n       array\n  (SELECT AS struct JSON_EXTRACT_SCALAR(photo, \"$.ts\") ts, JSON_EXTRACT_SCALAR(photo, \"$.uri\") uri, STRUCT(JSON_EXTRACT(photo, \"$.location.lat\") AS lat, JSON_EXTRACT(photo, \"$.location.lon\") AS lon) AS LOCATION\n   FROM unnest(json2array(JSON_EXTRACT(content, \"$.photos\"))) photo) AS photos\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the first photo URI for each distinct row id?",
            "sql": "SELECT DISTINCT rowid, photos.uri\nFROM `project.dataset.photos`\nORDER BY rowid;"
        },
        {
            "description": "How to retrieve the festival name and the closest animal sighting in the last two years based on timestamp.?",
            "sql": "CREATE TABLE temp.a AS\n  (SELECT *\n   FROM UNNEST([STRUCT(TIMESTAMP('2018-01-02 20:01:00') AS time, 'monkey' AS animal)     ,STRUCT('2018-03-04 10:10:10', 'lion')     ,STRUCT('2018-07-04 10:10:10', 'donkey')    ])) ;\n\nCREATE TABLE temp.b AS\n  (SELECT *\n   FROM UNNEST([STRUCT(TIMESTAMP('2017-01-02 10:01:00') AS time, 'one' AS festival)     ,STRUCT('2019-03-04 10:10:10', 'two')     ,STRUCT('2018-07-04 10:10:10', 'three')     ,STRUCT('2018-03-05 10:10:10', 'four')    ])) ;\n\nSELECT b.*,\n       ARRAY_AGG(a\n                 ORDER BY ABS(TIMESTAMP_DIFF(b.time, a.time, SECOND))\n                 )[OFFSET(0)] closest\nFROM temp.b\nJOIN temp.a ON ABS(timestamp_diff(b.time, a.time, DAY)) < 360*2\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How to calculate total open, won, and lost amounts for each month and accumulate them over time?",
            "sql": "WITH TEMP AS\n  (SELECT id,\n          amount,\n          isWon,\n          isLoss,\n          DATE_TRUNC(Created_Date, MONTH) AS open_month,\n          DATE_TRUNC(DateWon, MONTH) AS win_month,\n          DATE_TRUNC(DateLost, MONTH) AS lost_month\n   FROM `project.dataset.table`), months AS\n  (SELECT MONTH\n   FROM\n     (SELECT MIN(MONTH) min_month,\n             MAX(MONTH) max_month\n      FROM\n        (SELECT open_month MONTH\n         FROM TEMP\n         UNION ALL SELECT win_month\n         FROM TEMP\n         UNION ALL SELECT lost_month\n         FROM TEMP)) t,\n        UNNEST(GENERATE_DATE_ARRAY(t.min_month, max_month, INTERVAL 1 MONTH)) MONTH),\n                                  totals AS\n  (SELECT open_month AS MONTH,\n          SUM(amount) total\n   FROM TEMP\n   GROUP BY open_month),\n                                  wins AS\n  (SELECT win_month AS MONTH,\n          SUM(amount) won\n   FROM TEMP\n   WHERE IsWon\n   GROUP BY win_month),\n                                  losses AS\n  (SELECT lost_month AS MONTH,\n          SUM(amount) loss\n   FROM TEMP\n   WHERE IsLoss\n   GROUP BY lost_month)\nSELECT FORMAT_DATE('%Y-%m', MONTH) AS MONTH,\n       SUM(total - IFNULL(won, 0) - IFNULL(loss, 0)) OVER(\n                                                          ORDER BY MONTH) total,\n                                                     SUM(IFNULL(won, 0)) OVER(\n                                                                              ORDER BY MONTH) won,\n                                                                         SUM(IFNULL(loss, 0)) OVER(\n                                                                                                   ORDER BY MONTH) loss\nFROM months m\nLEFT JOIN totals t USING (MONTH)\nLEFT JOIN wins w USING (MONTH)\nLEFT JOIN losses l USING (MONTH);"
        },
        {
            "description": "How to retrieve the total, won, and loss values for each month in a table with a date column named 'month'.?",
            "sql": "SELECT MONTH,\n       SUM(total) AS total,\n       SUM(won) AS won,\n       SUM(loss) AS loss\nFROM `my_table`\nGROUP BY MONTH;"
        },
        {
            "description": "How to update the 'total' column in the 'temp.users' table by summing the 'total' values from two other rows in the same table?",
            "sql": "CREATE OR REPLACE TABLE temp.users AS\n  (SELECT \"1\" id,\n          3 total\n   UNION ALL SELECT \"2\",\n                    2 total\n   UNION ALL SELECT \"3\",\n                    4 total\n   UNION ALL SELECT \"4\",\n                    5 total) ;\n\nUPDATE temp.users T0\nSET total = T1.total + T2.total\nFROM temp.users T1\nLEFT OUTER JOIN temp.users T2 ON T1.id = T2.id\nWHERE 1>0;"
        },
        {
            "description": "How to update a BigQuery table by joining with itself multiple times?",
            "sql": "CREATE OR REPLACE TABLE temp.users AS\n  (SELECT \"1\" id,\n          3 total\n   UNION ALL SELECT \"2\",\n                    2 total\n   UNION ALL SELECT \"3\",\n                    4 total\n   UNION ALL SELECT \"4\",\n                    5 total) ;\n\nUPDATE temp.users T0\nSET total = T1.total + T2.total\nFROM temp.users T1\nLEFT OUTER JOIN temp.users T2 ON T1.id = T2.id\nWHERE 1>0\n  AND T0.id = T1.id;"
        },
        {
            "description": "How to extract key-value pairs from an array of key=value strings?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'Alice' AS Name,\n          ['a=1','b=2','c=3'] attributes\n   UNION ALL SELECT 'Cheshire Cat',\n                    ['a=4', 'x=5']\n   UNION ALL SELECT 'White Rabbit',\n                    ['a=6', 'c=7'])\nSELECT Name,\n       SPLIT(kv, '=')[OFFSET(0)] KEY,\n                                 SPLIT(kv, '=')[SAFE_OFFSET(1)] value\nFROM `project.dataset.table`,\n     UNNEST(attributes) kv;"
        },
        {
            "description": "How to extract key-value pairs from a JSON array and create a table with the extracted values?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'Alice' AS Name,\n          ['a=1','b=2','c=3'] attributes\n   UNION ALL SELECT 'Cheshire Cat',\n                    ['a=4', 'b=5']\n   UNION ALL SELECT 'White Rabbit',\n                    ['a=6', 'c=7'])\nSELECT Name,\n       MAX(IF(KEY = 'a', value, NULL)) a,\n       MAX(IF(KEY = 'b', value, NULL)) b,\n       MAX(IF(KEY = 'c', value, NULL)) c\nFROM\n  (SELECT Name,\n          SPLIT(kv, '=')[OFFSET(0)] KEY,\n                                    SPLIT(kv, '=')[SAFE_OFFSET(1)] value\n   FROM `project.dataset.table`,\n        UNNEST(attributes) kv)\nGROUP BY Name;"
        },
        {
            "description": "How to retrieve team lead information for each user?",
            "sql": "WITH users AS\n  (SELECT \"1\" id,\n          \"2,3\" teamlead_ids,\n          \"Saelesrep_John\" Name\n   UNION ALL SELECT \"2\",\n                    NULL,\n                    \"Teamlead_Steve\"\n   UNION ALL SELECT \"3\",\n                    NULL,\n                    \"Teamlead_Kark\"\n   UNION ALL SELECT \"4\",\n                    \"2\",\n                    \"Salesrep_Buck\")\nSELECT id,\n\n  (SELECT ARRAY\n     (SELECT STRUCT(teamlead.name AS name, teamlead.id AS customId))\n   FROM users teamlead\n   WHERE id IN UNNEST(SPLIT(user.teamlead_ids))) AS teamLead\nFROM users USER;"
        },
        {
            "description": "How to retrieve team leaders for a given user?",
            "sql": "WITH users AS\n  (SELECT \"1\" id,\n          \"2,3\" teamlead_ids,\n          \"Saelesrep_John\" Name\n   UNION ALL SELECT \"2\",\n                    NULL,\n                    \"Teamlead_Steve\"\n   UNION ALL SELECT \"3\",\n                    NULL,\n                    \"Teamlead_Kark\"\n   UNION ALL SELECT \"4\",\n                    \"2\",\n                    \"Salesrep_Buck\")\nSELECT id,\n\n  (SELECT ARRAY_AGG(\n                      (SELECT STRUCT(teamlead.name AS name, teamlead.id AS customId)))\n   FROM users teamlead\n   WHERE id IN UNNEST(SPLIT(user.teamlead_ids))) AS teamLead\nFROM users USER;"
        },
        {
            "description": "How to Retrieve Data from a Custom Nested Structure?",
            "sql": "CREATE OR REPLACE TABLE temp.users AS\n  (SELECT \"1\" id,\n          \"2,3\" teamlead_ids,\n          \"Saelesrep_John\" Name\n   UNION ALL SELECT \"2\",\n                    NULL,\n                    \"Teamlead_Steve\"\n   UNION ALL SELECT \"3\",\n                    NULL,\n                    \"Teamlead_Kark\"\n   UNION ALL SELECT \"4\",\n                    \"2\",\n                    \"Salesrep_Buck\") ;\n\nSELECT id,\n       ARRAY_AGG(\n                   (SELECT STRUCT(teamlead.name AS name, teamlead.id AS customId)\n                    FROM temp.users teamlead\n                    WHERE user_team_lead = teamlead.id)\n                 IGNORE NULLS) AS teamLead\nFROM temp.users\nLEFT JOIN UNNEST(SPLIT(teamlead_ids)) user_team_lead\nGROUP BY id\nORDER BY id;"
        },
        {
            "description": "How to retrieve data for each entry in 'data' with the maximum timestamp, joined with 'filterData'?",
            "sql": "WITH DATA AS\n  (SELECT '123' AS UID,\n          3 AS goodinfo,\n          DATE('2019-12-12') AS timestamp\n   UNION ALL SELECT '123' AS UID,\n                    5 AS goodinfo,\n                    DATE('2019-01-12') AS timestamp\n   UNION ALL SELECT '234' AS UID,\n                    11 AS goodinfo,\n                    DATE('2019-10-12') AS timestamp), filterData AS\n  (SELECT UID,\n          max(timestamp) maxTimestamp\n   FROM DATA\n   GROUP BY UID)\nSELECT data.uid,\n       goodinfo,\n       filterData.maxTimestamp AS maxTimestamp\nFROM DATA\nINNER JOIN filterData ON data.uid = filterData.uid\nAND data.timestamp = filterData.maxTimestamp;"
        },
        {
            "description": "How many page views did the top Google-related Wikipedia page have between January 1, 2018 and January 8, 2018?",
            "sql": "WITH DATA AS\n  (SELECT *\n   FROM `fh-bigquery.wikipedia_v3.pageviews_2018`\n   WHERE wiki='en'\n     AND title LIKE 'Goo%')\nSELECT title,\n       SUM(VIEWS) VIEWS\nFROM DATA\nWHERE DATE(datehour) BETWEEN '2018-01-01' AND '2018-01-08' # 2.68 GB   GROUP BY 1 ORDER BY 2 DESC ;"
        },
        {
            "description": "How to retrieve the page title with the highest total views in English Wikipedia across all articles starting with 'Goo' within a 7-day period starting from January 1, 2018?",
            "sql": "WITH DATA AS\n  (SELECT *\n   FROM `fh-bigquery.wikipedia_v3.pageviews_2018`\n   WHERE wiki='en'\n     AND title LIKE 'Goo%'), min_date AS\n  (SELECT DATE('2018-01-01'))\nSELECT title,\n       SUM(VIEWS) VIEWS\nFROM DATA\nWHERE DATE(datehour) BETWEEN\n    (SELECT *\n     FROM min_date) AND DATE_ADD(\n                                   (SELECT *\n                                    FROM min_date), INTERVAL 7 DAY)\nGROUP BY 1\nORDER BY 2 DESC\n;"
        },
        {
            "description": "How to create a partitioned table using SQL?",
            "sql": "CREATE TABLE `temp.questions_partitioned` PARTITION BY DATE(creation_date) AS\nSELECT *\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to create a partitioned and clustered temp table?",
            "sql": "CREATE TABLE `temp.questions_clustered` PARTITION BY fake_date CLUSTER BY creation_date AS\nSELECT *,\n       DATE('2000-01-01') fake_date\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to retrieve the sum of scores for questions created after '2019-01-01'?",
            "sql": "SELECT sum(score)\nFROM `project.temp.questions_clustered`\nWHERE creation_date > \"2019-01-01\";"
        },
        {
            "description": "How to retrieve the length of the `emailed_users` array in each row.?",
            "sql": "SELECT ARRAY_LENGTH(emailed_users) AS Number_of_items2\nFROM `project.dataset.`project.dataset.table`_name`;"
        },
        {
            "description": "How to get the number of elements in an array?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT ['[email\u00a0protected]',\n           '[email\u00a0protected]',\n           '[email\u00a0protected]',\n           '[email\u00a0protected]'] emailed_users)\nSELECT ARRAY_LENGTH(emailed_users) AS Number_of_items2\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve for each camera how many accidents occurred within a radius of half a mile on its road.?",
            "sql": "SELECT c.*,\n       accidents_in_perimeter\nFROM\n  (SELECT ANY_VALUE(c) AS c,\n          COUNT(1) AS accidents_in_perimeter\n   FROM `project.dataset.cameras` c\n   JOIN `project.dataset.accidents` a ON c.road = a.street\n   AND a.mile BETWEEN c.mile - 0.5 AND c.mile + 0.5\n   GROUP BY FORMAT('%t', c));"
        },
        {
            "description": "How to retrieve accidents that happened within a certain perimeter of a specific road.?",
            "sql": "SELECT city,\n       state,\n       road,\n       mile,\n       SUM(accidents_in_perimeter) AS total_accidents_in_perimeter\nFROM\n  (SELECT ROW_NUMBER() OVER (PARTITION BY road\n                             ORDER BY mile) AS row_number,\n          city,\n          state,\n          road,\n          CAST(mile AS FLOAT64) AS mile,\n          CAST(accidents_in_perimeter AS INT64) AS accidents_in_perimeter\n   FROM UNNEST(GENERATE_ARRAY(mile - 10, mile + 10, 0.01)) AS mile,\n        locations\n   WHERE NOT IS_NULL(accidents_in_perimeter) INTERSECT\n     SELECT ROW_NUMBER() OVER (PARTITION BY road\n                               ORDER BY mile) AS row_number,\n            city,\n            state,\n            road,\n            CAST(mile AS FLOAT64) AS mile,\n            CAST(accidents_in_perimeter AS INT64) AS accidents_in_perimeter\n     FROM UNNEST(GENERATE_ARRAY(mile - 5, mile + 5, 0.01)) AS mile,\n          locations WHERE NOT IS_NULL(accidents_in_perimeter)) AS sub\nGROUP BY city,\n         state,\n         road,\n         mile;"
        },
        {
            "description": "How to group rows by a column and nest values from other columns into JSON format?",
            "sql": "WITH DATA AS\n  (SELECT 1 AS id,\n          '1v1' AS val1,\n          '1v2' AS val2\n   UNION ALL SELECT 1,\n                    '1v3',\n                    '2v4'\n   UNION ALL SELECT 2,\n                    '2v1',\n                    '2v2'), grouped AS\n  (SELECT id,\n          array_agg(struct(val1, val2)) x\n   FROM DATA\n   GROUP BY 1)\nSELECT id,\n       to_json_string(x) AS JSON\nFROM grouped;"
        },
        {
            "description": "How to retrieve the distribution of student ages, grouped into age groups (10-20, 20-30, etc.).?",
            "sql": "WITH students AS\n  (SELECT 9 AS age\n   UNION ALL SELECT 20 AS age\n   UNION ALL SELECT 25 AS age\n   UNION ALL SELECT 31 AS age\n   UNION ALL SELECT 32 AS age\n   UNION ALL SELECT 33 AS age)\nSELECT RANGE_BUCKET(age, [10, 20, 30]) AS age_group,\n       COUNT(*) AS COUNT\nFROM students\nGROUP BY 1;"
        },
        {
            "description": "How to count assets in different groups based on their `asset_no` values?",
            "sql": "WITH t (..your query here)\nSELECT RANGE_BUCKET(asset_no, [10, 20, 30]) AS asset_group,\n       COUNT(*) AS COUNT\nFROM t\nGROUP BY 1;"
        },
        {
            "description": "How to round numeric values to different precisions in BigQuery?",
            "sql": "SELECT ROUND(3953.65, 1),\n       ROUND(numeric '3053.665',2),\n       ROUND(numeric '3053.6665',3);"
        },
        {
            "description": "How to get the truncated value of a number to a specified decimal place?",
            "sql": "SELECT TRUNC(3.1955, 3),\n       TRUNC(numeric'3.195',3),\n       TRUNC(3.1955, 4),\n       TRUNC(numeric '3.1965',4),\n       TRUNC(3.1945, 4);"
        },
        {
            "description": "How to retrieve the portion of the string in 'mycol' that follows the 'contact_type__' prefix and contains only alphanumeric characters and the underscore.?",
            "sql": "SELECT regexp_extract(mycol, 'contact_type__([a-zA-Z0-9_]+)') AS extracted_value\nFROM `project.dataset.table`_name;"
        },
        {
            "description": "How to update TableA with new values for columns A and B based on the value of Final?",
            "sql": "UPDATE TableA\nSET A = CASE\n            WHEN FINAL IN (1,\n                           2) THEN 1\n            ELSE 0\n        END\nSET B = CASE WHEN FINAL = 2 THEN 1 ELSE 0\nWHERE FINAL IN (1,\n                2)\n  AND FINAL <> A+B;"
        },
        {
            "description": "How to retrieve the count of `session_start` events for each table partitioned by `_TABLE_SUFFIX` in the `analytics_202222094.events_*` dataset.?",
            "sql": "SELECT _TABLE_SUFFIX AS table_suffix,\n       COUNTIF(event_name = 'session_start')\nFROM `analytics_202222094.events_*`\nGROUP BY _TABLE_SUFFIX;"
        },
        {
            "description": "How to retrieve the schema from JSON files stored in a Cloud Storage bucket?",
            "sql": "CREATE EXTERNAL DATA SOURCE my_data_source OPTIONS(format='json' LOCATION='gs://[BUCKET_NAME]' SCHEMA= { fields: [        {          name: 'STRING'          type: 'STRING'        }      ] });"
        },
        {
            "description": "How to retrieve the number of entries recorded for each day in the field 'timestamp_field' in the table 'table'?",
            "sql": "SELECT date(timestamp_field, 'America/Los_Angeles') AS dte,\n       count(*)\nFROM TABLE\nGROUP BY dte;"
        },
        {
            "description": "How to retrieve daily counts of records and the running count of records for each month?",
            "sql": "SELECT dte,\n       count(*),\n       sum(count(*)) OVER (PARTITION BY extract(YEAR\n                                                FROM date_add(dte, interval 1 MONTH))\n                           ORDER BY min(timestamp_field)) AS running_cnt\nFROM\n  (SELECT t.*,\n          date(timestamp_field, 'America/Los_Angeles') AS dte\n   FROM t) t\nGROUP BY dte;"
        },
        {
            "description": "How to retrieve the top 5 cities by total sales and their sales.?",
            "sql": "SELECT sale.*\nFROM\n  (SELECT ARRAY_AGG(t\n                    ORDER BY sales DESC\n                   ) top_cities\n   FROM\n     (SELECT ORD.shipping_address_city city,\n             ORDL.sku,\n             sum(ORDL.price) SALES\n      FROM database.ORDER ORD\n      INNER JOIN database.ORDER_LINE ORDL ON ORD.ID = ORDL.order_id\n      WHERE shipping_address_city IS NOT NULL\n      GROUP BY ORD.shipping_address_city,\n               ORDL.sku) t\n   GROUP BY city) t,\n     UNNEST(top_cities) sale;"
        },
        {
            "description": "How to retrieve the boolean with the largest value that also has the latest datetime for each name?",
            "sql": "SELECT AS VALUE ARRAY_AGG(t\n                          ORDER BY bool DESC, dt DESC\n                          )[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY name;"
        },
        {
            "description": "How to retrieve the latest updated row for each name?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'Car' name,\n                '2019-12-01' dt,\n                             TRUE bool\n   UNION ALL SELECT 'Car',\n                    '2019-12-03',\n                    FALSE\n   UNION ALL SELECT 'Bus',\n                    '2019-12-05',\n                    FALSE\n   UNION ALL SELECT 'Bus',\n                    '2019-12-11',\n                    FALSE)\nSELECT AS VALUE ARRAY_AGG(t\n                          ORDER BY bool DESC, dt DESC\n                         )[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY name;"
        },
        {
            "description": "How to retrieve the sum of A_value, B_value and C_value grouped by Type?",
            "sql": "SELECT SUM(CASE TYPE\n               WHEN 'A' THEN A_value\n               WHEN 'B' THEN B_value\n               WHEN 'C' THEN C_value\n               ELSE 0\n           END) AS Type_value,\n       TYPE\nFROM `project.dataset.table`\nGROUP BY TYPE;"
        },
        {
            "description": "How to calculate the sum of multiple numeric columns grouped by category?",
            "sql": "SELECT SUM(IFNULL(A_value, 0) + IFNULL(B_value, 0) + IFNULL(C_value, 0)) AS Type_value,\n       TYPE\nFROM `project.dataset.table`\nGROUP BY TYPE;"
        },
        {
            "description": "How to retrieve the fourth part of a string split by a hyphen?",
            "sql": "SELECT SPLIT(STR, '-')[OFFSET(3)] AS fourth_part\nFROM `project.dataset.table`_name;"
        },
        {
            "description": "How to retrieve the fourth element of the string, delimited by '-' characters?",
            "sql": "SELECT SPLIT(STR, '-')[SAFE_OFFSET(3)] AS fourth_element\nFROM `project.dataset.table`_name;"
        },
        {
            "description": "How to find all geospatial elements within a defined distance of a given point?",
            "sql": "SELECT ST_DWithin(ST_GeogFromText('POLYGON(( -139.833984375 16.97274101999902, -138.33984375 15.029685756555674, -67.060546875 48.516604348867475, -68.37890625 49.89463439573421, -139.833984375 16.97274101999902))'), ST_GeogPoint(-139.833984375, 16.97274101999902), 10);"
        },
        {
            "description": "How to retrieve country codes as a comma-separated string, grouped by date?",
            "sql": "SELECT string_agg(id, ',') AS id ,\n       string_agg(country, ',') AS country ,\n       string_agg(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to group and concatenate values in a table by date?",
            "sql": "SELECT group_concat(id, ',') AS id ,\n       group_concat(country, ',') AS country ,\n       group_concat(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to get all combinations of rows from two tables using CROSS JOIN?",
            "sql": "SELECT t1.*\nFROM `project.dataset.table1`\nCROSS JOIN\n  (SELECT 1 AS n\n   UNION ALL SELECT 2\n   UNION ALL SELECT 3) n;"
        },
        {
            "description": "How to unnest a sequence of numbers (1, 2, 3) and combine (cross join) the results with rows from a table?",
            "sql": "SELECT t1.*\nFROM `project.dataset.table1`\nCROSS JOIN UNNEST(GENERATE_ARRAY(1, 3)) n;"
        },
        {
            "description": "How to create a comma-delimited list of values in BigQuery?",
            "sql": "SELECT string_agg(id, ',') AS id ,\n       string_agg(country, ',') AS country ,\n       string_agg(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to retrieve concatenation results for ID, country and code per date.?",
            "sql": "SELECT group_concat(id, ',') AS id ,\n       group_concat(country, ',') AS country ,\n       group_concat(code, ',') AS code\nFROM tableA\nGROUP BY date;"
        },
        {
            "description": "How to retrieve all rows from table1, concatenated with the numbers 1, 2, and 3 in a new column 'n'.?",
            "sql": "SELECT t1.*\nFROM `project.dataset.table1`\nCROSS JOIN\n  (SELECT 1 AS n\n   UNION ALL SELECT 2\n   UNION ALL SELECT 3) n;"
        },
        {
            "description": "How to retrieve all rows from table1 along with 3 additional rows (with NULL values for columns not in table1) using UNNEST and GENERATE_ARRAY.?",
            "sql": "SELECT t1.*\nFROM table1\nCROSS JOIN UNNEST(GENERATE_ARRAY(1, 3)) n;"
        },
        {
            "description": "How to retrieve all data from table1 that is within the date range of any of the StartDate to EndDate ranges in table2 where table2.ID appears as any of the Camp fields in table1?",
            "sql": "SELECT *\nFROM `myproject.dataset.table1` AS t1\nFULL OUTER JOIN `myproject.dataset.table2` AS t2 ON TRUE\nWHERE t1.Date BETWEEN PARSE_DATE('%m/%d/%y', t2.StartDate) AND PARSE_DATE('%m/%d/%y', t2.EndDate)\n  AND t2.ID IN (t1.Camp1ID,\n                t1.Camp2ID,\n                t1.Camp3ID,\n                t1.Camp4ID,\n                t1.Camp5ID,\n                t1.Camp6ID,\n                t1.Camp7ID,\n                t1.Camp8ID,\n                t1.Camp9ID,\n                t1.Camp10ID,\n                t1.Camp11ID,\n                t1.Camp12ID,\n                t1.Camp13ID,\n                t1.Camp14ID,\n                t1.Camp15ID,\n                t1.Camp16ID);"
        },
        {
            "description": "How to retrieve customer metrics based on percentiles of revenue?",
            "sql": "SELECT FLOOR(seqnum * 100 / cnt) AS tile,\n       COUNT(customer_id),\n       COUNTIF(num_orders = 1) AS num_single_orders,\n       AVG(revenue),\n       ROUND(ROW/COUNT(customer_id), 0) percentile\nFROM\n  (SELECT c.*,\n          ROW_NUMBER() OVER (\n                             ORDER BY revenue DESC) - 1 AS seqnum,\n          COUNT(*) OVER () AS cnt\n   FROM customers c) c\nGROUP BY tile\nORDER BY tile;"
        },
        {
            "description": "How to retrieve a revenue coefficient for each order by summing up the product of other orders' val1 and val2 that are within a 24-hour and 6-minute window before and after the order time.?",
            "sql": "WITH `project.dataset.test_data` AS\n  (SELECT 1 val1,\n          7 val2,\n          'ord001' id,\n                   TIMESTAMP('2019-01-01 04:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    14 val2,\n                    'ord002' id,\n                             TIMESTAMP('2019-01-02 05:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    21 val2,\n                    'ord003' id,\n                             TIMESTAMP('2019-01-03 06:00:00') dt_order),\n     revenue_coeff AS\n  (SELECT td1.id,\n          td1.val1 * SUM(td2.val2) / SUM(td2.val1)\n   FROM `project.dataset.test_data` td1\n   CROSS JOIN `project.dataset.test_data` td2\n   WHERE td2.dt_order >= TIMESTAMP_SUB(td1.dt_order, INTERVAL 24 HOUR)\n     AND td2.dt_order < TIMESTAMP_ADD(td1.dt_order, INTERVAL 6 MINUTE)\n   GROUP BY td1.id,\n            td1.val1)\nSELECT *\nFROM revenue_coeff;"
        },
        {
            "description": "How to compute revene coefficients based on a rolling 4-hour window?",
            "sql": "WITH `project.dataset.test_data` AS\n  (SELECT 1 val1,\n          7 val2,\n          'ord001' id,\n                   TIMESTAMP('2019-01-01 04:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    14 val2,\n                    'ord002' id,\n                             TIMESTAMP('2019-01-02 05:00:00') dt_order\n   UNION ALL SELECT 1 val1,\n                    21 val2,\n                    'ord003' id,\n                             TIMESTAMP('2019-01-03 06:00:00') dt_order),\n     revenue_coeff AS\n  (SELECT id,\n          val1 * SUM(val2) OVER(win) / SUM(val1) OVER(win)\n   FROM `project.dataset.test_data` td1 WINDOW win AS (\n                                                       ORDER BY UNIX_SECONDS(dt_order) RANGE BETWEEN 86400 PRECEDING AND 359 FOLLOWING))\nSELECT *\nFROM revenue_coeff;"
        },
        {
            "description": "How to retrieve data from today's and tomorrow's partitioned tables?",
            "sql": "SELECT *\nFROM `project.dataset.tablename*`\nWHERE _TABLE_SUFFIX = CONCAT('_',\n                             FORMAT_DATE('%Y%m%d', CURRENT_DATE())\n  OR _TABLE_SUFFIX = CONCAT('2_',\n                            FORMAT_DATE('%Y%m%d', CURRENT_DATE());"
        },
        {
            "description": "How to extract the week from a date?",
            "sql": "SELECT EXTRACT(WEEK\n              FROM date) AS week_number\nFROM `project.dataset.table1`;"
        },
        {
            "description": "How to get the status of a running or recently run BigQuery job?",
            "sql": "SELECT *\nFROM [BIGQUERY-PUBLIC-DATA:utility_usage_explorer.bq_jobs]\nWHERE job_id = \"<BIGQUERY_JOB_ID>\";"
        },
        {
            "description": "How to how to extract values from a specific, JSON-formatted field?",
            "sql": "SELECT REGEXP_EXTRACT(hits_eventInfo_eventLabel, r'\"Loc\":\".*\"') AS extracted_value\nFROM `project.dataset.table`_name;"
        },
        {
            "description": "How to retrieve the row count of locations where a product is recommended?",
            "sql": "SELECT Recommendation_Location,\n       COUNT(*) AS Product_Count\nFROM Recommendation_table\nGROUP BY Recommendation_Location;"
        },
        {
            "description": "How to extract the location as a string from a JSON object stored in a string column?",
            "sql": "SELECT REGEXP_EXTRACT(hits_eventInfo_eventLabel, r'\"Loc\":\"(.*?)\"') AS LOCATION\nFROM `project.dataset.table1`;"
        },
        {
            "description": "How to retrieve the recommendation location for a given row?",
            "sql": "SELECT Recommendation_Location\nFROM UNNEST(recommendation.location) AS Recommendation_Location;"
        },
        {
            "description": "How to retrieve the top 300 themes for GKG rows with date between 2015-03-03 00:00:00 UTC+00:00 and 2015-03-04 00:00:00 UTC+00:00 and containing the word 'Netanyahu' in the V2Persons field?",
            "sql": "SELECT theme,\n       COUNT(*) AS COUNT\nFROM\n  (SELECT REGEXP_REPLACE(value, r',.*', '') theme\n   FROM `gdelt-bq.gdeltv2.gkg`,\n        UNNEST(SPLIT(V2Themes, ';')) value\n   WHERE DATE>20150302000000\n     AND DATE < 20150304000000\n     AND V2Persons LIKE '%Netanyahu%')\nGROUP BY theme\nORDER BY 2 DESC\n;"
        },
        {
            "description": "How to retrieve a comma-separated list of article concept names for each article identifier.?",
            "sql": "SELECT identifier,\n\n  (SELECT STRING_AGG(name, ', ')\n   FROM UNNEST(concepts)) AS conceptName\nFROM `project.dataset.articles`;"
        },
        {
            "description": "How to how to retrieve a list of concepts for each article? (newline-separated)?",
            "sql": "SELECT identifier,\n\n  (SELECT STRING_AGG(name, ', ')\n   FROM articles.concepts) AS conceptName\nFROM `project.dataset.articles` articles;"
        },
        {
            "description": "How to retrieve only the second row in BigQuery using a row identifier?",
            "sql": "SELECT conceptName\nFROM\n  (SELECT conceptName,\n          ROW_NUMBER() OVER () AS rownum\n   FROM `bigquery-public-data.stackoverflow.posts_questions`\n   WHERE 1 = 1) sub\nWHERE rownum = 2;"
        },
        {
            "description": "How to retrieve all rows from a table containing a body, and then for each row, return an array of matching keywords, if any, and the original body.?",
            "sql": "WITH keywords AS\n  (SELECT LOWER(keyword) AS keyword\n   FROM UNNEST(['Car', 'Vehicle', 'Motorcycle']) keyword)\nSELECT REGEXP_EXTRACT_ALL(LOWER(BODY), keywords_regexp) AS mentions,\n       BODY\nFROM `project.dataset.table`,\n  (SELECT CONCAT(r'.{1,50}\b(?:', STRING_AGG(keyword, '|'), r')\b.{1,50}') AS keywords_regexp\n   FROM keywords)\nWHERE REGEXP_CONTAINS(BODY, keywords_regexp);"
        },
        {
            "description": "How to retrieve text documents that contain a mention of any given keyword, and include the word surrounding it (up to 50 characters are retrieved for each side of the match).?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT text AS BODY\n   FROM `bigquery-public-data.hacker_news.comments`),\n     keywords AS\n  (SELECT LOWER(keyword) AS keyword\n   FROM UNNEST(['Car', 'Vehicle', 'Motorcycle']) keyword)\nSELECT REGEXP_EXTRACT_ALL(LOWER(BODY), keywords_regexp) AS mentions,\n       BODY\nFROM `project.dataset.table`,\n  (SELECT CONCAT(r'.{1,50}\b(?:', STRING_AGG(keyword, '|'), r')\b.{1,50}') AS keywords_regexp\n   FROM keywords)\nWHERE REGEXP_CONTAINS(BODY, keywords_regexp);"
        },
        {
            "description": "How to retrieve the body of comments from Hacker News that contains either the word 'Car', 'Vehicle', or 'Motorcycle', and group the results by comment body along with an array of matching mentions.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT text AS BODY\n   FROM `bigquery-public-data.hacker_news.comments`),\n     keywords AS\n  (SELECT CONCAT(r'\b', LOWER(keyword), r'\b') AS keyword_test,\n          CONCAT(r'.{1,50}\b', LOWER(keyword), r'\b.{1,50}') AS keyword\n   FROM UNNEST(['Car', 'Vehicle', 'Motorcycle']) keyword)\nSELECT ARRAY_CONCAT_AGG(mention) AS mentions,\n       BODY\nFROM\n  (SELECT BODY,\n          REGEXP_EXTRACT_ALL(LOWER(BODY), keyword) AS mention\n   FROM\n     (SELECT keyword,\n             BODY\n      FROM `project.dataset.table`,\n           keywords\n      WHERE REGEXP_CONTAINS(BODY, keyword_test)))\nGROUP BY BODY;"
        },
        {
            "description": "How to retrieve only unique sessions and event types?",
            "sql": "SELECT SESSION,\n       eventType,\n       eventOrder\nFROM\n  (SELECT t.*,\n          lag(eventType) over(PARTITION BY SESSION\n                              ORDER BY eventOrder) lag_eventType\n   FROM `project.dataset.mytable` t) t\nWHERE lag_eventType IS NULL\n  OR eventType != lag_eventType;"
        },
        {
            "description": "How to retrieve the date by parsing a given string in the format '%Y%m%d'.?",
            "sql": "SELECT PARSE_DATE('%Y%m%d', '20191024');"
        },
        {
            "description": "How to retrieve the minimum and maximum timestamps grouped by device ID and session ID where a session ID is defined as a sequence of rows with a timestamp difference of less than 60 seconds.?",
            "sql": "SELECT MIN(Min_Timestamp) AS Min_Timestamp,\n       MAX(Max_Timestamp) AS Max_Timestamp,\n       Device_ID,\n       Session_ID\nFROM\n  (SELECT * EXCEPT(flag, Session_ID),\n            CONCAT(Device_ID, CAST(COUNTIF(flag) OVER(PARTITION BY Device_ID\n                                                      ORDER BY Max_Timestamp) AS STRING)) AS Session_ID\n   FROM\n     (SELECT *,\n             IFNULL(TIMESTAMP_DIFF(Min_Timestamp, LAG(Max_Timestamp) OVER(PARTITION BY Device_ID\n                                                                          ORDER BY Max_Timestamp), SECOND), 999) > 60 flag\n      FROM `project.dataset.table`))\nGROUP BY Device_ID,\n         Session_ID;"
        },
        {
            "description": "How to create a session ID for each unique pair of minimum and maximum timestamps within a 60-second window?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT TIMESTAMP '2019-12-03 23:05:30.416 UTC' Min_Timestamp, TIMESTAMP '2019-12-03 23:09:13.502 UTC' Max_Timestamp,\n                                                                                                         'AAAAA' Device_ID,\n                                                                                                                 'I90HYTRFJI' Session_ID\n   UNION ALL SELECT '2019-12-03 23:09:21.517 UTC',\n                    '2019-12-03 23:09:53.353 UTC',\n                    'AAAAA',\n                    '98UHIGSNJR'\n   UNION ALL SELECT '2019-12-03 00:00:28.933 UTC',\n                    '2019-12-03 00:09:03.473 UTC',\n                    'BBBBB',\n                    '32QE8Y76TG'\n   UNION ALL SELECT '2019-12-03 00:09:19.106 UTC',\n                    '2019-12-03 00:23:26.554 UTC',\n                    'BBBBB',\n                    'R4GUY432AD'\n   UNION ALL SELECT '2019-12-03 00:23:26.818 UTC',\n                    '2019-12-03 00:23:26.837 UTC',\n                    'BBBBB',\n                    'E32GUYE328'\n   UNION ALL SELECT '2019-12-03 17:00:32.160 UTC',\n                    '2019-12-03 17:03:48.758 UTC',\n                    'BBBBB',\n                    'GY1EW32876'\n   UNION ALL SELECT '2019-12-03 17:03:58.069 UTC',\n                    '2019-12-03 17:17:12.408 UTC',\n                    'BBBBB',\n                    '2876T128Y7'\n   UNION ALL SELECT '2019-12-03 17:18:24.528 UTC',\n                    '2019-12-03 17:18:27.516 UTC',\n                    'BBBBB',\n                    '098U6598U5'\n   UNION ALL SELECT '2019-12-03 16:30:29.970 UTC',\n                    '2019-12-03 18:44:18.972 UTC',\n                    'CCCCC',\n                    'UWI4UII2J4'\n   UNION ALL SELECT '2019-12-04 17:32:19.285 UTC',\n                    '2019-12-04 17:32:24.668 UTC',\n                    'CCCCC',\n                    'G3247ROIUH')\nSELECT MIN(Min_Timestamp) AS Min_Timestamp,\n       MAX(Max_Timestamp) AS Max_Timestamp,\n       Device_ID,\n       Session_ID\nFROM\n  (SELECT * EXCEPT(flag, Session_ID),\n            CONCAT(Device_ID, CAST(COUNTIF(flag) OVER(PARTITION BY Device_ID\n                                                      ORDER BY Max_Timestamp) AS STRING)) AS Session_ID\n   FROM\n     (SELECT *,\n             IFNULL(TIMESTAMP_DIFF(Min_Timestamp, LAG(Max_Timestamp) OVER(PARTITION BY Device_ID\n                                                                          ORDER BY Max_Timestamp), SECOND), 999) > 60 flag\n      FROM `project.dataset.table`))\nGROUP BY Device_ID,\n         Session_ID;"
        },
        {
            "description": "How to retrieve the earliest and latest timestamp values along with the device and session IDs corresponding to each row.?",
            "sql": "SELECT Min(Timestamp) AS Min_Timestamp,\n       Max(Timestamp) AS Max_Timestamp,\n       Device_ID,\n       Session_ID\nFROM `my_project.my_dataset.my_table`;"
        },
        {
            "description": "How to retrieve the distinct sales data for 'Kero-Coco' products in Brazil from August to October 2019, grouped by `FECHA` (date), `product_trademark`, `VENTAS` (sales), `ORDENES` (orders), `USUARIOS` (users), and `main_grouped_store`.?",
            "sql": "SELECT DISTINCT FECHA,\n                product_trademark,\n                VENTAS,\n                ORDENES,\n                USUARIOS,\n                main_grouped_store\nFROM DB\nWHERE (product_trademark LIKE '%Kero-Coco%'\n       OR product_trademark LIKE '%kero-coco%')\n  AND COUNTRY = 'BR'\n  AND FECHA BETWEEN '201908' AND '201910'\nORDER BY VENTAS;"
        },
        {
            "description": "How to find the sales performance of 'Kero Coco' products in Brazil between August and October 2019?",
            "sql": "SELECT DISTINCT FECHA,\n                product_trademark,\n                VENTAS,\n                ORDENES,\n                USUARIOS,\n                main_grouped_store\nFROM DB\nWHERE LOWER(product_trademark) LIKE '%kero-coco%'\n  AND COUNTRY = 'BR'\n  AND FECHA BETWEEN '201908' AND '201910'\nORDER BY VENTAS;"
        },
        {
            "description": "How to how to split a string into two columns, one with the first item and another with the remaining items.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'how.now.brown.cow' col\n   UNION ALL SELECT 'how')\nSELECT col,\n       SPLIT(col, '.')[OFFSET(0)] AS first_item,\n\n  (SELECT STRING_AGG(item, '.'\n                     ORDER BY\n                     OFFSET)\n   FROM UNNEST(SPLIT(col, '.')) item WITH\n   OFFSET\n   WHERE\n     OFFSET > 0) AS rest_of_items\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the dates from the raw start_time field using this query?",
            "sql": "SELECT EXTRACT(DATE\n               FROM PARSE_TIMESTAMP('%m/%d/%Y %H:%M:%S %Z %z', start_time)) AS date\nFROM `cc_raw.cc_exp`;"
        },
        {
            "description": "How to retrieve the date component from a timestamp string in CET timezone using EXTRACT function?",
            "sql": "SELECT EXTRACT(DATE\n               FROM PARSE_TIMESTAMP('%m/%d/%Y %H:%M:%S %Z %z', '11/27/2019 14:40:15 CET +0100')) AS date;"
        },
        {
            "description": "How to retrieve the restaurant name, restaurant ID, and user ID for all ConfirmOrderBtn events that occurred between 20191110 and the current date for a specific app ID?",
            "sql": "SELECT *\nFROM\n  (SELECT\n     (SELECT x.value\n      FROM UNNEST(user_properties) x\n      WHERE x.key='restaurantName'\n        AND x.value IS NOT NULL).string_value AS restaurantName,\n     (SELECT x.value\n      FROM UNNEST(user_properties) x\n      WHERE x.key='restaurantId'\n        AND x.value IS NOT NULL).string_value AS restaurantID,\n     (SELECT x.value\n      FROM UNNEST(user_properties) x\n      WHERE x.key='user_id'\n        AND x.value IS NOT NULL).string_value AS USER\n   FROM `project.dataset.some_data_set`\n   WHERE event_name=\"ConfirmOrderBtn\"\n     AND event_date BETWEEN '20191110' AND '_*'\n     AND app_info.id = \"app_id\")\nWHERE NOT (restaurantName IS NULL\n           OR restaurantID IS NULL\n           OR USER IS NULL);"
        },
        {
            "description": "How to retrieve the values of a specific column list from a table within a 15-day range?",
            "sql": "SELECT <COLUMN list>\nFROM `project.dataset.table`\nWHERE DATE(run_time) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 15 DAY) AND CURRENT_DATE();"
        },
        {
            "description": "How to retrieve the start and end time of each activity block?",
            "sql": "SELECT ROW_NUMBER() OVER(\n                         ORDER BY grp) block_num,\n                    MIN(datetime) activity_start,\n                    MAX(datetime) activity_end\nFROM\n  (SELECT *,\n          COUNTIF(flag) OVER(\n                             ORDER BY datetime) grp\n   FROM\n     (SELECT *,\n             active != LAG(active) OVER(\n                                        ORDER BY datetime) flag\n      FROM `project.dataset.activity`))\nWHERE active = 1\nGROUP BY grp;"
        },
        {
            "description": "How to retrieve the first and last row from a table?",
            "sql": "SELECT *\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER () AS rn\n   FROM <TABLE>\n   ORDER BY block_num) subquery\nWHERE rn IN (1,\n               (SELECT COUNT(*)\n                FROM <TABLE>));"
        },
        {
            "description": "How to query BigQuery tables to get all data from a folder in bucket?",
            "sql": "SELECT *\nFROM `project-id.dataset.table`\nWHERE folder = 'folder_path';"
        },
        {
            "description": "How to retrieve the network and IP range for each geographic location based on an IPv4 address?",
            "sql": "CREATE TEMP FUNCTION cidrToRange(CIDR STRING) RETURNS STRUCT<start_IP STRING, end_IP STRING> LANGUAGE js AS \"\"\"    var beg = CIDR.substr(CIDR,CIDR.indexOf('/'));    var end = beg;    var off = (1<<(32-parseInt(CIDR.substr(CIDR.indexOf('/')+1))))-1;     var sub = beg.split('.').map(function(a){return parseInt(a)});    var buf = new ArrayBuffer(4);     var i32 = new Uint32Array(buf);    i32[0]  = (sub[0]<<24) + (sub[1]<<16) + (sub[2]<<8) + (sub[3]) + off;    var end = Array.apply([],new Uint8Array(buf)).reverse().join('.');    return {start_IP: beg, end_IP: end};  \"\"\";\n\nSELECT network,\n       IP_range.*\nFROM `bigquery-public-data.geolite2.ipv4_city_blocks`,\n     UNNEST([cidrToRange(network)]) IP_range;"
        },
        {
            "description": "How to retrieve all unique rows from the table, excluding rows that have multiple occurrences of the same interval_uid and a null duration.?",
            "sql": "WITH unwanted_rows AS\n  (SELECT a.*\n   FROM `table` a\n   JOIN\n     (SELECT interval_uid,\n             COUNT(*)\n      FROM `table`\n      GROUP BY interval_uid\n      HAVING COUNT(*) > 1) b ON a.interval_uid = b.interval_uid\n   WHERE duration IS NULL)\nSELECT *\nFROM `table`\nEXCEPT DISTINCT\nSELECT *\nFROM unwanted_rows;"
        },
        {
            "description": "How to retrieve observations with a unique identifier for each group of observations for each sensorname by time.?",
            "sql": "SELECT * EXCEPT(grp),\n         ROW_NUMBER() OVER(PARTITION BY sensorname, grp\n                           ORDER BY TIME) iteration_id\nFROM\n  (SELECT *,\n          COUNTIF(iteration_start) OVER(PARTITION BY sensorname\n                                        ORDER BY TIME) grp\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to find the iteration ID for each row in a table, based on the values of a specific column?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT '1' value,\n              'a' sensorname, TIMESTAMP '2019-12-03 22:11:09' TIME,\n                                                              TRUE iteration_start\n   UNION ALL SELECT '2',\n                    'a',\n                    '2019-12-03 22:11:10',\n                    FALSE\n   UNION ALL SELECT '3',\n                    'a',\n                    '2019-12-03 22:11:11',\n                    FALSE\n   UNION ALL SELECT '4',\n                    'a',\n                    '2019-12-03 22:11:12',\n                    TRUE\n   UNION ALL SELECT '5',\n                    'a',\n                    '2019-12-03 22:11:13',\n                    FALSE\n   UNION ALL SELECT '6',\n                    'a',\n                    '2019-12-03 22:11:14',\n                    FALSE\n   UNION ALL SELECT '7',\n                    'a',\n                    '2019-12-03 22:11:15',\n                    FALSE)\nSELECT * EXCEPT(grp),\n         ROW_NUMBER() OVER(PARTITION BY sensorname, grp\n                           ORDER BY TIME) iteration_id\nFROM\n  (SELECT *,\n          COUNTIF(iteration_start) OVER(PARTITION BY sensorname\n                                        ORDER BY TIME) grp\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to retrieve unique sensor names associated with iterations that were started with 'true' values and also ended with 'true' values in the iteration_end column.?",
            "sql": "SELECT DISTINCT sensorname\nFROM\n  (SELECT *,\n          IF((iteration_start=TRUE\n              AND iteration_end = TRUE), 1, 0) AS iteration_true\n   FROM `project.dataset.table`)\nWHERE iteration_true = 1;"
        },
        {
            "description": "How to assign a unique number to each different value of a specified column in a table in BigQuery?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 pos,\n          'a' AS letter,\n          'Nick' AS name\n   UNION ALL SELECT 2,\n                    'b',\n                    'Nick'\n   UNION ALL SELECT 3,\n                    'd',\n                    'Nick'\n   UNION ALL SELECT 4,\n                    't',\n                    'Joe'\n   UNION ALL SELECT 5,\n                    'u',\n                    'Joe'\n   UNION ALL SELECT 6,\n                    'n',\n                    'Nick'\n   UNION ALL SELECT 7,\n                    'a',\n                    'Nick'\n   UNION ALL SELECT 8,\n                    'z',\n                    'Nick'\n   UNION ALL SELECT 9,\n                    'p',\n                    'Chris'\n   UNION ALL SELECT 10,\n                    'm',\n                    'Chris'\n   UNION ALL SELECT 11,\n                    'n',\n                    'Joe'\n   UNION ALL SELECT 12,\n                    'b',\n                    'Joe')\nSELECT * EXCEPT(num),\n         1 + COUNTIF(num) OVER(\n                               ORDER BY pos) num\nFROM\n  (SELECT *,\n          name != LAG(name) OVER(\n                                 ORDER BY pos) num\n   FROM `project.dataset.table`);"
        },
        {
            "description": "How to retrieve the most recent result for each unique confirmation_number?",
            "sql": "SELECT AS VALUE ARRAY_AGG(r\n                          ORDER BY seq DESC\n                         )[OFFSET(0)]\nFROM `project.dataset.results_table` r\nGROUP BY confirmation_number;"
        },
        {
            "description": "How to retrieve the total amount of all trips in the Yellow Taxi Trip dataset for the year 2018.?",
            "sql": "SELECT SUM(total_amount)\nFROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`;"
        },
        {
            "description": "How to filter rows where the _TABLE_SUFFIX is greater than the date formatted in YYYYMMDD format, when the current date is subtracted by 3 days?",
            "sql": "SELECT *\nFROM `project.dataset.table`_name\nWHERE _TABLE_SUFFIX > FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY));"
        },
        {
            "description": "How many points did each user earn in a particular day?",
            "sql": "SELECT userID,\n       SUM(markedDates.d_2018_11_30.earnedPoint) AS allEarnedPoint\nFROM `project.dataset.table`\nGROUP BY userID;"
        },
        {
            "description": "How to retrieve the total earned points for each user between specific dates.?",
            "sql": "SELECT userID,\n       SUM(CAST(JSON_EXTRACT(REGEXP_EXTRACT(x, r\"d_.*?:(.*)\"), '$.earnedPoint') AS FLOAT64)) allEarnedPoint\nFROM `project.dataset.table`,\n     UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(markedDates), r\"d_.*?:{.*?}\")) x\nWHERE REGEXP_EXTRACT(x, r\"d_(.*?)\") BETWEEN '2018_12_02' AND '2018_12_05'\nGROUP BY userID;"
        },
        {
            "description": "How to use JSON_EXTRACT_ALL() to extract values using regex on a nested STRUCT type in BigQuery?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 userID,\n          STRUCT(STRUCT(0 AS earnedPoint, TRUE AS earnedShare) AS d_2018_11_30, STRUCT(1 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_01, STRUCT(2 AS earnedPoint, FALSE AS earnedShare) AS d_2018_12_02, STRUCT(3 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_03, STRUCT(4 AS earnedPoint, FALSE AS earnedShare) AS d_2018_12_04, STRUCT(5 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_05, STRUCT(6 AS earnedPoint, TRUE AS earnedShare) AS d_2018_12_06) markedDates)\nSELECT userID,\n       SUM(CAST(JSON_EXTRACT(REGEXP_EXTRACT(x, r'\"d_.*?\":(.*)'), '$.earnedPoint') AS FLOAT64)) allEarnedPoint\nFROM `project.dataset.table`,\n     UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(markedDates), r'\"d_.*?\":{.*?}')) x\nWHERE REGEXP_EXTRACT(x, r'\"d_(.*?)\"') BETWEEN '2018_12_02' AND '2018_12_05'\nGROUP BY userID;"
        },
        {
            "description": "How to create a calendar of dates from a start date to an end date, incrementing by weeks?",
            "sql": "SELECT dte,\n       t.ended,\n       t.package\nFROM\n  (SELECT t,\n          GENERATE_DATE_ARRAY(t.purchased, t.ended, interval 1 WEEK) AS dtes\n   FROM\n     (SELECT date('2019-01-01') AS purchased,\n             date('2019-02-01') AS ended,\n             '1MOnth' AS PACKAGE) t) t\nCROSS JOIN UNNEST(t.dtes) dte;"
        },
        {
            "description": "How to retrieve a table's expiration timestamp?",
            "sql": "SELECT *\nFROM `my_project.my_dataset.INFORMATION_SCHEMA.TABLE_OPTIONS`\nWHERE option_name='expiration_timestamp';"
        },
        {
            "description": "How to retrieve the average of the difference between consecutive days for each event category and event planner, using a rolling window.?",
            "sql": "SELECT * EXCEPT(DAY, diff),\n         IFNULL(AVG(diff) OVER(PARTITION BY event_category, event_planner\n                               ORDER BY DAY), 0) rolling_avg\nFROM\n  (SELECT *,\n          DATE_DIFF(DAY, LAG(DAY) OVER(PARTITION BY event_category, event_planner\n                                       ORDER BY DAY), DAY) diff\n   FROM\n     (SELECT *,\n             SAFE_CAST(date AS DATE) AS DAY\n      FROM `project.dataset.table`));"
        },
        {
            "description": "How many events were planned by John?",
            "sql": "SELECT COUNT(*) total_events_planned\nFROM `project.dataset.table`\nWHERE event_planner = 'John';"
        },
        {
            "description": "How do the number of event planners contribute to the rolling average of events?",
            "sql": "SELECT date, event_category,\n             event_planner,\n             rolling_avg\nFROM ML.PREDICT(MODEL `{project_id}.{dataset_id}.{model_id}`, TABLE `{project_id}.{dataset_id}.{table_id}`)\nORDER BY date, event_category,\n               event_planner,\n               rolling_avg;"
        },
        {
            "description": "How to retrieve the rolling average of the 'diff' column for each event_category and event_planner over the past 2 days.?",
            "sql": "SELECT * EXCEPT(DAY, diff),\n         IFNULL(AVG(diff) OVER(PARTITION BY event_category, event_planner\n                               ORDER BY DAY ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0) rolling_avg\nFROM\n  (SELECT *,\n          DATE_DIFF(DAY, LAG(DAY) OVER(PARTITION BY event_category, event_planner\n                                       ORDER BY DAY), DAY) diff\n   FROM\n     (SELECT *,\n             SAFE_CAST(date AS DATE) AS DAY\n      FROM `project.dataset.table`));"
        },
        {
            "description": "How to retrieve the previous matching start date for each row where the start date is equal to the end date?",
            "sql": "SELECT t.*,\n       (CASE\n            WHEN start_date = end_date THEN lag(start_date) OVER (PARTITION BY (CASE\n                                                                                    WHEN start_date = end_date THEN 1\n                                                                                    ELSE 0\n                                                                                END)\n                                                                  ORDER BY start_date)\n        END) AS prev_eq_start_date\nFROM t;"
        },
        {
            "description": "How to get the previous date of start_date when start_date and end_date are the same?",
            "sql": "SELECT t.*,\n       (CASE\n            WHEN start_date = end_date THEN lag(start_date) OVER (PARTITION BY start_date = end_date\n                                                                  ORDER BY start_date)\n        END) AS prev_eq_start_date\nFROM t;"
        },
        {
            "description": "How to retrieve the previous start date for rows with the same start and end date, or NULL otherwise.?",
            "sql": "SELECT t.*,\n       (CASE\n            WHEN start_date = end_date THEN lag(start_date) OVER (PARTITION BY (CASE\n                                                                                    WHEN start_date = end_date THEN 1\n                                                                                    ELSE 2\n                                                                                END), (CASE\n                                                                                           WHEN start_date <> end_date THEN start_date\n                                                                                       END)\n                                                                  ORDER BY start_date)\n        END) AS prev_eq_start_date\nFROM t;"
        },
        {
            "description": "How to determine the content group for users upon joining and subsequent page views within a session?",
            "sql": "SELECT date, fullVisitorId,\n             visitId,\n             STRING_AGG(CASE\n                            WHEN hit.page.pagePath LIKE '%join/complete%' THEN 'join_complete'\n                            ELSE hit.contentGroup.contentGroup1\n                        END , '#'\n                        ORDER BY hit.hitNumber)\nFROM `xxxxx-ga-datasets.xxxx.ga_sessions_*` AS t,\n     UNNEST(hits) AS hit\nWHERE _TABLE_SUFFIX BETWEEN '20190101' AND '20190101'\n  AND hit.type='PAGE'\nGROUP BY 1,\n         2,\n         3\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to retrieve the bad row in the good_lines table?",
            "sql": "SELECT *\nFROM `PROJECT_ID.dataflow_test.good_lines`\nWHERE INDEX='this is a bad row';"
        },
        {
            "description": "How to retrieve any value for column c where column a's occurrences are greater than 1 within each group of column b.?",
            "sql": "SELECT a,\n       b,\n       ANY_VALUE(c) c\nFROM\n  (SELECT b,\n          ARRAY_AGG(STRUCT(a, c)) arr\n   FROM `project.dataset.table`\n   GROUP BY b\n   HAVING COUNT(DISTINCT a) > 1), UNNEST(arr)\nGROUP BY a,\n         b;"
        },
        {
            "description": "How to create a dataset called 'project.dataset.table' and insert sample data into it?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1111 a,\n          'XXXX10' b,\n                   '2019-01-01' c\n   UNION ALL SELECT 1111,\n                    'XXXX10',\n                    '2019-01-02'\n   UNION ALL SELECT 1111,\n                    'XXXX10',\n                    '2019-01-03'\n   UNION ALL SELECT 1111,\n                    'XXXX10',\n                    '2019-01-04'\n   UNION ALL SELECT 2222,\n                    'XXXX11',\n                    '2019-01-01'\n   UNION ALL SELECT 2222,\n                    'XXXX11',\n                    '2019-01-02'\n   UNION ALL SELECT 2222,\n                    'XXXX11',\n                    '2019-01-03'\n   UNION ALL SELECT 3333,\n                    'XXXX12',\n                    '2019-01-01'\n   UNION ALL SELECT 4444,\n                    'XXXX13',\n                    '2019-01-01'\n   UNION ALL SELECT 5555,\n                    'XXXX10',\n                    '2019-01-01'\n   UNION ALL SELECT 6666,\n                    'XXXX11',\n                    '2019-01-03');"
        },
        {
            "description": "How to fetch the start and end time of the current week in CST time?",
            "sql": "SELECT TIMESTAMP(DATE_TRUNC(CURRENT_DATE(), WEEK), 'CST6CDT') AS start_week,\n       TIMESTAMP_SUB(TIMESTAMP(DATE_ADD(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK), 'CST6CDT'), INTERVAL 1 SECOND) AS end_week;"
        },
        {
            "description": "How to retrieve the starting and ending dates of the first week in a given month and year.?",
            "sql": "SELECT DATE_TRUNC(DATE('2019-12-01'), WEEK) AS start_week,\n       DATE_ADD(DATE_TRUNC(DATE('2019-12-01'), WEEK), INTERVAL 6 DAY) AS end_week;"
        },
        {
            "description": "How to retrieve the start and end of the current week in CST6CDT timezone.?",
            "sql": "CREATE TEMP FUNCTION week_boundary(DAY DATE) AS (STRUCT(TIMESTAMP(DATE_TRUNC(DAY, WEEK), 'CST6CDT') AS start_week, TIMESTAMP_SUB(TIMESTAMP(DATE_ADD(DATE_TRUNC(DAY, WEEK), INTERVAL 1 WEEK), 'CST6CDT'), INTERVAL 1 SECOND) AS end_week));\n\nSELECT week_boundary(CURRENT_DATE()).*;"
        },
        {
            "description": "How to retrieve unique dates and corresponding column values from `cols` array in a JOIN?",
            "sql": "SELECT DISTINCT DATE(mytimestamp) mydate,\n                col2,\n                col3\nFROM `project.dataset.table`\nLEFT JOIN UNNEST(cols);"
        },
        {
            "description": "How to retrieve column col2, the array of structs in column cols, and the timestamp stored as a string in column mytimestamp.?",
            "sql": "SELECT col2,\n       cols,\n       STRING(mytimestamp) mytimestamp\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the names and colors of all objects in the table that have multiple accounts associated with them.?",
            "sql": "SELECT ACCOUNT,\n       name,\n       color\nFROM\n  (SELECT name,\n          ARRAY_AGG(STRUCT(ACCOUNT, color)) arr\n   FROM `project.dataset.table`\n   GROUP BY name\n   HAVING COUNT(DISTINCT ACCOUNT) > 1), UNNEST(arr);"
        },
        {
            "description": "How to retrieve the unique combination of account name and color?",
            "sql": "SELECT DISTINCT ACCOUNT,\n                color\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to create a BigQuery table with a range partition on customer_id and a bucket width of 10?",
            "sql": "CREATE TABLE `project.dataset.table` PARTITION BY RANGE_BUCKET(customer_id, GENERATE_ARRAY(0, 100, 10)) AS\nSELECT 1 AS customer_id,\n       DATE '2019-10-01' AS DAY;"
        },
        {
            "description": "How to retrieve the names, hole numbers, planned & measured depths for each hole in Frasure Creek Mining.?",
            "sql": "SELECT name,\n       un_holes.Number AS hole_number,\n       un_holes.PlannedDepth.Value AS planned_depth,\n       un_measured.Value AS measured_depth\nFROM reporting.reporting_data_staging\nLEFT JOIN UNNEST (Holes) AS un_holes ON 1=1\nLEFT JOIN UNNEST (un_holes.MeasuredDepths) AS un_measured ON 1=1\nWHERE mineName = 'Frasure Creek Mining';"
        },
        {
            "description": "How to count the number of rows in a table where the sum of two columns is greater than one?",
            "sql": "SELECT IDm,\n       COUNTIF(A + B > 1) qualified_counts\nFROM `project.dataset.table`\nGROUP BY IDm;"
        },
        {
            "description": "How to retrieve all crm_ids from `table` where the _PARTITIONTIME is 'date2' and is also present in `table` with _PARTITIONTIME 'date1'?",
            "sql": "WITH t1 AS\n  (SELECT crm_id AS w1_crm\n   FROM `project.dataset.table`\n   WHERE DATE(_PARTITIONTIME) = \"date1\"),\n     t2 AS\n  (SELECT crm_id\n   FROM `project.dataset.table`\n   WHERE DATE(_PARTITIONTIME) = \"date2\")\nSELECT crm_id\nFROM t2\nINNER JOIN t1 ON w1_crm = crm_id;"
        },
        {
            "description": "How to extract a scalar value from a JSON object using SQL?",
            "sql": "WITH DATA AS\n  (SELECT '{ \"name\" : \"Jakob\", \"age\" : \"6\" }' AS my_json)\nSELECT JSON_EXTRACT_SCALAR(my_json, '$.name') AS name,\n       JSON_EXTRACT_SCALAR(my_json, '$.age') AS age\nFROM DATA;"
        },
        {
            "description": "How to extract a value from a JSON object?",
            "sql": "WITH DATA AS\n  (SELECT '{ \"name\" : \"Jakob\", \"age\" : \"6\" }' AS my_json)\nSELECT JSON_EXTRACT_SCALAR(my_json, '$.name') AS name,\n       JSON_EXTRACT_SCALAR(my_json, '$.age') AS age\nFROM DATA;"
        },
        {
            "description": "How to find the most popular misspelled phrases in a table?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'anderstand' STR\n   UNION ALL SELECT 'anderstan'\n   UNION ALL SELECT 'andersta'\n   UNION ALL SELECT 'anderst'\n   UNION ALL SELECT 'understand'\n   UNION ALL SELECT 'understan'\n   UNION ALL SELECT 'understa'\n   UNION ALL SELECT 'underst'\n   UNION ALL SELECT 'unders'\n   UNION ALL SELECT 'under'\n   UNION ALL SELECT 'understand i'\n   UNION ALL SELECT 'understand i'\n   UNION ALL SELECT 'understand it'\n   UNION ALL SELECT 'understand it'\n   UNION ALL SELECT 'understand it y'\n   UNION ALL SELECT 'understand it ye'\n   UNION ALL SELECT 'understand it yes'\n   UNION ALL SELECT 'understand it yes it'\n   UNION ALL SELECT 'understand it yes it'),\n     TEMP AS\n  (SELECT STR,\n          COUNT(1) `count`\n   FROM `project.dataset.table`\n   GROUP BY STR)\nSELECT STR,\n       `count`\nFROM\n  (SELECT STR,\n          `count`,\n          STARTS_WITH(prev_str, STR)\n   AND ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STR, r' ')) = ARRAY_LENGTH(REGEXP_EXTRACT_ALL(prev_str, r' ')) AS flag\n   FROM\n     (SELECT STR,\n             `count`,\n             LAG(STR) OVER(\n                           ORDER BY STR DESC) AS prev_str\n      FROM TEMP))\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to get unique values across multiple columns?",
            "sql": "SELECT DISTINCT CASE\n                    WHEN STR LIKE '%understand%' THEN 'understand'\n                    WHEN STR LIKE '%anderstand%' THEN 'anderstand'\n                    ELSE 'unknown'\n                END AS STR;"
        },
        {
            "description": "How to retrieve all strings from a table where the string is not a prefix of any of the subsequent strings in the table.?",
            "sql": "WITH TEMP AS\n  (SELECT STR,\n          COUNT(1) `count`\n   FROM `project.dataset.table`\n   GROUP BY STR)\nSELECT STR,\n       `count`\nFROM\n  (SELECT STR,\n          `count`,\n          STARTS_WITH(prev_str, STR)\n   AND ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STR, r' ')) = ARRAY_LENGTH(REGEXP_EXTRACT_ALL(prev_str, r' ')) AS flag\n   FROM\n     (SELECT STR,\n             `count`,\n             LAG(STR) OVER(\n                           ORDER BY STR DESC) AS prev_str\n      FROM TEMP))\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve a list of strings from a table where the string is not preceded by another string in the table?",
            "sql": "SELECT STR\nFROM\n  (SELECT STR,\n          STARTS_WITH(prev_str, STR)\n   AND ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STR, r' ')) = ARRAY_LENGTH(REGEXP_EXTRACT_ALL(prev_str, r' ')) AS flag\n   FROM\n     (SELECT STR,\n             LAG(STR) OVER(\n                           ORDER BY STR DESC) AS prev_str\n      FROM `project.dataset.table`))\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve a list of misspelled words related to 'understand'?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'anderstand' STR\n   UNION ALL SELECT 'anderstan'\n   UNION ALL SELECT 'andersta'\n   UNION ALL SELECT 'anderst'\n   UNION ALL SELECT 'understand' STR\n   UNION ALL SELECT 'understan'\n   UNION ALL SELECT 'understa'\n   UNION ALL SELECT 'underst'\n   UNION ALL SELECT 'unders'\n   UNION ALL SELECT 'under'\n   UNION ALL SELECT 'understand i'\n   UNION ALL SELECT 'understand it'\n   UNION ALL SELECT 'understand it y'\n   UNION ALL SELECT 'understand it ye'\n   UNION ALL SELECT 'understand it yes'\n   UNION ALL SELECT 'understand it yes it')\nSELECT DISTINCT STR\nFROM `project.dataset.table`\nORDER BY STR ASC;"
        },
        {
            "description": "How to identify the unique words in a column with no duplicates?",
            "sql": "SELECT DISTINCT STR\nFROM UNNEST([\"understand it yes it\",\"understand it yes\",\"understand it\",\"understand\",\"anderstand\"]) AS STR;"
        },
        {
            "description": "How to display the results of SELECTing from a table?",
            "sql": "SELECT team,\n       score\nFROM DATA;"
        },
        {
            "description": "How many events occurred for each team's score?",
            "sql": "SELECT score,\n       COUNT(*) AS num_events\nFROM ML.LOGS.EVENTS\nGROUP BY score;"
        },
        {
            "description": "How to retrieve all unique 'str' values from the table, ordered in descending order.?",
            "sql": "SELECT STR\nFROM\n  (SELECT STR,\n          STARTS_WITH(LAG(STR) OVER(\n                                    ORDER BY STR DESC), STR) flag\n   FROM `project.dataset.table`)\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve all unique strings within the provided list of nearly identical strings, but only those in the order in which they originally appear in the list.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 'anderstand' STR\n   UNION ALL SELECT 'anderstan'\n   UNION ALL SELECT 'andersta'\n   UNION ALL SELECT 'anderst'\n   UNION ALL SELECT 'understand' STR\n   UNION ALL SELECT 'understan'\n   UNION ALL SELECT 'understa'\n   UNION ALL SELECT 'underst'\n   UNION ALL SELECT 'unders'\n   UNION ALL SELECT 'under')\nSELECT STR\nFROM\n  (SELECT STR,\n          STARTS_WITH(LAG(STR) OVER(\n                                    ORDER BY STR DESC), STR) flag\n   FROM `project.dataset.table`)\nWHERE NOT IFNULL(flag, FALSE);"
        },
        {
            "description": "How to retrieve alternate spelling of a given word using BigQuery Autocomplete.?",
            "sql": "SELECT word\nFROM `bigquery-public-data.samples.shakespeare`\nWHERE word LIKE '%understand%';"
        },
        {
            "description": "How to retrieve a single row of data?",
            "sql": "SELECT AS VALUE ARRAY_AGG(t\n                          ORDER BY DIFF\n                          )[OFFSET(0)]\nFROM `project.dataset.table` t\nGROUP BY appId,\n         clientId;"
        },
        {
            "description": "How many raids, wins, and entries are there per channel, and what is the overall win rate?",
            "sql": "SELECT r.channel,\n       COUNT(DISTINCT r.id) AS raids,\n       COUNT(DISTINCT w.raid_id) AS wins,\n       COUNT(DISTINCT e.raid_id) AS entries,\n       CAST(COUNT(DISTINCT w.raid_id) AS FLOAT) / COUNT(DISTINCT e.raid_id) AS win_rate\nFROM raid r\nLEFT JOIN entry e ON e.raid_id = r.id\nLEFT JOIN win w ON w.raid_id = r.id\nGROUP BY r.channel;"
        },
        {
            "description": "How to retrieve the data from the specified table in BigQuery, filtering the results to include rows where the value of the \"channel\" column is either \"#antonidas\" or \"#anvilmar\".?",
            "sql": "SELECT *\nFROM `bigquery-public-data.stackoverflow.posts_questions`\nWHERE tags like '%google-bigquery%';"
        },
        {
            "description": "How long was it between previous timestamp and event, in minutes?",
            "sql": "SELECT TIMESTAMP_DIFF(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', prev_time), PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', event_datetime), MINUTE)\nFROM `project.dataset.messages`;"
        },
        {
            "description": "How many rows have an event with a value of 2 in the 'events' array?",
            "sql": "SELECT COUNT(*)\nFROM `project.mydataset.mytable`\nWHERE 2 IN UNNEST(EVENTS);"
        },
        {
            "description": "How to count the number of elements equal to 2 within an array of each row?",
            "sql": "SELECT COUNTIF(2 IN UNNEST(EVENTS))\nFROM `project.mydataset.mytable`;"
        },
        {
            "description": "Retrieve how many visitors did not have category A?",
            "sql": "WITH all_visitors AS\n  (SELECT DISTINCT FullVisitorid\n   FROM `project.dataset.my_table`),\n     eventCategory_As AS\n  (SELECT DISTINCT FullVistorid\n   FROM `project.dataset.my_table`\n   LEFT JOIN unnest(hits) h\n   WHERE h.event.eventCategory = 'A')\nSELECT a.FullVisitorid\nFROM all_visitors a\nLEFT JOIN eventCategory_As b ON a.FullVistiorid = b.FullVisitorid\nWHERE b.FullVisitorid IS NULL;"
        },
        {
            "description": "How to retrieve the checksum of a string.?",
            "sql": "SELECT checksum(\"my_string\") AS checksum;"
        },
        {
            "description": "How to retrieve the states of completed jobs where the type is 'bigquery_resource'?",
            "sql": "SELECT resource.type\nFROM `INFORMATION_SCHEMA.JOBS_V2`\nWHERE protoPayload.serviceData.jobCompletedEvent.job.jobStatus.state = \"DONE\"\n  AND protoPayload.serviceData.jobCompletedEvent.job.jobMetadata.taskType = \"bigquery_resource\"\n  AND severity = \"INFO\";"
        },
        {
            "description": "How to get all rows with columns from multiple sub-query UNNEST results in BigQuery?",
            "sql": "SELECT user_id,\n\n  (SELECT AS STRUCT *\n   FROM UNNEST([a.features]),\n        UNNEST([b.features])) AS features\nFROM `project.dataset.tableA` a\nINNER JOIN `project.dataset.tableB` b USING(user_id);"
        },
        {
            "description": "How to nest rows in a single column?",
            "sql": "WITH `project.dataset.tableA` AS\n  (SELECT 1 user_id,\n          STRUCT(1 AS x, 2 AS y, 3 AS z) features),\n     `project.dataset.tableB` AS\n  (SELECT 1 user_id,\n          STRUCT(1 AS c, 2 AS d) features)\nSELECT user_id,\n\n  (SELECT AS STRUCT *\n   FROM UNNEST([a.features]),\n        UNNEST([b.features])) AS features\nFROM `project.dataset.tableA` a\nINNER JOIN `project.dataset.tableB` b USING(user_id);"
        },
        {
            "description": "How to retrieve a value with column `ValueId` in table `project.dataset.table` and label it as `ValueId`?",
            "sql": "SELECT t.* REPLACE(val AS ValueId)\nFROM `project.dataset.table` t,\n     UNNEST(SPLIT(ValueId)) AS val;"
        },
        {
            "description": "How to retrieve visitor IDs and visit IDs for visitors who viewed a specific page and completed a specific event.?",
            "sql": "WITH unnested AS\n  (SELECT FullVisitorid,\n          Visitid,\n          h.page.pagepath,\n          h.event.eventCategory\n   FROM `dataset.table`\n   LEFT JOIN unnest(hits) h),\n     somepage AS\n  (SELECT FullVisitorid,\n          Visitid\n   FROM unnested\n   WHERE pagepath = 'somepage'\n   GROUP BY 1,\n            2),\n     someevent AS\n  (SELECT FulVisitorid,\n          Visitid\n   FROM unnested\n   WHERE eventCategory = 'someevent'\n   GROUP BY 1,\n            2),\n     joined AS\n  (SELECT FulVisitorid,\n          Visitid\n   FROM somepage\n   INNER JOIN someevent USING(FullVisitorid,\n                              Visitid))\nSELECT *\nFROM joined;"
        },
        {
            "description": "How to retrieve the train number, date, maximum number of wagons, maximum total weight, and maximum total length for each train and date, grouped by train number and date.?",
            "sql": "WITH TEMP AS\n  (SELECT train_no,\n          dt,\n          MIN(startpoint) startpoint,\n          MAX(endpoint) endpoint\n   FROM `project.dataset.table`\n   GROUP BY train_no,\n            dt)\nSELECT train_no,\n       dt,\n       MAX(wagons) max_wagons,\n       MAX(total_weight) AS max_total_weight,\n       MAX(total_len) max_total_len\nFROM\n  (SELECT train_no,\n          dt,\n          POINT,\n          COUNT(wagon_no) wagons,\n          SUM(weight) total_weight,\n          SUM(LEN) total_len\n   FROM TEMP,\n        UNNEST(GENERATE_ARRAY(startpoint, endpoint)) POINT\n   LEFT JOIN `project.dataset.table` t USING(train_no,\n                                             dt)\n   WHERE POINT >= t.startpoint\n     AND POINT < t.endpoint\n   GROUP BY train_no,\n            dt,\n            POINT)\nGROUP BY train_no,\n         dt;"
        },
        {
            "description": "How to find the train that carried the maximum load and length of all the wagons in a given date range?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 train_no,\n          123 wagon_no,\n          1000 weight,\n          20 LEN,\n             '20190101' dt,\n                        0 startpoint,\n                        7 endpoint\n   UNION ALL SELECT 1,\n                    234,\n                    2000,\n                    20,\n                    '20190101',\n                    1,\n                    2\n   UNION ALL SELECT 1,\n                    345,\n                    3000,\n                    30,\n                    '20190101',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    456,\n                    1000,\n                    40,\n                    '20190101',\n                    1,\n                    6\n   UNION ALL SELECT 2,\n                    987,\n                    1000,\n                    10,\n                    '20190101',\n                    0,\n                    8\n   UNION ALL SELECT 2,\n                    876,\n                    2000,\n                    20,\n                    '20190101',\n                    1,\n                    2\n   UNION ALL SELECT 2,\n                    765,\n                    3000,\n                    20,\n                    '20190101',\n                    1,\n                    5\n   UNION ALL SELECT 2,\n                    654,\n                    1000,\n                    20,\n                    '20190101',\n                    1,\n                    6),\n     TEMP AS\n  (SELECT train_no,\n          dt,\n          MIN(startpoint) startpoint,\n          MAX(endpoint) endpoint\n   FROM `project.dataset.table`\n   GROUP BY train_no,\n            dt)\nSELECT train_no,\n       dt,\n       MAX(wagons) max_wagons,\n       MAX(total_weight) AS max_total_weight,\n       MAX(total_len) max_total_len\nFROM\n  (SELECT train_no,\n          dt,\n          POINT,\n          COUNT(wagon_no) wagons,\n          SUM(weight) total_weight,\n          SUM(LEN) total_len\n   FROM TEMP,\n        UNNEST(GENERATE_ARRAY(startpoint, endpoint)) POINT\n   LEFT JOIN `project.dataset.table` t USING(train_no,\n                                             dt)\n   WHERE POINT >= t.startpoint\n     AND POINT < t.endpoint\n   GROUP BY train_no,\n            dt,\n            POINT)\nGROUP BY train_no,\n         dt;"
        },
        {
            "description": "How to retrieve the maximum number wagons, total weight, and total length of two trains?",
            "sql": "SELECT train_no,\n       dt,\n       MAX(max_wagons),\n       MAX(max_total_weight),\n       MAX(max_total_len)\nFROM ROW\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How to retrieve rows based on a filter that compares the date component of a timestamp column to values in an array of dates.?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE DATE(my_time) IN\n    (SELECT d\n     FROM UNNEST(date_array) AS d);"
        },
        {
            "description": "How to retrieve the start and end times of intervals where the value of a given column changes.?",
            "sql": "WITH DATA AS\n  (SELECT 'abc' AS Value1,\n          123 AS Value2,\n          1 AS start_time,\n          2 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    2 AS start_time,\n                    3 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    3 AS start_time,\n                    4 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    4 AS start_time,\n                    5 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    5 AS start_time,\n                    6 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    6 AS start_time,\n                    7 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    7 AS start_time,\n                    8 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    8 AS start_time,\n                    9 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    9 AS start_time,\n                    10 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    10 AS start_time,\n                    11 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    11 AS start_time,\n                    12 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    1234 AS Value2,\n                    12 AS start_time,\n                    13 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    13 AS start_time,\n                    14 AS end_time\n   UNION ALL SELECT 'abc' AS Value1,\n                    123 AS Value2,\n                    14 AS start_time,\n                    15 AS end_time), delta AS\n  (SELECT *,\n          CASE\n              WHEN Value2 != lag(Value2) OVER (PARTITION BY Value1\n                                               ORDER BY start_time) THEN 1\n              ELSE 0\n          END AS value_changed\n   FROM DATA),\n                                     changes AS\n  (SELECT Value1,\n          Value2,\n          start_time,\n          end_time,\n          sum(value_changed) OVER (PARTITION BY Value1\n                                   ORDER BY start_time) AS change_index\n   FROM delta)\nSELECT Value1,\n       Value2,\n       change_index,\n       min(start_time) AS start_time,\n       max(end_time) AS end_time\nFROM changes\nGROUP BY Value1,\n         Value2,\n         change_index;"
        },
        {
            "description": "How to retrieve the average number of rows per day for rows in a table where the date is between a given range.?",
            "sql": "SELECT AVG(Num_Rows) AS avg_rows_per_day\nFROM\n  (SELECT DATE(Published_Date) AS DAY,\n          COUNT(*) AS Num_Rows\n   FROM `project.dataset.mytable`\n   WHERE DATE(Published_Date) BETWEEN '2019-07-01' AND '2019-07-31'\n   GROUP BY DAY);"
        },
        {
            "description": "How to retrieve stats for different players on different teams, where each row represents a particular stat for a player.?",
            "sql": "SELECT *\nFROM\n  (SELECT 'joe' name,\n                'bills' team,\n                        FALSE AS is_o,\n                                 7 AS stat1,\n                                 95 AS stat1_pctile,\n                                 9 AS stat2,\n                                 82 AS stat2_pctile),\n  (SELECT 'joe' name,\n                'bills' team,\n                        TRUE AS is_o,\n                                1 AS stat1,\n                                37 AS stat1_pctile,\n                                2 AS stat3,\n                                17 AS stat3_pctile),\n  (SELECT 'tim' name,\n                'jets' team,\n                       FALSE AS is_o,\n                                12 AS stat2,\n                                85 AS stat2_pctile,\n                                13 AS stat3,\n                                69 AS stat3_pctile);"
        },
        {
            "description": "How to how to pull the top 10 total number of articles titled 'Abe' viewed on the Spanish Wikipedia between September 1st and 10th, 2019? Group by the view date.?",
            "sql": "WITH DATA AS\n  (SELECT *\n   FROM `bigquery-public-data.wikipedia.pageviews_2019`\n   WHERE DATE(datehour) BETWEEN \"2019-09-01\" AND \"2019-09-10\"\n     AND wiki = 'es'\n     AND title LIKE 'Abe%'\n     AND VIEWS > 10)\nSELECT first_day,\n       COUNT(*) c,\n       STRING_AGG(title\n                ) new_items\nFROM\n  (SELECT title,\n          TIMESTAMP_TRUNC(MIN(datehour), DAY) first_day\n   FROM DATA\n   GROUP BY title)\nGROUP BY first_day\nORDER BY first_day;"
        },
        {
            "description": "How to retrieve the number of days since the last positive value and the timestamp of that last positive value for each customer.?",
            "sql": "WITH last_positive AS\n  (SELECT customer_id,\n          ARRAY_AGG(`timestamp`\n                    ORDER BY `timestamp` DESC\n                    )[OFFSET(0)] `timestamp`\n   FROM `project.dataset.table`\n   WHERE value >= 0\n   GROUP BY customer_id),\n     last_any AS\n  (SELECT customer_id,\n          MAX(`timestamp`) `timestamp`\n   FROM `project.dataset.table`\n   GROUP BY customer_id)\nSELECT customer_id,\n       DATE_DIFF(a.timestamp, b.timestamp, DAY) days_since,\n       DATE_ADD(b.timestamp, INTERVAL 1 DAY) `timestamp`\nFROM last_any a\nJOIN last_positive b USING(customer_id)\nWHERE a.timestamp > b.timestamp;"
        },
        {
            "description": "How to retrieve the number of days since the last positive value for each customer.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 id,\n          1 customer_id,\n          -200 value, DATE '2019-11-18' `timestamp`\n   UNION ALL SELECT 2,\n                    1,\n                    100,\n                    '2019-11-17'\n   UNION ALL SELECT 3,\n                    1,\n                    -500,\n                    '2019-11-16'\n   UNION ALL SELECT 4,\n                    1,\n                    -200,\n                    '2019-11-15'\n   UNION ALL SELECT 5,\n                    2,\n                    200,\n                    '2019-11-15'\n   UNION ALL SELECT 6,\n                    1,\n                    0,\n                    '2019-11-14'),\n     last_positive AS\n  (SELECT customer_id,\n          ARRAY_AGG(`timestamp`\n                    ORDER BY `timestamp` DESC\n                    )[OFFSET(0)] `timestamp`\n   FROM `project.dataset.table`\n   WHERE value >= 0\n   GROUP BY customer_id),\n     last_any AS\n  (SELECT customer_id,\n          MAX(`timestamp`) `timestamp`\n   FROM `project.dataset.table`\n   GROUP BY customer_id)\nSELECT customer_id,\n       DATE_DIFF(a.timestamp, b.timestamp, DAY) days_since,\n       DATE_ADD(b.timestamp, INTERVAL 1 DAY) `timestamp`\nFROM last_any a\nJOIN last_positive b USING(customer_id)\nWHERE a.timestamp > b.timestamp;"
        },
        {
            "description": "How to retrieve days since by customer ID.?",
            "sql": "SELECT customer_id,\n       days_since, timestamp\nFROM `bigquery-public-data.utility_us.country_code_iso`\nWHERE customer_id IN (1);"
        },
        {
            "description": "How to select from two separate tables using a cross join?",
            "sql": "SELECT origin,\n       d.destination,\n       v.visitors\nFROM dataset.table t\nCROSS JOIN UNNEST(struct.destination) s WITH\nOFFSET nd\nLEFT JOIN UNNEST(struct.visitors) v WITH\nOFFSET nv ON nd = nv;"
        },
        {
            "description": "How to find the number of orders placed by each customer, the date of their first order, and the revenue from their first and second orders?",
            "sql": "SELECT customer_id,\n       COUNT(*) num_orders,\n       MIN(order_date) first_order_date,\n       MAX(CASE\n               WHEN seqnum = 1 THEN revenue\n           END) AS revenue_1,\n       MAX(CASE\n               WHEN seqnum = 2 THEN revenue\n           END) AS revenue_2\nFROM\n  (SELECT o.*,\n          ROW_NUMBER() OVER (PARTITION BY customer_id\n                             ORDER BY order_date) AS seqnum\n   FROM `orders` o) o\nGROUP BY customer_id;"
        },
        {
            "description": "How do I find all distinct customers and, for each customer, retrieve the number of orders placed, their first order date, and the first and second highest revenue-generating orders?",
            "sql": "SELECT customer_id,\n       COUNT(*) num_orders,\n       MIN(order_date) first_order_date,\n       ARRAY_AGG(revenue\n                 ORDER BY order_date\n                 ) AS revenue_1_2\nFROM `orders` o\nGROUP BY customer_id;"
        },
        {
            "description": "How to how to retrieve device states from the 'gbl-imt-homerider-basguillaueb.bi_data' dataset?",
            "sql": "SELECT *\nFROM `gbl-imt-homerider-basguillaueb.bi_data.device_states`;"
        },
        {
            "description": "How to retrieve the string 40123456 by removing the leading sequence of characters '0039p' from the string '0039p40123456'.?",
            "sql": "SELECT LTRIM(\"0039p40123456\", \"p039\");"
        },
        {
            "description": "How to retrieve a list of events with a column of concatenated route values, sorted by another column.?",
            "sql": "SELECT *,\n       STRING_AGG(route) OVER(\n                              ORDER BY TIME) journey\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve a journey path from a list of timestamps and corresponding routes?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT TIME '11:03:01' TIME,\n                          'home' route\n   UNION ALL SELECT '11:03:04',\n                    'category'\n   UNION ALL SELECT '11:03:10',\n                    'product'\n   UNION ALL SELECT '11:03:21',\n                    'cart')\nSELECT *,\n       STRING_AGG(route) OVER(\n                              ORDER BY TIME) journey\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the customer journey path?",
            "sql": "SELECT TIME,\n       route,\n       journey\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions`_\nWHERE CONTAINS(route, 'home')\nORDER BY TIME;"
        },
        {
            "description": "How to retrieve counts from BigQuery?",
            "sql": "SELECT COUNT(*)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to generate a uniform random date within a given range for a specified number of IDs?",
            "sql": "WITH PARAMETERS AS\n  (SELECT 100 ids_count, DATE '2010-01-01' start_date, DATE '2020-12-31' finish_date)\nSELECT id,\n       DATE_FROM_UNIX_DATE(CAST\n                             (START +\n                                (finish - START) * RAND() AS INT64)) random_date\nFROM PARAMETERS,\n     UNNEST(GENERATE_ARRAY(1, ids_count)) id,\n     UNNEST([STRUCT(UNIX_DATE(start_date) AS start, UNIX_DATE(finish_date) AS finish)]);"
        },
        {
            "description": "How to how to retrieve all categories that are either a direct child or a subchild of a given category.?",
            "sql": "SELECT cc.*\nFROM `project.dataset.categories` c\nCROSS JOIN unnest(array[id, parent_id]) c_id\nLEFT JOIN categories cc ON cc.id = c_id;"
        },
        {
            "description": "How to retrieve categories with ID 2106 or that have 2016 as a child category.?",
            "sql": "SELECT c.*\nFROM `project.dataset.categories` c\nWHERE c.id = 2106\n  OR EXISTS\n    (SELECT 1\n     FROM `project.dataset.categories` c2\n     WHERE c2.id = 2016\n       AND c2.parentid = c.id);"
        },
        {
            "description": "How to retrieve the most recently assigned owner ID and date for a given timestamp, and the last modification date for each timestamp.?",
            "sql": "SELECT timestamp, COALESCE(owner_id, last_value(owner_id\n                                                IGNORE nulls) OVER (\n                                                                    ORDER BY timestamp)) AS owner_id,\n                  COALESCE(owner_assigneddate, LAST_VALUE(owner_assigneddate\n                                                          IGNORE NULLS) OVER (\n                                                                              ORDER BY TIMESTAMP)) AS owner_assigneddate,\n                  COALESCE(lastmodifieddate, LAST_VALUE(lastmodifieddate\n                                                        IGNORE NULLS) OVER (\n                                                                            ORDER BY TIMESTAMP)) AS lastmodifieddate\nFROM cte\nORDER BY timestamp ASC;"
        },
        {
            "description": "How to how to retrieve hit data for users who have visited page 22 at least once, have visited page 13 more than 0 times, and have either not visited page 22 or have visited page 22.?",
            "sql": "SELECT h.*\nFROM\n  (SELECT h.*,\n          countif(page like '%/page_13') OVER (PARTITION BY USER\n                                               ORDER BY hit_time) AS hit_13,\n          countif(page like '%/page_22') OVER (PARTITION BY USER\n                                               ORDER BY hit_time) AS hit_22,\n          countif(page like '%/page_22') OVER (PARTITION BY USER) AS has_22\n   FROM hits h) h\nWHERE has_22\n  AND hit_13 > 0\n  AND (hit_22 = 0\n       OR page like '%/page_22);"
        },
        {
            "description": "How to retrieve all user paths that include both /page_13 and /page_22?",
            "sql": "SELECT h.user,\n       string_agg(page\n                  ORDER BY hit_time, ' -> ')\nFROM\n  (SELECT h.*\n   FROM\n     (SELECT h.*,\n             countif(page like '%/page_13') OVER (PARTITION BY USER\n                                                  ORDER BY hit_time) AS hit_13,\n             countif(page like '%/page_22') OVER (PARTITION BY USER\n                                                  ORDER BY hit_time) AS hit_22,\n             countif(page like '%/page_22') OVER (PARTITION BY USER) AS has_22\n      FROM hits h) h\n   WHERE has_22\n     AND hit_13 > 0\n     AND (hit_22 = 0\n          OR page like '%/page_22)) h\nGROUP BY USER;"
        },
        {
            "description": "How to retrieve the window numbers for each spend_date_id based on the spend_date_id gaps being greater than 200 days.?",
            "sql": "CREATE TEMP FUNCTION splits(arr ARRAY<INT64>, SIZE INT64) RETURNS ARRAY<INT64> LANGUAGE js AS \"\"\"    var cut = parseInt(arr[0]) + parseInt(size);    var result = [arr[0]];    for(i=1; i<arr.length; i++){      if (arr[i] >= cut) {        result.push(arr[i]);         cut = parseInt(arr[i]) + parseInt(size);        }    };    return result;  \"\"\";\n\nWITH dirty_split AS\n  (SELECT spend_date_id,\n          COUNTIF(flag) OVER(\n                             ORDER BY spend_date_id) new_big_window\n   FROM\n     (SELECT spend_date_id,\n             spend_date_id - LAG(spend_date_id) OVER(\n                                                     ORDER BY spend_date_id) > 200 flag\n      FROM `project.dataset.table`)),\n     precise_split AS\n  (SELECT new_big_window,\n          splits(ARRAY_AGG(spend_date_id), 200) splits\n   FROM dirty_split\n   GROUP BY new_big_window),\n     numbering AS\n  (SELECT new_big_window,\n          val,\n          ROW_NUMBER() OVER(\n                            ORDER BY new_big_window, val) - 1 AS active_window\n   FROM precise_split,\n        UNNEST(splits) val)\nSELECT spend_date_id,\n       active_window\nFROM `project.dataset.table` t\nJOIN numbering n ON t.spend_date_id BETWEEN n.val AND n.val + 200 - 1;"
        },
        {
            "description": "How to split time series data into chunks of fixed time?",
            "sql": "CREATE TEMP FUNCTION splits(arr ARRAY<INT64>, SIZE INT64) RETURNS ARRAY<INT64> LANGUAGE js AS \"\"\"    var cut = parseInt(arr[0]) + parseInt(size);    var result = [arr[0]];    for(i=1; i<arr.length; i++){      if (arr[i] >= cut) {        result.push(arr[i]);         cut = parseInt(arr[i]) + parseInt(size);        }    };    return result;  \"\"\";\n\nWITH `project.dataset.table` AS\n  (SELECT *\n   FROM UNNEST([0,350,450,500,550,650,700]) AS spend_date_id),\n     dirty_split AS\n  (SELECT spend_date_id,\n          COUNTIF(flag) OVER(\n                             ORDER BY spend_date_id) new_big_window\n   FROM\n     (SELECT spend_date_id,\n             spend_date_id - LAG(spend_date_id) OVER(\n                                                     ORDER BY spend_date_id) > 200 flag\n      FROM `project.dataset.table`)),\n     precise_split AS\n  (SELECT new_big_window,\n          splits(ARRAY_AGG(spend_date_id), 200) splits\n   FROM dirty_split\n   GROUP BY new_big_window),\n     numbering AS\n  (SELECT new_big_window,\n          val,\n          ROW_NUMBER() OVER(\n                            ORDER BY new_big_window, val) - 1 AS active_window\n   FROM precise_split,\n        UNNEST(splits) val)\nSELECT spend_date_id,\n       active_window\nFROM `project.dataset.table` t\nJOIN numbering n ON t.spend_date_id BETWEEN n.val AND n.val + 200 - 1\nORDER BY spend_date_id;"
        },
        {
            "description": "How to retrieve distinct active windows for a given spend date ID.?",
            "sql": "SELECT DISTINCT active_window\nFROM `project.dataset.spend_dates`;"
        },
        {
            "description": "How to retrieve the repo names from the first 100 commits in the public GitHub repos dataset?",
            "sql": "SELECT repo_name\nFROM `bigquery-public-data.github_repos.commits`\n;"
        },
        {
            "description": "How to retrieve a list of unique repository names from the commits table?",
            "sql": "SELECT DISTINCT(repo_name_unnest)\nFROM `bigquery-public-data.github_repos.commits`\nCROSS JOIN UNNEST(repo_name) AS repo_name_unnest;"
        },
        {
            "description": "How to retrieve data from a JSON string formatted as '[['item1',quantity,unit_price],...]' using UNNEST and SPLIT.?",
            "sql": "WITH TABLE AS\n  (SELECT 1 AS ID,\n          '[[item1,2,1.99],[item2,1,4.99]]' AS DATA\n   UNION ALL SELECT 2 AS ID,\n                    '[[item1,2,1.99]]' AS DATA)\nSELECT ID id,\n       SPLIT(A, ',')[OFFSET(0)] AS A,\n       SPLIT(A, ',')[OFFSET(1)] AS B,\n       SPLIT(A, ',')[OFFSET(2)] AS C\nFROM TABLE t,\n           UNNEST(SPLIT(SUBSTR(DATA, 3, LENGTH(DATA) - 4), '],[')) A;"
        },
        {
            "description": "How to retrieve an ARRAY of the values in the 'my_column' column.?",
            "sql": "SELECT ARRAY\n  (SELECT value\n   FROM t.my_column) AS my_column_values\nFROM `project.dataset.my_table` t;"
        },
        {
            "description": "How to retrieve a list of values from a specific array-type column?",
            "sql": "SELECT\n  (SELECT ARRAY_AGG(value)\n   FROM t.my_column) my_column_values\nFROM `project.dataset.my_table` t;"
        },
        {
            "description": "How to retrieve an array with a range of consecutive numbers based on min and max values?",
            "sql": "SELECT tt\nFROM\n  (SELECT MIN(t.num) AS min_num,\n          MAX(t.num) AS max_num\n   FROM t) t\nCROSS JOIN UNNEST(GENERATE_ARRAY(t.min_num, t.max_num)) tt;"
        },
        {
            "description": "How to retrieve all rows from table `t` where the `type` is `A` and there is a row with `type` B after the current row within a window of unbounded rows.?",
            "sql": "WITH t (id, TYPE, orderdate) AS\n  (SELECT 1 ,\n          'A' , date '2019-03-01'\n   UNION SELECT 2 ,\n                'B' , date '2019-03-04'\n   UNION SELECT 3 ,\n                'B' , date '2019-03-04'\n   UNION SELECT 4 ,\n                'A' , date '2019-03-05'\n   UNION SELECT 5 ,\n                'A' , date '2019-03-06'\n   UNION SELECT 6 ,\n                'B' , date '2019-04-05')\nSELECT t.*\nFROM\n  (SELECT t.*,\n          min(CASE\n                  WHEN TYPE = 'B' THEN orderdate\n              END) OVER (\n                         ORDER BY orderdate ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS next_b_orderdate\n   FROM t) t\nWHERE TYPE = 'A';"
        },
        {
            "description": "How to retrieve all the orders placed between 2019-01-01 and 2019-02-01 with a total price greater than 100, and grouped by contact_email and billing_address.?",
            "sql": "SELECT o.*\nFROM\n  (SELECT o.*,\n          min(processed_at) over(PARTITION BY contact_email, billing_address) min_processed_at,\n                            sum(total_price) over(PARTITION BY contact_email, billing_address) sum_total_price\n   FROM\n     (SELECT o.*,\n             row_number() over(PARTITION BY id) INSTANCE\n      FROM orders o) o\n   WHERE INSTANCE = 1) o\nWHERE processed_at BETWEEN '2019-01-01 00:00:00 UTC' AND '2019-02-01 00:00:00 UTC'\n  AND sum_total_price > 100;"
        },
        {
            "description": "How to round a TIMESTAMP with MILLISECOND precision to the nearest second?",
            "sql": "SELECT TIMESTAMP_TRUNC(TIMESTAMP_ADD(ingest_time, INTERVAL 500 MILLISECOND), SECOND)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the rounded timestamp value to the nearest second and add 500 milliseconds to the original timestamp.?",
            "sql": "SELECT TIMESTAMP_TRUNC(TIMESTAMP_ADD(ingest_time, INTERVAL 500 MILLISECOND), SECOND)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to group data and perform calculations within those groups in ranges?",
            "sql": "SELECT cast(x/10 AS int64) AS bucket,\n       min(x) AS min_x,\n       max(x) AS max_x\nFROM unnest(generate_array(1, 1000, 1)) x\nGROUP BY 1;"
        },
        {
            "description": "How to create a new table named 'newtable' with two columns: 'name' (STRING) and 'info' (ARRAY of STRUCTs)?",
            "sql": "CREATE TABLE dataset.newtable (name STRING, info ARRAY<STRUCT<KEY STRING, value FLOAT64>>);"
        },
        {
            "description": "How to insert a new row into a table with a STRUCT type column?",
            "sql": "INSERT dataset.newtable\nVALUES ('John', [('a', 0.7), ('b', 0.8), ('c', 1.2)]);"
        },
        {
            "description": "How to create a new table with a name, struct info, and string and float64 data types?",
            "sql": "CREATE TABLE dataset.newtable AS\nSELECT 'John' AS name,\n       [STRUCT<key STRING, value FLOAT64>('a', 0.7), ('b', 0.8), ('c', 1.2)] info;"
        },
        {
            "description": "How to retrieve the sum of gross and net values for each product in a nested array, excluding voided products?",
            "sql": "SELECT *,\n  (SELECT AS STRUCT SUM(gross) gross,\n                    SUM(net) net\n   FROM UNNEST(product)\n   WHERE NOT isVoided).*\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve a nested STRUCT array from a table where the DWHKey is not null.?",
            "sql": "WITH DATA AS\n  (SELECT '2019-1-1' CreateDate,\n                     [struct<DWHKey string, LineNumber int64>('hasKey', 1), (null, null)] product\n   UNION ALL SELECT '2019-1-2',\n                    [struct<DWHKey string, LineNumber int64>(null, null), (null, null), (null, null)]\n   UNION ALL SELECT '2019-1-2',\n                    [struct<DWHKey string, LineNumber int64>('hasKey', 1), (null, null), ('hasKey', 1), (null, null)])\nSELECT *\nREPLACE (array\n           (SELECT AS struct *\n            FROM unnest(product)\n            WHERE DWHKey IS NOT NULL) AS product)\nFROM DATA;"
        },
        {
            "description": "How to retrieve rows with empty `product`?",
            "sql": "SELECT *\nFROM `project.dataset.table` \nWHERE product = ARRAY[];"
        },
        {
            "description": "How to replace the value_pctile with its complement when is_o is true, otherwise leave it unchanged?",
            "sql": "SELECT * REPLACE(IF(is_o, 100 - value_pctile, value_pctile) AS value_pctile)\nFROM flattened_table;"
        },
        {
            "description": "How to find rows where the start and end date of a time period in one table overlaps with specific dates stored in another table?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE SAFE.PARSE_DATE('%Y-%m-%d', Master.Date) BETWEEN SAFE.PARSE_DATE('%m/%d/%y', Platforms.StartDate) AND SAFE.PARSE_DATE('%m/%d/%y', Platforms.EndDate);"
        },
        {
            "description": "How to retrieve the substring after the 'MOB_' string.?",
            "sql": "SELECT SUBSTRING(your_field, LOCATE('MOB_', your_field)+4)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the text after the 'MOB_' substring in the 'your_field' column.?",
            "sql": "SELECT REGEXP_SUBSTR(your_field, '(?<=MOB_).*$')\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the characters after 'MOB_' in your_field.?",
            "sql": "SELECT substr(regexp_substr(your_field, 'MOB_(.*)'), 5) \"result\"\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the value following the string sequence 'MOB_' in the specified field?",
            "sql": "SELECT regexp_substr(your_field, 'MOB_(.*)', 1, 1, NULL, 1) \"result\"\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the timestamp truncated to the second.?",
            "sql": "SELECT TIMESTAMP_TRUNC('2019-11-11 19:10:57.181 UTC', SECOND) AS truncated_timestamp;"
        },
        {
            "description": "How to retrieve the contact emails from a table of orders where the instance is 1 and the processed_at column falls between 2018-01-01 and 2020-01-01, and also group the results by contact_email and only retrieve the ones that have processed_at values in at least two distinct years?",
            "sql": "SELECT o.contact_email\nFROM `table.orders o`\nWHERE INSTANCE = 1\n  AND processed_at >= timestamp('2018-01-01')\n  AND processed_at < timestamp('2020-01-01')\nGROUP BY o.contact_email\nHAVING count(DISTINCT year(processed_at)) = 2;"
        },
        {
            "description": "How much did Topshop/Topman spend on creatives with 'TS\\_AW19' in their name on September 20th, 2019?",
            "sql": "SELECT date, creative_name,\n             SUM(revenue)*2 AS spend\nFROM `crate-media-group-client-data.DV360_ALL.GGLDV360BM_CREATIVE_*`\nWHERE advertiser LIKE '%Topshop/Topman%'\n  AND creative_name LIKE '%TS\\_AW19%'\n  AND date = '2019-09-20'\nGROUP BY 1,\n         2\nORDER BY creative_name;"
        },
        {
            "description": "How to count the number of rows in a table where a given column matches a regular expression?",
            "sql": "WITH DATA AS\n  (SELECT 'abc' text)\nSELECT COUNT(*) c\nFROM DATA\nWHERE REGEXP_CONTAINS(text, '(?i)(a|b|c)');"
        },
        {
            "description": "How to perform a case-insensitive regular expression match in BigQuery?",
            "sql": "WITH DATA AS\n  (SELECT 'abc' text)\nSELECT COUNT(*) c\nFROM DATA\nWHERE REGEXP_CONTAINS(text, '(?i)(a)');"
        },
        {
            "description": "How to retrieve details regarding employees and project-related information, where employee dates fall within specific project start and end dates.?",
            "sql": "WITH `bigquery-project-123.emp` AS\n  (SELECT 1 EmpNo,\n          'IT101' EmpITPrj,\n                  NULL EmpFinPrj,\n                       NULL EmpHRPrj,\n                            NULL EmpIntPrj,\n                                 '2019-09-01' EmpDate\n   UNION ALL SELECT 2,\n                    NULL,\n                    'Fin101',\n                    NULL,\n                    NULL,\n                    '2001-06-05'\n   UNION ALL SELECT 3,\n                    NULL,\n                    'Fin102',\n                    NULL,\n                    NULL,\n                    '2005-11-25'\n   UNION ALL SELECT 4,\n                    NULL,\n                    NULL,\n                    NULL,\n                    'Int501',\n                    '2010-10-15'\n   UNION ALL SELECT 5,\n                    NULL,\n                    NULL,\n                    NULL,\n                    'Int105',\n                    '2019-01-10'\n   UNION ALL SELECT 6,\n                    NULL,\n                    NULL,\n                    NULL,\n                    'Int444',\n                    '2015-12-03'\n   UNION ALL SELECT 7,\n                    NULL,\n                    NULL,\n                    'HR110',\n                    NULL,\n                    '2012-08-19'\n   UNION ALL SELECT 8,\n                    'IT101',\n                    NULL,\n                    NULL,\n                    NULL,\n                    '2011-04-24'\n   UNION ALL SELECT 9,\n                    NULL,\n                    NULL,\n                    'HR105',\n                    NULL,\n                    '2005-02-09'\n   UNION ALL SELECT 10,\n                    'IT102',\n                    NULL,\n                    NULL,\n                    NULL,\n                    '2006-07-11'),\n     `bigquery-project-123.prj` AS\n  (SELECT 'Fin102' PrjID,\n                   '10/14/2005' PrjStartDate,\n                                '12/14/2005' PrjEndDate\n   UNION ALL SELECT 'IT102',\n                    '07/11/2006',\n                    '10/30/2006'\n   UNION ALL SELECT 'IT110',\n                    '11/15/2010',\n                    '01/31/2011'\n   UNION ALL SELECT 'Int101',\n                    '01/01/2015',\n                    '03/31/2015'\n   UNION ALL SELECT 'HR110',\n                    '05/19/2012',\n                    '08/19/2012'\n   UNION ALL SELECT 'Int444',\n                    '01/01/2015',\n                    '03/01/2015')\nSELECT *\nFROM `bigquery-project-123.emp` AS t1\nJOIN `bigquery-project-123.prj` t2 ON t2.PrjID IN (t1.EmpITPrj,\n                                                   t1.EmpFinPrj,\n                                                   t1.EmpHRPrj,\n                                                   t1.EmpIntPrj)\nAND SAFE.PARSE_DATE(\"%Y-%m-%d\", t1.EmpDate) BETWEEN SAFE.PARSE_DATE(\"%m/%d/%Y\", t2.PrjStartDate) AND SAFE.PARSE_DATE(\"%m/%d/%Y\", t2.PrjEndDate);"
        },
        {
            "description": "How to how to retrieve distinct project IDs (with no duplicates):?",
            "sql": "WITH EmployeeProjects AS\n  (SELECT EmpNo,\n          EmpITPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpITPrj IS NOT NULL\n   UNION ALL SELECT EmpNo,\n                    EmpFinPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpFinPrj IS NOT NULL\n   UNION ALL SELECT EmpNo,\n                    EmpHRPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpHRPrj IS NOT NULL\n   UNION ALL SELECT EmpNo,\n                    EmpIntPrj AS ProjectName\n   FROM `bigquery-public-data.samples.employees`\n   WHERE EmpIntPrj IS NOT NULL)\nSELECT DISTINCT ProjectName\nFROM EmployeeProjects;"
        },
        {
            "description": "How to rank records in BigQuery based on specific criteria?",
            "sql": "WITH correct_games_played AS\n  (SELECT \"a\" AS name,\n          7 AS num1,\n          0.4 AS num2,\n          0.55 AS num3\n   UNION ALL SELECT \"b\" AS name,\n                    13 AS num1,\n                    0.53 AS num2,\n                    0.37 AS num3\n   UNION ALL SELECT \"c\" AS name,\n                    4 AS num1,\n                    0.42 AS num2,\n                    0.32 AS num3\n   UNION ALL SELECT \"d\" AS name,\n                    17 AS num1,\n                    0.6 AS num2,\n                    0.23 AS num3\n   UNION ALL SELECT \"e\" AS name,\n                    7 AS num1,\n                    0.3 AS num2,\n                    0.25 AS num3\n   UNION ALL SELECT \"f\" AS name,\n                    16 AS num1,\n                    0.7 AS num2,\n                    0.43 AS num3\n   UNION ALL SELECT \"g\" AS name,\n                    10 AS num1,\n                    0.53 AS num2,\n                    0.52 AS num3\n   UNION ALL SELECT \"h\" AS name,\n                    5 AS num1,\n                    0.54 AS num2,\n                    0.21 AS num3\n   UNION ALL SELECT \"i\" AS name,\n                    9 AS num1,\n                    0.56 AS num2,\n                    0.17 AS num3\n   UNION ALL SELECT \"j\" AS name,\n                    3 AS num1,\n                    0.75 AS num2,\n                    0.53 AS num3)\nSELECT *,\n       RANK() OVER(\n                   ORDER BY num1 DESC) AS num1_rank,\n       IF(num1 > 4, RANK() OVER(\n                                ORDER BY IF(num1 > 4, num2, NULL) DESC), NULL) AS num2_rank,\n       IF(num1 > 3, RANK() OVER(\n                                ORDER BY IF(num1 > 3, num3, NULL) DESC), NULL) AS num3_rank\nFROM correct_games_played;"
        },
        {
            "description": "How to retrieve records by key.?",
            "sql": "SELECT *\nFROM UNNEST(user_id_json_string) AS `project.dataset.json_string`;"
        },
        {
            "description": "How to calculate the field goal percentage for each player within a subquery where the field goal attempts are nested in a separate struct?",
            "sql": "WITH wide_stats AS\n  (SELECT 'joe' name,\n                'bills' team,\n                        STRUCT(STRUCT(7 AS fga, 5 AS fgm) AS o, STRUCT(8 AS fga, 3 AS fgm) AS d) AS t1,\n                        STRUCT(STRUCT(3 AS fga, 4 AS fgm) AS o, STRUCT(9 AS fga, 2 AS fgm) AS d) AS t2\n   UNION ALL SELECT 'nick' name,\n                           'jets' team,\n                                  STRUCT(STRUCT(12 AS fga, 7 AS fgm) AS o, STRUCT(13 AS fga, 7 AS fgm) AS d) AS t1,\n                                  STRUCT(STRUCT(15 AS fga, 7 AS fgm) AS o, STRUCT(22 AS fga, 7 AS fgm) AS d) AS t2)\nSELECT *\nREPLACE (\n           (SELECT AS STRUCT t1.* REPLACE (\n                                             (SELECT AS STRUCT t1.o.*,\n                                                               SAFE_DIVIDE(wide_stats.t1.o.fgm, wide_stats.t1.o.fga) AS fg_pct) AS o)) AS t1)\nFROM wide_stats;"
        },
        {
            "description": "How to retrieve game statistics for two players, 'joe' and 'nick', from two teams, 'bills' and 'jets'.?",
            "sql": "WITH wide_stats AS\n  (SELECT 'joe' name,\n                'bills' team,\n                        STRUCT(STRUCT(7 AS fga) AS o, STRUCT(8 AS fga) AS d) AS t1,\n                        STRUCT(STRUCT(3 AS fga) AS o, STRUCT(9 AS fga) AS d) AS t2,\n                        STRUCT(3 AS pts, 9 AS ast, 5 AS reb) AS t3,\n                        7 tov,\n                        3 blk\n   UNION ALL SELECT 'nick' name,\n                           'jets' team,\n                                  STRUCT(STRUCT(12 AS fga) AS o, STRUCT(13 AS fga) AS d) AS t1,\n                                  STRUCT(STRUCT(15 AS fga) AS o, STRUCT(22 AS fga) AS d) AS t2,\n                                  STRUCT(13 AS pts, 5 AS ast, 15 AS reb) AS t3,\n                                  75 tov,\n                                  23 blk),\n     flat_stats AS\n  (SELECT name,\n          team,\n          t1.o.fga AS t1_o_fga,\n          t1.d.fga AS t1_d_fga,\n          t2.o.fga AS t2_o_fga,\n          t2.d.fga AS t2_d_fga,\n          t3.pts AS t3_pts,\n          t3.ast AS t3_ast,\n          t3.reb AS t3_reb,\n          tov,\n          blk\n   FROM wide_stats)\nSELECT name,\n       team,\n       metric,\n       COALESCE(CAST(value AS FLOAT64), 0) value\nFROM\n  (SELECT name,\n          team,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(0)], r'^\"|\"$', '') metric,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(1)], r'^\"|\"$', '') value\n   FROM flat_stats,\n        UNNEST(SPLIT(REGEXP_REPLACE(TO_JSON_STRING(flat_stats), r'{|}', ''))) pair)\nWHERE NOT LOWER(metric) IN ('name',\n                            'team');"
        },
        {
            "description": "How many field goals did Joe and Nick make in total?",
            "sql": "SELECT SUM(CASE\n               WHEN team = 'bills' THEN CASE\n                                            WHEN metric = 't1_o_fga' THEN value\n                                            WHEN metric = 't2_o_fga' THEN value\n                                            ELSE 0\n                                        END\n               WHEN team = 'jets' THEN CASE\n                                           WHEN metric = 't1_o_fga' THEN value\n                                           WHEN metric = 't2_o_fga' THEN value\n                                           ELSE 0\n                                       END\n               ELSE 0\n           END) AS total_o_fga;"
        },
        {
            "description": "How to retrieve player-specific statistics from an unpacked JSON object?",
            "sql": "SELECT name,\n       team,\n       metric,\n       SAFE_CAST(value AS FLOAT64) value\nFROM\n  (SELECT name,\n          team,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(0)], r'^\"|\"$', '') metric,\n          REGEXP_REPLACE(SPLIT(pair, ':')[OFFSET(1)], r'^\"|\"$', '') value\n   FROM `project.dataset.flat_stats` flat_stats,\n        UNNEST(SPLIT(REGEXP_REPLACE(TO_JSON_STRING(flat_stats), r'{|}', ''))) pair)\nWHERE NOT LOWER(metric) IN ('name',\n                            'team');"
        },
        {
            "description": "How to retrieve teams and games for all offensive and defensive stats as nested records within each row?",
            "sql": "SELECT team,\n       game,\n\n  (SELECT AS STRUCT offensive.*\n   EXCEPT (team,\n           game)) AS offensive,\n\n  (SELECT AS STRUCT defensive.*\n   EXCEPT (team,\n           game)) AS defensive\nFROM offensive\nFULL JOIN defensive USING (team,\n                           game);"
        },
        {
            "description": "How to select specific fields from a complex BigQuery object?",
            "sql": "SELECT team,\n       game,\n       offensive.fga AS off_fga,\n       offensive.fgm AS off_fgm,\n       offensive.ast AS off_ast,\n       offensive.blk AS off_blk,\n       offensive.stk AS off_stk,\n       defensive.fga AS def_fga,\n       defensive.fgm AS def_fgm,\n       defensive.ast AS def_ast,\n       defensive.blk AS def_blk,\n       defensive.stk AS def_stk\nFROM UNNEST([STRUCT<team STRING, game STRING, offensive STRUCT<fga STRING, fgm STRING, ast STRING, blk STRING, stk STRING>, defensive STRUCT<fga STRING, fgm STRING, ast STRING, blk STRING, stk STRING>>] [STRUCT(\"1\", \"1\", STRUCT(\"1\", \"2\", \"3\", \"4\", \"5\"), STRUCT(\"21\", \"22\", \"23\", \"24\", \"25\"))]);"
        },
        {
            "description": "How to how to retrieve all rows where there's no 'event2' or the 'event2' sequence is less than or equal to the current 'sequence'.?",
            "sql": "SELECT t.*\nFROM\n  (SELECT t.*,\n          min(CASE\n                  WHEN TYPE = 'event2' THEN SEQUENCE\n              END) OVER (PARTITION BY id) AS event2_sequence\n   FROM t) t\nWHERE event2_sequence IS NULL\n  OR SEQUENCE <= event2_sequence;"
        },
        {
            "description": "How to retrieve all records of a given ID for a table, based on the minimum sequence of an event2 type.?",
            "sql": "SELECT t.*\nFROM t\nWHERE t.sequence <=\n    (SELECT min(t2.sequence)\n     FROM t t2\n     WHERE t2.id = t.id\n       AND t2.type = 'event2');"
        },
        {
            "description": "How to retrieve the rows of table `t` with a sequence number that isn't greater than the sequence number of the first row with `type`=`event2` in table `t`?",
            "sql": "SELECT t.*\nFROM t\nWHERE t.sequence <=\n    (SELECT coalesce(min(CASE\n                             WHEN t2.type = 'event2' THEN t2.sequence\n                         END), max(t2.sequence))\n     FROM t t2\n     WHERE t2.id = t.id);"
        },
        {
            "description": "How to retrieve the latest value associated with each customer and their latest month available.?",
            "sql": "WITH customers AS\n  (SELECT DISTINCT customer_id\n   FROM `project.dataset.table`),\n     months AS\n  (SELECT MONTH\n   FROM\n     (SELECT DATE_TRUNC(MIN(timestamp), MONTH) min_month,\n             DATE_TRUNC(MAX(timestamp), MONTH) max_month\n      FROM `project.dataset.table`), UNNEST(GENERATE_DATE_ARRAY(min_month, max_month, INTERVAL 1 MONTH)) MONTH)\nSELECT customer_id,\n       IFNULL(value, LEAD(value) OVER(win)) value,\n       IFNULL(timestamp, DATE_ADD(LEAD(timestamp) OVER(win), INTERVAL DATE_DIFF(MONTH, LEAD(MONTH) OVER(win), MONTH) MONTH)) timestamp\nFROM months,\n     customers\nLEFT JOIN\n  (SELECT DATE_TRUNC(timestamp, MONTH) MONTH,\n                                       customer_id,\n                                       ARRAY_AGG(STRUCT(value, timestamp)\n                                                 ORDER BY timestamp DESC\n                                                 )[OFFSET(0)].*\n   FROM `project.dataset.table`\n   GROUP BY MONTH,\n            customer_id) USING(MONTH,\n                               customer_id) WINDOW win AS (PARTITION BY customer_id\n                                                           ORDER BY MONTH DESC);"
        },
        {
            "description": "How to retrieve the last value for each customer for each month.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 1 customer_id,\n          -500 value, DATE '2019-10-12' timestamp\n   UNION ALL SELECT 1,\n                    -300,\n                    '2019-10-11'\n   UNION ALL SELECT 1,\n                    -200,\n                    '2019-10-10'\n   UNION ALL SELECT 2,\n                    200,\n                    '2019-09-10'\n   UNION ALL SELECT 2,\n                    100,\n                    '2019-08-11'\n   UNION ALL SELECT 2,\n                    50,\n                    '2019-07-12'\n   UNION ALL SELECT 1,\n                    600,\n                    '2019-09-02'),\n     customers AS\n  (SELECT DISTINCT customer_id\n   FROM `project.dataset.table`),\n     months AS\n  (SELECT MONTH\n   FROM\n     (SELECT DATE_TRUNC(MIN(timestamp), MONTH) min_month,\n             DATE_TRUNC(MAX(timestamp), MONTH) max_month\n      FROM `project.dataset.table`), UNNEST(GENERATE_DATE_ARRAY(min_month, max_month, INTERVAL 1 MONTH)) MONTH)\nSELECT customer_id,\n       IFNULL(value, LEAD(value) OVER(win)) value,\n       IFNULL(timestamp, DATE_ADD(LEAD(timestamp) OVER(win), INTERVAL DATE_DIFF(MONTH, LEAD(MONTH) OVER(win), MONTH) MONTH)) timestamp\nFROM months,\n     customers\nLEFT JOIN\n  (SELECT DATE_TRUNC(timestamp, MONTH) MONTH,\n                                       customer_id,\n                                       ARRAY_AGG(STRUCT(value, timestamp)\n                                                 ORDER BY timestamp DESC\n                                                 )[OFFSET(0)].*\n   FROM `project.dataset.table`\n   GROUP BY MONTH,\n            customer_id) USING(MONTH,\n                               customer_id) WINDOW win AS (PARTITION BY customer_id\n                                                           ORDER BY MONTH DESC);"
        },
        {
            "description": "How to create a partitioned version of a table with sub-partitions for each day of a column.?",
            "sql": "CREATE TABLE `temp.questions_partitioned` PARTITION BY DATE(creation_date) AS\nSELECT *\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to create a partitioned and clustered table with a computed fake_date column?",
            "sql": "CREATE TABLE `temp.questions_clustered` PARTITION BY fake_date CLUSTER BY creation_date AS\nSELECT *,\n       DATE('2000-01-01') fake_date\nFROM `fh-bigquery.stackoverflow_archive.201906_posts_questions`;"
        },
        {
            "description": "How to retrieve the total score for all questions created after 2019-01-01?",
            "sql": "SELECT sum(score)\nFROM `temp.questions_clustered`\nWHERE creation_date > \"2019-01-01\";"
        },
        {
            "description": "How to retrieve the sum of values within a specified number of days for each city?",
            "sql": "CREATE TEMP FUNCTION my_func(arr ARRAY<STRUCT<date_col DATE, val_col INT64>>, days INT64) AS (\n                                                                                                (SELECT CAST(SUM(IF(date_col > DATE_SUB(CURRENT_DATE(), INTERVAL days DAY), val_col, 0)) AS INT64)\n                                                                                                 FROM UNNEST(arr)));\n\nSELECT city,\n       my_func(ARRAY_AGG((date, value)), 7) value_7,\n       my_func(ARRAY_AGG((date, value)), 14) value_14\nFROM `project.dataset.table`\nGROUP BY city;"
        },
        {
            "description": "How to retrieve data points on a 7-day and 14-day interval for a specific column, using ARRAY_AGG.?",
            "sql": "SELECT my_func(ARRAY_AGG((date, value2)), 7) value2_7,\n       my_func(ARRAY_AGG((date, value2)), 14) value2_14;"
        },
        {
            "description": "How many customers placed the indicated number of orders between the specified dates?",
            "sql": "SELECT total_transaction,\n       COUNT(*)\nFROM\n  (SELECT customer_no,\n          COUNT(*) AS total_transaction\n   FROM [bi-dwhdev-01:source.daily_order]\n   WHERE DATE(order_time) >= '2018-04-01'\n     AND DATE(order_time) <= '2018-04-10'\n   GROUP BY customer_no) c\nGROUP BY total_transaction\nORDER BY total_transaction DESC;"
        },
        {
            "description": "How to retrieve the commit ID, repository name, and commit date for a specific GitHub repository?",
            "sql": "SELECT\nCOMMIT AS\nCOMMIT, repo_name AS repo_name,\n        committer.date AS DATE\nFROM `bigquery-public-data.github_repos.commits`\nWHERE 'torvalds/linux' IN UNNEST(repo_name)\n;"
        },
        {
            "description": "How to retrieve the count of null values for each column in a table.?",
            "sql": "SELECT col_name,\n       COUNT(1) nulls_count\nFROM `project.dataset.table` t,\n     UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(t), r\"(\\w+)\":null')) col_name\nGROUP BY col_name;"
        },
        {
            "description": "How to retrieve the agent's earliest and latest booking dates for each destination.?",
            "sql": "SELECT agent_id,\n       travel_destination,\n       min(date_of_booking) first_date_of_booking,\n       max(date_of_booking) max_date_of_booking\nFROM\n  (SELECT t.*,\n          row_number() over(PARTITION BY agent_id\n                            ORDER BY date_of_booking) rn1,\n                       row_number() over(PARTITION BY agent_id, travel_destination\n                                         ORDER BY date_of_booking) rn2\n   FROM mytable t) t\nGROUP BY agent_id,\n         rn1 - rn2,\n         travel_destination\nORDER BY first_date_of_booking;"
        },
        {
            "description": "How to retrieve all unique customer IDs associated with travel destinations visited by a given agent ID.?",
            "sql": "SELECT DISTINCT customer_id\nFROM `project.sample_data.bookings`\nWHERE agent_id = 'A1001';"
        },
        {
            "description": "How to retrieve a list of unique agent ids and a count of the number of bookings they have made?",
            "sql": "SELECT agent_id,\n       COUNT(travel_destination) AS number_of_bookings\nFROM bookings\nGROUP BY agent_id;"
        },
        {
            "description": "How to retrieve agent travel destinations and collect related information.?",
            "sql": "SELECT agent_id,\n       string_agg(travel_destination\n                  ORDER BY first_date_of_booking) travel_destination\nFROM () t\nGROUP BY agent_id;"
        },
        {
            "description": "How to retrieve first n values from an array, and return as a new array?",
            "sql": "CREATE TEMP FUNCTION TopN(arr ANY TYPE, n INT64) AS (ARRAY\n                                                       (SELECT x\n                                                        FROM UNNEST(arr) AS x WITH\n                                                        OFFSET OFF\n                                                        WHERE OFF < n\n                                                        ORDER BY OFF));\n\nWITH DATA AS\n  (SELECT 1001 AS id,\n          ['a', 'b', 'c'] AS array_1\n   UNION ALL SELECT 1002 AS id,\n                    ['d', 'e', 'f', 'g'] AS array_1\n   UNION ALL SELECT 1003 AS id,\n                    ['h', 'i'] AS array_1)\nSELECT *,\n       TopN(array_1, 2) AS my_result\nFROM DATA;"
        },
        {
            "description": "How to retrieve BigQuery datasets using standard SQL?",
            "sql": "SELECT *\nFROM `bigquery-public-data.usa_names.usa_1910_current`;"
        },
        {
            "description": "How to get the session start time for each user and event in the database?",
            "sql": "WITH user_events AS\n  (SELECT 1 AS user_id,\n          'session_start' AS event_name,\n          0 AS event_time\n   UNION ALL SELECT 1,\n                    'video_play',\n                    2\n   UNION ALL SELECT 1,\n                    'ecommerce_purchase',\n                    3\n   UNION ALL SELECT 1,\n                    'session_start',\n                    100\n   UNION ALL SELECT 1,\n                    'video_play',\n                    105)\nSELECT user_id,\n       event_name,\n       event_time,\n       MIN(event_time) OVER(PARTITION BY user_id, SESSION) AS session_start_time\nFROM\n  (SELECT user_id,\n          event_name,\n          event_time,\n          COUNTIF(event_name='session_start') OVER(PARTITION BY user_id\n                                                   ORDER BY event_time) AS SESSION\n   FROM user_events) AS x\nORDER BY event_time;"
        },
        {
            "description": "How to retrieve order details with customer names?",
            "sql": "SELECT Orders.OrderID,\n       Customers.CustomerName,\n       Orders.OrderDate\nFROM `project.dataset.Orders` Orders\nINNER JOIN `project.dataset.Customers` Customers ON Orders.CustomerID = Customers.CustomerID;"
        },
        {
            "description": "How many countries were represented in the sessions that occurred after 11 AM on July 1st, 2017?",
            "sql": "SELECT DISTINCT geoNetwork.country\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170701`\nWHERE EXISTS\n    (SELECT 1\n     FROM UNNEST(hits) hit\n     WHERE hit.hour > 11);"
        },
        {
            "description": "How to retrieve the word, count, and corpus information for a corpus on a given date?",
            "sql": "SELECT word,\n       word_count,\n       corpus,\n       corpus_date\nFROM `project.dataset.wordcount`\nWHERE corpus = @corpus\n  AND corpus_date = @corpusDate;"
        },
        {
            "description": "How to retrieve a column with multiple rows containing different values.?",
            "sql": "SELECT 2 AS y\nUNION ALL\nSELECT 1 AS y;"
        },
        {
            "description": "How to retrieve the maximum letter and number from a nested struct in each row.?",
            "sql": "WITH DATA AS\n  (SELECT [ STRUCT(1 AS p, [STRUCT('a' AS letter, [4,5,6] AS qb)] AS qq),\n            STRUCT(2 AS p, [STRUCT('b' AS letter, [7,8,9] AS qb)]),\n            STRUCT(3 AS p, [STRUCT('c' AS letter, [10,11,12] AS qb)]) ] AS ROW)\nSELECT ROW,\n\n  (SELECT MAX(letter)\n   FROM UNNEST(ROW) r,\n        UNNEST(r.qq) q) AS max_letter,\n\n  (SELECT MAX(n)\n   FROM UNNEST(ROW) r,\n        UNNEST(r.qq) q,\n        UNNEST(q.qb) n) AS max_number\nFROM DATA;"
        },
        {
            "description": "How to retrieve total revenue by Product Custom Dimension 10 and Custom Dimension 1 for the date of 20180608?",
            "sql": "SELECT SUM(totals.totalTransactionRevenue)/1000000 AS revenue,\n\n  (SELECT MAX(IF(INDEX=10, value, NULL))\n   FROM UNNEST(hits) AS hit,\n        UNNEST(hit.products) product,\n        UNNEST(product.customDimensions)) AS product_CD10,\n\n  (SELECT MAX(IF(INDEX=1, value, NULL))\n   FROM UNNEST(hits) AS hit,\n        UNNEST(hit.customDimensions)) AS CD1\nFROM `project.dataset.ga_sessions_20180608`\nGROUP BY product_CD10,\n         CD1;"
        },
        {
            "description": "How to retrieve only specific characters from the 'link_id' column starting at the 4th character.?",
            "sql": "SELECT SUBSTR(link_id, 4) AS New_column\nFROM `project.dataset.table_name`;"
        },
        {
            "description": "How to retrieve the tables and associated metadata in a dataset?",
            "sql": "SELECT *\nFROM [project:dataset.__TABLES_SUMMARY__];"
        },
        {
            "description": "How to retrieve the number of rows in each of the specified tables on a specified day.?",
            "sql": "SELECT rowdate AS Date,\n       SUM(t1_rows) AS t1_rows,\n       SUM(t2_rows) AS t2_rows\nFROM\n  (SELECT rowdate,\n          COUNT(*) AS t1_rows,\n          0 AS t2_rows\n   FROM `project.dataset.table1`\n   GROUP BY rowdate\n   UNION ALL SELECT rowdate,\n                    0 AS t1_rows,\n                    COUNT(*) AS t2_rows\n   FROM `project.dataset.table2`\n   GROUP BY rowdate) t\nGROUP BY rowdate\nORDER BY rowdate;"
        },
        {
            "description": "How to retrieve all comments within r/nba sorted by subreddit ID, then parent ID, then creation timestamp (most recent first).?",
            "sql": "SELECT BODY,\n       parent_id,\n       created_utc\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER (PARTITION BY parent_id\n                             ORDER BY created_utc DESC) AS rn\n   FROM `fh-bigquery.reddit_comments.2018_01`\n   WHERE subreddit_id = 't5_2zkvo') t\nWHERE rn = 1\nORDER BY parent_id,\n         BODY,\n         created_utc DESC;"
        },
        {
            "description": "How to retrieve the original comments of all threads created in January 2018 on Reddit.?",
            "sql": "SELECT t1.*\nFROM `fh-bigquery.reddit_comments.2018_01` t1\nINNER JOIN\n  (SELECT parent_id,\n          MIN(created_utc) AS first_created_utc\n   FROM `fh-bigquery.reddit_comments.2018_01`\n   GROUP BY parent_id) t2 ON t1.parent_id = t2.parent_id\nAND t1.created_utc = t2.first_created_utc;"
        },
        {
            "description": "How to filter database backups created in the past 24 hours using BigQuery SQL?",
            "sql": "SELECT database_name,\n       backup_info.backup_time,\n       backup_info.size_bytes,\n       backup_info.backup,\n       backup_info.database_dialect\nFROM `bigquery-public-data.cloud_storage_samples.cloud_storage_backup`\nWHERE backup_info.backup_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR);"
        },
        {
            "description": "How to retrieve data from the past 7 days from the table?",
            "sql": "SELECT *\nFROM `project.dataset.table_name_*`\nWHERE _TABLE_SUFFIX > FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY));"
        },
        {
            "description": "How to retrieve data from the last 7 days from a table that is partitioned using wildcard suffix with date partitioning pattern YYYYmmdd?",
            "sql": "SELECT *\nFROM `project.dataset.table_name_*`\nWHERE _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) AND FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY));"
        },
        {
            "description": "How to format a date value as different timestamps in BigQuery?",
            "sql": "WITH TEMP AS\n  (SELECT CURRENT_DATE() AS dt)\nSELECT dt,\n       CAST(dt AS TIMESTAMP) AS ts,\n       TIMESTAMP(dt) AS ts2\nFROM TEMP;"
        },
        {
            "description": "How to retrieve the product and event data grouped by product ID and event type for a given list of product IDs and a time threshold?",
            "sql": "SELECT productId,\n       eventType,\n       COUNT(*) AS COUNT\nFROM `xyz.xyz.abc`\nWHERE productId IN UNNEST(@product_ids)\n  AND eventTime > CAST(@time_thresh AS DATETIME)\nGROUP BY eventType,\n         productId\nORDER BY productId;"
        },
        {
            "description": "How to group rows by two columns and concatenate a third column into a single string with '/' as a separator?",
            "sql": "SELECT start_date,\n       end_date,\n       STRING_AGG(STR, '/') STR\nFROM `project.dataset.table`\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How to retrieve a table of values for a normal distribution with a mean of 0 and a variance of 1.?",
            "sql": "CREATE\nTEMPORARY FUNCTION normal(x FLOAT64) RETURNS FLOAT64 LANGUAGE js AS \"\"\"    var mean=0;    var variance=1;    var x0=1/(Math.sqrt(2*Math.PI*variance));    var x1=-Math.pow(x-mean,2)/(2*Math.pow(variance,2));    return x0*Math.pow(Math.E,x1);  \"\"\";\n\nWITH numbers AS\n  (SELECT x\n   FROM UNNEST(GENERATE_ARRAY(-10, 10, 0.5)) AS x)\nSELECT x,\n       normal(x) AS\nNORMAL\nFROM numbers;"
        },
        {
            "description": "How to capitalize the first letter of each word in a string?",
            "sql": "CREATE\nTEMPORARY FUNCTION capitalize(STR STRING) RETURNS STRING LANGUAGE js AS \"\"\" return str.replace(/\\w\\S*/g, function(txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); }); \"\"\";\n\nSELECT STR,\n       capitalize(STR) AS capitalized_str\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to capitalize the first letter of each word in a string using a SQL function?",
            "sql": "CREATE\nTEMPORARY FUNCTION capitalize(STR STRING) AS (\n                                                (SELECT STRING_AGG(CONCAT(UPPER(SUBSTR(word, 1, 1)), LOWER(SUBSTR(word, 2))), ' '\n                                                                   ORDER BY pos)\n                                                 FROM UNNEST(SPLIT(STR, ' ')) word WITH\n                                                 OFFSET pos));\n\nSELECT STR,\n       capitalize(STR) AS capitalized_str\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve all the rows with a specific value 'abc xyz' in column 'str' from a table.?",
            "sql": "SELECT *\nFROM `project.dataset.table`\nWHERE STR = 'abc xyz';"
        },
        {
            "description": "How to capitalize the first letter of every word in a string?",
            "sql": "CREATE\nTEMPORARY FUNCTION capitalize(STR STRING) RETURNS STRING LANGUAGE js AS \"\"\" return str.replace(/\\b(.)/g, function(match, chr){return chr.toUpperCase();}); \"\"\";\n\nSELECT STR,\n       capitalize(STR) AS capitalized_str\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to create a new BigQuery table with a column that allows multiple/repeated values?",
            "sql": "CREATE TABLE `project.dataset.tablename` (id INT64,\n                                          name STRING, cellIDs ARRAY<INT64>);"
        },
        {
            "description": "How to retrieve a list of all cell IDs?",
            "sql": "SELECT name,\n       TYPE,\n       MODE\nFROM `project.dataset.INFORMATION_SCHEMA.COLUMNS`\nWHERE TABLE_NAME = 'small_table'\n  AND COLUMN_NAME = 'cellIDs';"
        },
        {
            "description": "How to retrieve all records where '35' is present in any of the 'phy, che, math, cs, eng' columns.?",
            "sql": "WITH temp_table AS\n  (SELECT 'studentA' AS name,\n          36 AS phy,\n          67 AS che,\n          75 AS math,\n          65 AS cs,\n          64 AS eng\n   UNION ALL SELECT 'studentB',\n                    44,\n                    57,\n                    37,\n                    73,\n                    57\n   UNION ALL SELECT 'studentC',\n                    94,\n                    87,\n                    48,\n                    72,\n                    63)\nSELECT *\nFROM temp_table\nWHERE 35 IN (phy,\n             che,\n             math,\n             cs,\n             eng);"
        },
        {
            "description": "How to retrieve a list of unique groups associated with each name?",
            "sql": "SELECT name,\n       STRING_AGG(DISTINCT `group`\n                  ORDER BY `group`) AS groups\nFROM `project.dataset.table`\nGROUP BY name;"
        },
        {
            "description": "How many unique resettable_device_ids are there per day in the last 30 days?",
            "sql": "WITH days AS\n  (SELECT DAY\n   FROM UNNEST(GENERATE_DATE_ARRAY(DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY), CURRENT_DATE(), INTERVAL 1 DAY)) AS DAY)\nSELECT DAY AS DAY,\n              COUNT(DISTINCT user_dim.device_info.resettable_device_id) AS resettable_device_ids\nFROM `ANDROID.app_events_*`,\n     UNNEST(event_dim) AS event_dim\nJOIN days ON PARSE_DATE('%Y%m%d', event_dim.date) = DAY\nWHERE event_dim.name = 'session_start'\nGROUP BY DAY\nORDER BY DAY DESC;"
        },
        {
            "description": "How to retrieve the department and category hierarchy and include a row for each department, one for each category, and one for 'Various' in each case.?",
            "sql": "SELECT *\nFROM `project.dataset.query1`\nUNION ALL\nSELECT 'Category' AS Hier_Level,\n       MAX(Department) AS Department,\n       Category,\n       'Various' AS Subcategory,\n       SUM(Dollars) AS Dollars\nFROM `project.dataset.query1`\nGROUP BY Category\nUNION ALL\nSELECT 'Department' AS Hier_Level,\n       Department,\n       'Various' AS Category,\n       'Various' AS Subcategory,\n       SUM(Dollars) AS Dollars\nFROM `project.dataset.query1`\nGROUP BY Department;"
        },
        {
            "description": "How to retrieve the total Dollars spent on various subcategories within the Electronics department?",
            "sql": "SELECT Department,\n       Category,\n       Subcategory,\n       SUM(Dollars) AS Total_Dollars\nFROM `project.dataset.table`\nWHERE Department = 'Electronics'\nGROUP BY Department,\n         Category,\n         Subcategory;"
        },
        {
            "description": "How to copy a table and remove duplicate or old rows based on row_number()?",
            "sql": "CREATE TABLE `project.dataset.new_tab_name` AS\nSELECT * EXCEPT(rn)\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER(PARTITION BY col_1_id, col_2_id\n                            ORDER BY 1) AS rn\n   FROM `project.dataset.tab_name`)\nWHERE rn = 1;"
        },
        {
            "description": "How to create a new BigQuery table deduping rows with same column values?",
            "sql": "CREATE OR REPLACE TABLE `project.dataset.tab_name` AS\nSELECT *\nFROM `project.dataset.tab_name` QUALIFY ROW_NUMBER() OVER(PARTITION BY col_1_id, col_2_id\n                                                          ORDER BY 1) = 1;"
        },
        {
            "description": "How to retrieve columns from two tables and combine any empty values with the ANY_VALUE() function?",
            "sql": "SELECT A.a,\n       A.b,\n       ANY_VALUE(A.c) AS c,\n       ANY_VALUE(A.d) AS d,\n       ANY_VALUE(B.c) AS e,\n       ANY_VALUE(B.d) AS f\nFROM `project.dataset.my_table_A` A\nFULL OUTER JOIN `project.dataset.my_table_B` B ON A.a = B.a\nAND A.b = B.b\nGROUP BY A.a,\n         A.b;"
        },
        {
            "description": "How to set a field as repeated for a nested record type?",
            "sql": "CREATE TABLE `project.dataset.table_name` (id INT64,\n                                           name STRING, phone_numbers ARRAY<STRING>);"
        },
        {
            "description": "How to display a custom message when there are no results in BigQuery?",
            "sql": "WITH your_query AS\n  (SELECT *\n   FROM `project.dataset.table`\n   WHERE FALSE)\nSELECT *\nFROM your_query\nUNION ALL\nSELECT 'No results found' AS RESULT\nWHERE NOT EXISTS\n    (SELECT 1\n     FROM your_query);"
        },
        {
            "description": "How to append a row with a no results message to the top of a query if the query returns no results?",
            "sql": "WITH your_query AS\n  (SELECT *\n   FROM `project.dataset.table`\n   WHERE FALSE)\nSELECT *\nFROM your_query\nUNION ALL\nSELECT 'No results found',\n       0,\n       'none'\nWHERE NOT EXISTS\n    (SELECT 1\n     FROM your_query);"
        },
        {
            "description": "How to retrieve all rows from the query results?",
            "sql": "SELECT *\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to use legacy SQL in BigQuery?",
            "sql": "SELECT field1,\n       field2\nFROM [project:dataset.table]\nWHERE CONDITION = 'value';"
        },
        {
            "description": "How to list the top 10 titles starting with 'G', containing the letter 'o' twice, and ending with 'e' in the English Wikipedia articles?",
            "sql": "SELECT REGEXP_REPLACE(title, r'_', ' ') AS regexp_title,\n       SUM(VIEWS) AS sum_views\nFROM `bigquery-public-data.wikipedia_benchmark.Wiki100M`\nWHERE NOT title LIKE '%:%'\n  AND wikimedia_project = 'wp'\n  AND LANGUAGE = 'en'\n  AND REGEXP_CONTAINS(title, r'^G.*o.*o.*e$')\nGROUP BY regexp_title\nORDER BY sum_views DESC\nLIMIT 10;"
        },
        {
            "description": "How to retrieve the minimum and maximum values for a given journey ID.?",
            "sql": "SELECT j.journey_id,\n       min(value),\n       max(value)\nFROM journey_times jt\nJOIN vehicles v ON jt.vehicle_id = v.vehicle_id\nAND v.timestamp BETWEEN jt.start AND jt.finish\nGROUP BY j.journey_id;"
        },
        {
            "description": "How to retrieve daily user counts by date in 'US/Eastern' time zone?",
            "sql": "SELECT EXTRACT(DATE\n               FROM DATETIME(timestamp, 'US/Eastern')) date, SUM(users) total_users\nFROM `project.mydataset.mytable`\nGROUP BY 1\nORDER BY 1;"
        },
        {
            "description": "How to retrieve the total starting revenue and client count for each month, by taking the first sale price and license count for each client in that month.?",
            "sql": "SELECT FirstDayOfMonth,\n       FirstDayOfNextMonth,\n       SUM(price_current) StartingRevenue,\n       COUNT(1) StartingClientCount\nFROM\n  (SELECT FirstDayOfMonth,\n          FirstDayOfNextMonth,\n          clientid,\n          price_current\n   FROM\n     (SELECT FirstDayOfMonth,\n             FirstDayOfNextMonth,\n             clientid,\n             FIRST_VALUE(price_current) OVER(latest_values) price_current,\n                                        FIRST_VALUE(license_count_current) OVER(latest_values) license_count_current\n      FROM `project.dataset.CalendarMonths` cm\n      JOIN `project.dataset.ClientLogs` cl ON `timestamp` < FirstDayOfMonth WINDOW latest_values AS (PARTITION BY clientid\n                                                                                                     ORDER BY `timestamp` DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))\n   WHERE license_count_current > 0\n   GROUP BY FirstDayOfMonth,\n            FirstDayOfNextMonth,\n            clientid,\n            price_current)\nGROUP BY FirstDayOfMonth,\n         FirstDayOfNextMonth\nORDER BY FirstDayOfMonth;"
        },
        {
            "description": "How to output a timestamp using a specific timezone?",
            "sql": "WITH t AS\n  (SELECT TIMESTAMP '2018-05-07 22:40:00+00:00' AS ts)\nSELECT ts,\n       STRING(ts, '-04:00') timestamp_eastern\nFROM t;"
        },
        {
            "description": "How to create a BigQuery view that converts timestamps to a specific timezone?",
            "sql": "CREATE VIEW `project.dataset.your_view` AS\nSELECT ts,\n       STRING(ts, '-04:00') timestamp_eastern\nFROM `project.dataset.your_table`;"
        },
        {
            "description": "How to retrieve colours in a struct with values modified based on conditions?",
            "sql": "SELECT boxes,\n       ARRAY\n  (SELECT AS STRUCT IF(colour = 'yellow', 'blue', colour) colour, IF(colour = 'yellow', 5, id) id\n   FROM UNNEST(colors)) colors\nFROM `project.mydataset.struct_4`;"
        },
        {
            "description": "How to create a new field and assign different values from a given nested element that has been previously unnested?",
            "sql": "SELECT boxes,\n       ARRAY\n  (SELECT IF(colour = 'yellow', STRUCT<colour STRING,id INT64>('blue', 5), STRUCT(colour, id))\n   FROM UNNEST(colors)) colors\nFROM `project.mydataset.struct_4`;"
        },
        {
            "description": "How to retrieve a row with all associated values in other tables?",
            "sql": "SELECT ROW,\n       boxes,\n       colors.colour,\n       colors.id\nFROM `bigquery-public-data.utility_us.colors_nested`\nJOIN colors ON ROW = box_id;"
        },
        {
            "description": "How to update a struct array with a conditional update?",
            "sql": "UPDATE `my_project.mydataset.struct_4`\nSET colors = ARRAY\n  (SELECT IF(colour = 'yellow', STRUCT<colour STRING,id INT64>('blue', 5), STRUCT(colour, id))\n   FROM UNNEST(colors))\nWHERE TRUE;"
        },
        {
            "description": "How to retrieve the top 5 custom dimensions as base64-encoded MD5 hashes, and the remaining dimensions as raw values, for each hit in the table.?",
            "sql": "SELECT * REPLACE(ARRAY\n                   (SELECT AS STRUCT * REPLACE(ARRAY\n                                                 (SELECT AS STRUCT INDEX, IF(INDEX BETWEEN 1 AND 5, TO_BASE64(MD5(value)), value) value\n                                                  FROM UNNEST(customdimensions)) AS customdimensions)\n                    FROM UNNEST(hits)) AS hits) AS custom_dimensions\nFROM `datasetx.tabley`;"
        },
        {
            "description": "How to update a STRUCT field in a repeated array to replace a specific value with a new value?",
            "sql": "UPDATE `my_project.mydataset.struct_3`\nSET address = ARRAY\n  (SELECT IF(city=\"some_city\", \"some_uscity\", city)\n   FROM UNNEST(address));"
        },
        {
            "description": "How to query a BigQuery table partitioned by day and hour for a specified date range and time range within each day?",
            "sql": "SELECT field1\nFROM `my_project.mydataset.partitioned_table`\nWHERE _PARTITIONTIME BETWEEN TIMESTAMP(\"2016-05-01\") AND TIMESTAMP(\"2016-05-06\")\n  AND DATE_ADD([MY_TIMESTAMP_FIELD], 8, 'HOUR') BETWEEN TIMESTAMP(\"2016-05-01 12:00:00\") AND TIMESTAMP(\"2016-05-05 14:00:00\");"
        },
        {
            "description": "How many contracts only have one occurrence for each estrato?",
            "sql": "SELECT ESTRATO,\n       COUNT(DISTINCT CONTRATO) AS only_once_contract,\n       sum(COUNT) AS total,\n\n  (SELECT COUNT(DISTINCT ec2.CONTRATO)\n   FROM estrato_contrato ec2\n   WHERE ec2.count > 1 ec2.ESTRATO = ec.ESTRATO) AS at_least_one\nFROM `project.dataset.estrato_contrato ec`\nGROUP BY ESTRATO;"
        },
        {
            "description": "How to insert a struct into a table?",
            "sql": "INSERT INTO `myproject.mydataset.struct_1` (x)\nVALUES(STRUCT(\"B.A\",12));"
        },
        {
            "description": "How to unnest values from multiple nested JSON strings and combine them into a table?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT 12345 token,\n          '''{\"fields\": [      {\"id\":\"1\",\"title\":\"Question 1?\"},      {\"id\":\"2\",\"title\":\"Questions 2?\"},      {\"id\":\"3\",\"title\":\"Question 3?\"}    ]}''' questions,\n                                                                                                                                                        '''[    {\"type\":\"text\", \"text\":\"answer 1\", \"field\":{\"id\":\"1\", \"type\":\"short_text\"}},    {\"type\":\"number\", \"number\":42, \"field\":{\"id\":\"2\", \"type\":\"opinion_scale\"}},    {\"type\":\"email\", \"email\":\"[email\u00a0protected]\", \"field\":{\"id\":\"3\", \"type\":\"email\"}}    ]''' answers)\nSELECT token,\n       id,\n       title AS question,\n       JSON_EXTRACT_SCALAR(CONCAT('{', a, '}'), '$.type') answer_type,\n       REPLACE(REGEXP_EXTRACT(b, r\"type\":\".+?\\\"\\s*,\\s*\".+?\":(.+)'), '\"', '') answer   FROM `project.dataset.table`,   UNNEST(REGEXP_EXTRACT_ALL(JSON_EXTRACT(questions, '$.fields'), r\"title\":\".+?\"\")) title WITH OFFSET pos1,   UNNEST(REGEXP_EXTRACT_ALL(JSON_EXTRACT(questions, '$.fields'), r\"id\":\".+?\"\")) id WITH OFFSET pos2,   UNNEST(REGEXP_EXTRACT_ALL(answers, r\"field\":{(.+?)}')) a WITH\nOFFSET pos3,\n       UNNEST(REGEXP_EXTRACT_ALL(answers, r'{(.+?),\\s*\"field\":.+?}')) b WITH\nOFFSET pos4\nWHERE pos1 = pos2\n  AND pos3 = pos4\n  AND id = JSON_EXTRACT_SCALAR(CONCAT('{', a, '}'), '$.id');"
        },
        {
            "description": "How to retrieve the latest token value in a BigQuery table.?",
            "sql": "SELECT MAX(token)\nFROM `project.dataset.table1`;"
        },
        {
            "description": "How to get information from a table populated with JSON-formatted questions and answers?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT \"12345\" token,\n          '{\"fields\": [{\"id\":\"1\",\"title\":\"Question 1?\"},{\"id\":\"2\",\"title\":\"Questions 2?\"},{\"id\":\"3\",\"title\":\"Question 3?\"}]}' questions,\n                                                                                                                              '[  {\"type\":\"text\", \"text\":\"answer 1\", \"field\":{\"id\":\"1\", \"type\":\"short_text\"}},{\"type\":\"number\", \"number\":42, \"field\":{\"id\":\"2\", \"type\":\"opinion_scale\"}},{\"type\":\"email\", \"email\":\"[email\u00a0protected]\", \"field\":{\"id\":\"3\", \"type\":\"email\"}}]' answers\n   UNION ALL SELECT \"18e6d8e33df440fa014bfa1aa451b445\",\n                    '{\"fields\": [{\"id\": \"L39FyvUohKDV\", \"properties\": {}, \"ref\": \"d8834652-3acf-4541-8354-1e3dcd716667\", \"title\": \"What did you think about the changes?\", \"type\": \"short_text\"}, {\"id\": \"krs82KgxHwGb\", \"properties\": {}, \"ref\": \"5b6e6796-635b-4595-9404-e81617d4540b\", \"title\": \"How useful is this feature turning out to be for you?\", \"type\": \"opinion_scale\"}, {\"id\": \"lBzHtCuzHFM4\", \"properties\": {}, \"ref\": \"b76be913-19b9-4b8a-b2ac-3fb645a65a5c\", \"title\": \"Your email address\", \"type\": \"email\"}], \"id\": \"SdzXVn\", \"title\": \"Google Shopping 5/4/18\"}',\n                    '[{\"field\": {\"id\": \"L39FyvUohKDV\", \"type\": \"short_text\"}, \"text\": \"t\", \"type\": \"text\"},{\"field\": {\"id\": \"krs82KgxHwGb\", \"type\": \"opinion_scale\"}, \"number\": 10, \"type\": \"number\"},{\"email\": \"[email\u00a0protected]\", \"field\": {\"id\": \"lBzHtCuzHFM4\", \"type\": \"email\"}, \"type\": \"email\"}]\"'\n   UNION ALL SELECT \"a63b258ce03360df691c9a949b2c57e3\",\n                    '{\"fields\": [{\"id\": \"krs82KgxHwGb\", \"properties\": {}, \"ref\": \"5b6e6796-635b-4595-9404-e81617d4540b\", \"title\": \"How useful is this feature turning out to be for you?\", \"type\": \"opinion_scale\"},{\"id\": \"lBzHtCuzHFM4\", \"properties\": {}, \"ref\": \"b76be913-19b9-4b8a-b2ac-3fb645a65a5c\", \"title\": \"Your email address\", \"type\": \"email\"},{\"id\": \"L39FyvUohKDV\", \"properties\": {}, \"ref\": \"d8834652-3acf-4541-8354-1e3dcd716667\", \"title\": \"What did you think about the changes?\", \"type\": \"short_text\"}], \"id\": \"SdzXVn\", \"title\": \"Google Shopping 5/4/18\"}',\n                    '[{\"field\": {\"id\": \"krs82KgxHwGb\", \"type\": \"opinion_scale\"}, \"number\": 10, \"type\": \"number\"},{\"email\": \"[email\u00a0protected]\", \"field\": {\"id\": \"lBzHtCuzHFM4\", \"type\": \"email\"}, \"type\": \"email\"},{\"field\": {\"id\": \"L39FyvUohKDV\", \"type\": \"short_text\"}, \"text\": \"they were awesome\", \"type\": \"text\"}]\"'\n   UNION ALL SELECT \"146c493c051a0a481cd5780839d3cdd6\",\n                    '{\"fields\": [{\"id\": \"CxhfK22a3XWE\", \"properties\": {}, \"ref\": \"d8834652-3acf-4541-8354-1e3dcd716667\", \"title\": \"What did you think about the changes?\", \"type\": \"short_text\"},{\"id\": \"oUZxPRaKjmFr\", \"properties\": {}, \"ref\": \"5b6e6796-635b-4595-9404-e81617d4540b\", \"title\": \"How useful is this feature turning out to be for you?\", \"type\": \"opinion_scale\"},{\"id\": \"zUIP73oXpLD6\", \"properties\": {}, \"ref\": \"b76be913-19b9-4b8a-b2ac-3fb645a65a5c\", \"title\": \"Your email address\", \"type\": \"email\"}], \"id\": \"kaiAsx\", \"title\": \"a - b\"}',\n                    '[{\"field\": {\"id\": \"CxhfK22a3XWE\", \"type\": \"short_text\"}, \"text\": \"nice\", \"type\": \"text\"},{\"field\": {\"id\": \"oUZxPRaKjmFr\", \"type\": \"opinion_scale\"}, \"number\": 2, \"type\": \"number\"},{\"email\": \"[email\u00a0protected]\", \"field\": {\"id\": \"zUIP73oXpLD6\", \"type\": \"email\"}, \"type\": \"email\"}]\"')\nSELECT token,\n       id,\n       title AS question,\n       JSON_EXTRACT_SCALAR(CONCAT('{', a, '}'), '$.type') answer_type,\n       COALESCE(JSON_EXTRACT_SCALAR(b, '$.text'), JSON_EXTRACT_SCALAR(b, '$.number'), JSON_EXTRACT_SCALAR(b, '$.email')) AS answer\nFROM `project.dataset.table`,\n     UNNEST(REGEXP_EXTRACT_ALL(JSON_EXTRACT(questions, '$.fields'), r'\"title\":\\s*\"(.+?)\"')) title WITH\nOFFSET pos1,\n       UNNEST(REGEXP_EXTRACT_ALL(JSON_EXTRACT(questions, '$.fields'), r'\"id\":\\s*\"(.+?)\"')) id WITH\nOFFSET pos2,\n       UNNEST(REGEXP_EXTRACT_ALL(answers, r'\"field\":\\s*{(.+?)}')) a WITH\nOFFSET pos3,\n       UNNEST(REGEXP_EXTRACT_ALL(REGEXP_REPLACE(answers, r'\"field\":\\s*{.+?}', '\"field\": \"\"'), r'{.+?}')) b WITH\nOFFSET pos4\nWHERE pos1 = pos2\n  AND pos3 = pos4\n  AND id = JSON_EXTRACT_SCALAR(CONCAT('{', a, '}'), '$.id');"
        },
        {
            "description": "How to retrieve a list of all questions and their answers from the survey.?",
            "sql": "SELECT ROW,\n       id,\n       question,\n       answer_type,\n       answer\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`;"
        },
        {
            "description": "How many sessions occurred between two specific dates?",
            "sql": "SELECT _TABLE_SUFFIX AS dt,\n       COUNT(1) cnt\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170718' AND '20170719'\nGROUP BY dt;"
        },
        {
            "description": "How many unique users from each country performed a certain event on a specific day?",
            "sql": "SELECT user_dim.geo_info.country AS country,\n       event.name AS event_name,\n       _TABLE_SUFFIX AS DAY,\n       COUNT(1) AS users\nFROM `project_new.app_events_*`,\n     UNNEST(event_dim) AS event\nGROUP BY country,\n         event_name,\n         DAY;"
        },
        {
            "description": "How to retrieve the timestamp of the most recent commit to the Apache Beam repository?",
            "sql": "SELECT MAX(TIMESTAMP_ADD(TIMESTAMP_MICROS(timestamp), INTERVAL -\n                         OFFSET SECOND)) AS latest_commit_time\nFROM `bigquery-public-data.github_repos.commits`\nWHERE repo_name = \"apache/beam\";"
        },
        {
            "description": "How to retrieve analytics order attribution data for the last 7 days and the same period last year?",
            "sql": "SELECT *\nFROM `project.analytics.order_attribution_*`\nWHERE parse_DATE('%y%m%d', _table_suffix) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n  OR parse_DATE('%y%m%d', _table_suffix) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 372 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 366 DAY);"
        },
        {
            "description": "How to retrieve the count of downloads of 'pycotools' grouped by month and year in ascending order.?",
            "sql": "SELECT EXTRACT(MONTH\n               FROM _PARTITIONDATE) AS month_,\n       EXTRACT(YEAR\n               FROM _PARTITIONDATE) AS year_,\n       count(file.project) AS COUNT\nFROM `the-psf.pypi.downloads*`\nWHERE file.project= 'pycotools'\nGROUP BY 1,\n         2\nORDER BY 1 ASC;"
        },
        {
            "description": "How many green taxi trips occurred in each month of 2015?",
            "sql": "SELECT EXTRACT(MONTH\n               FROM pickup_datetime) AS month_,\n       EXTRACT(YEAR\n               FROM pickup_datetime) AS year_,\n       count(rate_code) AS COUNT\nFROM `nyc-tlc.green.trips_2015`\nWHERE rate_code=5\nGROUP BY 1,\n         2\nORDER BY 1 ASC;"
        },
        {
            "description": "How many green taxi trips were there by month in 2015?",
            "sql": "SELECT MONTH(pickup_datetime) AS month_,\n       YEAR(pickup_datetime) AS year_,\n       count(rate_code) AS COUNT\nFROM [nyc-tlc:green.trips_2015]\nWHERE rate_code=5\nGROUP BY 1,\n         2\nORDER BY 1 ASC;"
        },
        {
            "description": "How to retrieve the total count of rentals across all 6 months of the 2015 year?",
            "sql": "SELECT SUM(COUNT) AS total_rentals\nFROM bigquery-PUBLIC-data.austin_bikeshare.trips\nWHERE month_ <= 6\n  AND year_ = 2015;"
        },
        {
            "description": "How to retrieve data where the _PARTITIONDATE column is between January 1st, 2016 and January 2nd, 2016?",
            "sql": "SELECT [COLUMN]\nFROM [PROJECT].[DATASET].[TABLE]\nWHERE _PARTITIONDATE BETWEEN '2016-01-01' AND '2016-01-02';"
        },
        {
            "description": "How to retrieve timestamps of air quality data since a certain date and time?",
            "sql": "SELECT timestamp\nFROM [bigquery-public-data:openaq.global_air_quality]\nWHERE timestamp > '2018-01-01 00:00:00';"
        },
        {
            "description": "How to retrieve timestamps from the BigQuery public dataset for global air quality that are greater than a specific date.?",
            "sql": "SELECT timestamp\nFROM [bigquery-public-data:openaq.global_air_quality]\nWHERE timestamp(timestamp) > timestamp('2018-01-01 00:00:00');"
        },
        {
            "description": "How to count the number of projects that were starred more than 40 times in April 2018?",
            "sql": "SELECT COUNT(name) april_projects_gt_stars,\n       COUNT(repo_name) projects_mirrored\nFROM\n  (SELECT DISTINCT repo_name,\n                   name,\n                   c\n   FROM `bigquery-public-data.github_repos.files` a\n   RIGHT JOIN\n     (SELECT repo.name,\n             COUNT(*) c\n      FROM `githubarchive.month.201804`\n      WHERE TYPE='WatchEvent'\n      GROUP BY 1\n      HAVING c>40) b ON repo_name=name);"
        },
        {
            "description": "How to retrieve Bitcoin transactions based on public key, date and amount?",
            "sql": "WITH TIME AS\n  (SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n          inputs.input_pubkey_base58 AS input_key,\n          outputs.output_pubkey_base58 AS output_key,\n          outputs.output_satoshis AS satoshis,\n          transaction_id AS trans_id\n   FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n   JOIN UNNEST (inputs) AS inputs\n   JOIN UNNEST (outputs) AS outputs\n   WHERE inputs.input_pubkey_base58 = @pubkey\n     OR outputs.output_pubkey_base58 = @pubkey)\nSELECT input_key,\n       output_key,\n       satoshis,\n       trans_id,\n       EXTRACT(DATE\n               FROM trans_time) AS date\nFROM TIME\nWHERE trans_time >= @mdate\n  AND trans_time <= @tdate\n  AND satoshis >= @satoshis;"
        },
        {
            "description": "How to retrieve the results of multiplying two inputs using a JavaScript UDF.?",
            "sql": "CREATE\nTEMPORARY FUNCTION multiplyInputs(x FLOAT64, y FLOAT64) RETURNS FLOAT64 LANGUAGE js AS \"\"\" return x*y; \"\"\";\n\nWITH numbers AS\n  (SELECT 1 AS x,\n          5 AS y\n   UNION ALL SELECT 2 AS x,\n                    10 AS y\n   UNION ALL SELECT 3 AS x,\n                    15 AS y)\nSELECT x,\n       y,\n       multiplyInputs(x, y) AS product\nFROM numbers;"
        },
        {
            "description": "How many distinct dates are in the _PARTITIONDATE field in mydataset.y2013_y2015?",
            "sql": "SELECT count(DISTINCT _PARTITIONDATE)\nFROM `myproject.mydataset.y2013_y2015`;"
        },
        {
            "description": "How to retrieve the campaign performance for a selected placement on a given date.?",
            "sql": "SELECT AC.Date AS Date,\n       TA.Advertiser AS Advertiser,\n       TC.Campaigns AS Campaign,\n       TP.Placements AS Placement,\n       AC.Clicks AS Clicks\nFROM `dtftv2_sprt.sprt_all_clicks` AC\nINNER JOIN `dtftv2_sprt.p_match_table_advertisers_166401` TA ON AC.Advertiser_ID = TA.Advertiser_ID\nINNER JOIN `dtftv2_sprt.p_match_table_campaigns_166401` TC ON AC.Campaign_ID = TC.Campaign_ID\nINNER JOIN `dtftv2_sprt.p_match_table_placements_166401` TP ON AC.Placement_ID = TP.Placement_ID\nWHERE TP.Placements = 'Placement A'\nGROUP BY Date, Advertiser,\n               Campaign,\n               Placement,\n               Clicks;"
        },
        {
            "description": "How to create a partitioned table with a timestamp column and an int64 column?",
            "sql": "CREATE TABLE myfirstdataset.partition_table1(ts timestamp, transaction_id int64)PARTITION BY date(ts) AS\nSELECT timestamp '2013-12-31 01:55:02.000 UTC' ts,\n                                               10 transaction_id\nUNION ALL\nSELECT timestamp '2013-12-31 02:10:02.000 UTC' ts,\n                                               5 transaction_id\nUNION ALL\nSELECT timestamp '2013-12-31 04:20:02.000 UTC' ts,\n                                               6 transaction_id;"
        },
        {
            "description": "How many times does each value of Metric appear?",
            "sql": "SELECT Metric,\n       COUNT(Metric) `Count`\nFROM `project.dataset.your_table`\nGROUP BY Metric;"
        },
        {
            "description": "How to update the emailHashCode value of the customer table's emailHashCode column using the SHA256 hash of the email address if emailHashCode is currently NULL for rows where there's at least one email address?",
            "sql": "UPDATE `project.customer.customers`\nSET emailHashCode =\n  (SELECT TO_HEX(SHA256(e.emailAddress))\n   FROM UNNEST(emailAddresses) AS e\n   LIMIT 1)\nWHERE emailHashCode IS NULL;"
        },
        {
            "description": "How to update emailHashCode and dateOfBirth in the `customers` table where emailHashCode is null?",
            "sql": "UPDATE `project.customer.customers`\nSET emailHashCode =\n  (SELECT TO_HEX(SHA256(e.emailAddress))\n   FROM UNNEST(emailAddresses) AS e\n   LIMIT 1),\n    dateOfBirth = SAFE_CAST(dateOfBirth AS TIMESTAMP)\nWHERE emailHashCode IS NULL;"
        },
        {
            "description": "How to retrieve JSON field with full path?",
            "sql": "SELECT test.full_name,\n       test.age,\n       address.test\nFROM UNNEST(test.address) AS address;"
        },
        {
            "description": "How to retrieve information from a JSON string in BigQuery?",
            "sql": "SELECT JSON_VALUE('{\"full_name\":\"test\",\"age\":2,\"address\":[{\"test\":\"hi\",\"second\":\"hi2\"}]}', '$.full_name') AS full_name,\n       JSON_VALUE('{\"full_name\":\"test\",\"age\":2,\"address\":[{\"test\":\"hi\",\"second\":\"hi2\"}]}', '$.age') AS age,\n       JSON_QUERY('{\"full_name\":\"test\",\"age\":2,\"address\":[{\"test\":\"hi\",\"second\":\"hi2\"}]}', '$.address') AS address;"
        },
        {
            "description": "How to retrieve an error message from a JSON parsing error?",
            "sql": "SELECT json_error_message()\nFROM UNNEST(JSON_VALUE([              '{\"a\": 1}',              '{\"b\": 2}'          ]) AS json_field)\nWHERE json_field IS NOT NULL;"
        },
        {
            "description": "How to retrieve the FAB ID and SKU of fabrics with a main construction of 1, ranked by average amount in descending order.?",
            "sql": "SELECT sq.fab_id,\n       sq.sku AS sku\nFROM\n  (SELECT upper(inpf.fab_id) AS fab_id,\n          sku19 AS sku,\n          round(avg(inpf.amount), 2) AS amount,\n          rank() OVER (PARTITION BY sku19\n                       ORDER BY inpf.amount DESC) AS ranking,\n          fi.main_construction AS construct\n   FROM erp.input_factor inpf\n   LEFT JOIN\n     (SELECT fi.*,\n             substr(upper(sku), 1, 19) AS sku19\n      FROM erp.fabric_information fi) fi ON upper(inpf.fab_id) = upper(fi.fab_id)\n   WHERE length(inpf.fab_id) > 3\n   GROUP BY inpf.fab_id,\n            sku19,\n            fi.main_construction) sq\nWHERE sq.construct = 1;"
        },
        {
            "description": "How to retrieve farms producing 'tomato' and their associated employees as nested sub-records within a STRUCT<> data type.?",
            "sql": "SELECT 'tomato' produce, STRUCT<farm ARRAY<STRUCT<farm_id string, employee ARRAY<STRUCT<name string>>>>>([ STRUCT('farm1' AS farm_id, [STRUCT('employee1' AS name), STRUCT('employee2')] AS employee) , ('farm2',\n                                                                                                                                                                                                         [STRUCT('employee3' AS name), STRUCT('employee4')]) , ('farm3',\n                                                                                                                                                                                                                                                                [STRUCT('employee5' AS name), STRUCT('employee6')]) ]) AS farms\nUNION ALL\nSELECT 'lettuce', STRUCT<ARRAY<STRUCT<farm_id string, employee ARRAY<STRUCT<name string>>>>>([ STRUCT('farm4' AS farm_id, [STRUCT('employee7' AS name), STRUCT('employee8')] AS employee) , ('farm5',\n                                                                                                                                                                                             [STRUCT('employee9' AS name)]) ]) AS farms;"
        },
        {
            "description": "How to get the sum of a field for a table?",
            "sql": "SELECT SUM(a.field)\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the total bytes processed by a SQL query?",
            "sql": "SELECT statistics.query.totalBytesProcessed AS total_bytes_processed\nFROM `BIGQUERY-PUBLIC-DATA.INFORMATION_SCHEMA.JOBS_V2`;"
        },
        {
            "description": "How to retrieve the coalesced value of a reference column for each row, filling in missing values with the column maximum value in the current partition or in the entire dataset?",
            "sql": "SELECT t.*,\n       coalesce(t.ref, max(t.ref) OVER (PARTITION BY dummy_dimensions), max(t.ref) OVER ()) AS imputed_ref;"
        },
        {
            "description": "How to retrieve the total hits and latest transaction ID by date, traffic source, and medium for sessions between April 1st and May 1st, 2018?",
            "sql": "SELECT date, trafficSource.source AS SOURCE,\n             trafficSource.medium AS medium,\n             SUM(totals.hits) AS total_hit,\n             MAX(\n                   (SELECT MAX(transaction.transactionid)\n                    FROM UNNEST(hits))) AS TRANSACTION\nFROM `test.test.session_streaming_*`\nWHERE _table_suffix BETWEEN '20180401' AND '20180501'\nGROUP BY date, trafficSource.source,\n               trafficSource.medium;"
        },
        {
            "description": "How to retrieve all records from the table `mytable` where the result of the FARM_FINGERPRINT function for the `orderId` field, when its absolute value is applied the modulus operator with 10, is equal to zero.?",
            "sql": "SELECT *\nFROM `project.dataset.mytable`\nWHERE MOD(ABS(FARM_FINGERPRINT(orderId)), 10) = 0;"
        },
        {
            "description": "How to retrieve rows with orderId values that have a non-zero remainder when divided by 10, using the FARM_FINGERPRINT function hash?",
            "sql": "SELECT *\nFROM `project.dataset.mytable`\nWHERE MOD(ABS(FARM_FINGERPRINT(orderId)), 10) != 0;"
        },
        {
            "description": "How to retrieve all rows from a table 'mytable' where the result of the modulo operation of the absolute value of the FARM_FINGERPRINT function applied to the 'orderId' column divided by the value in the '@k' parameter is equal to 0.?",
            "sql": "SELECT *\nFROM `project.dataset.mytable`\nWHERE MOD(ABS(FARM_FINGERPRINT(orderId)),@k) = 0;"
        },
        {
            "description": "How to how to get all data in table where absolulte value remainder of `FARM_FINGERPRINT(orderId)` modulo `@k` is not equal to 0?",
            "sql": "SELECT *\nFROM `project.dataset.mytable`\nWHERE MOD(ABS(FARM_FINGERPRINT(orderId)),@k) != 0;"
        },
        {
            "description": "Retrieve the first 10 People and their corresponding fruits from Join Sample Table 1 and Join Sample Table 2 based on Answer_Code being equal to Fruit?",
            "sql": "SELECT T2.Participant,\n       T1.Fruit\nFROM [Table1] T1\nRIGHT JOIN [Table2] T2 ON T1.Answer_Code = T2.Fruit\n;"
        },
        {
            "description": "How to calculate the bitwise XOR of farm fingerprints for each row in MyTable?",
            "sql": "SELECT BIT_XOR(FARM_FINGERPRINT(TO_JSON_STRING(t)))\nFROM MyTable AS `project.dataset.t`;"
        },
        {
            "description": "How to retrieve the bitwise XOR calculation of the farm fingerprints of each row in MyTable as a JSON string?",
            "sql": "SELECT BIT_XOR(FARM_FINGERPRINT(TO_JSON_STRING(t)))\nFROM MyTable AS `project.dataset.t`;"
        },
        {
            "description": "How to retrieve the authors of the books in the store who have a price less than 10.?",
            "sql": "SELECT CUSTOM_JSON_EXTRACT(x, '$.store.book[?(@.price < 10)].author')\nFROM `project.dataset.t`;"
        },
        {
            "description": "How to retrieve the top occurrences and 1910 occurrence of female names in the US from 1910 to 2013, ordered by highest occurrence.?",
            "sql": "SELECT a.name,\n       a.state,\n       a.year,\n       a.number AS high_occurence,\n       b.number AS number_in_1910\nFROM\n  (SELECT name,\n          ARRAY_AGG(STRUCT(YEAR, state, number)\n                    ORDER BY number DESC\n                    LIMIT 1)[OFFSET(0)].*\n   FROM `bigquery-public-data.usa_names.usa_1910_2013`\n   WHERE gender = 'F'\n   GROUP BY name) a\nJOIN `bigquery-public-data.usa_names.usa_1910_2013` b ON a.name = b.name\nAND a.state = b.state\nAND b.year = 1910\nAND b.gender = 'F'\nORDER BY high_occurence DESC;"
        },
        {
            "description": "How many people shared the name Patricia in New York in 1951?",
            "sql": "SELECT number_in_1910\nFROM `bigquery-public-data.usa_names.usa_1910_2013`\nWHERE state = 'NY'\n  AND name = 'Patricia'\n  AND YEAR = 1951;"
        },
        {
            "description": "How to calculate the drug exposure end date based on the start date and days supply?",
            "sql": "SELECT COALESCE(NULLIF(DATE_ADD(drug_exposure_start_date, INTERVAL days_supply DAY), drug_exposure_start_date))\nFROM x;"
        },
        {
            "description": "How to return the date 12/16/2018 in the format 'MM/dd/YYYY' but with the date 'truncated', or adjusted, back to the beginning of the month?",
            "sql": "SELECT FORMAT_DATE('%m/%d/%Y', DATE_TRUNC(PARSE_DATE('%m/%d/%Y', '12/16/2018'), MONTH));"
        },
        {
            "description": "How to retrieve channel sessions from different dates and compare them with the previous year?",
            "sql": "SELECT d.Date,\n       c.Channel,\n       ty.Sessions,\n       ty_prev.Sessions\nFROM\n  (SELECT DISTINCT ty.Date\n   FROM testjoin ty) d\nCROSS JOIN\n  (SELECT DISTINCT ty.channel\n   FROM testjoin ty) c\nLEFT JOIN testjoin ty ON ty.Date = d.Date\nAND ty.Channel = c.Channel\nLEFT JOIN testjoin ty_prev ON ty_prev.Date = d.date - interval 1 YEAR\nAND ty.Channel = c.Channel;"
        },
        {
            "description": "How to update a partition with a specific date range?",
            "sql": "UPDATE `project.dataset.table_name`\nSET COLUMN = 'value'\nWHERE _PARTITIONTIME = '2018-05-01';"
        },
        {
            "description": "How to update all rows in a table, excluding partitioned rows?",
            "sql": "UPDATE `project.dataset.table_name`\nSET COLUMN = 'value'\nWHERE _PARTITIONTIME IS NULL;"
        },
        {
            "description": "How to convert a string to a TIMESTAMP datatype using BigQuery's PARSE_TIMESTAMP function?",
            "sql": "SELECT PARSE_TIMESTAMP(\"%B %e, %Y %I:%M %p\", TIME)\nFROM\n  (SELECT 'May 14, 2018 9:46 AM' AS TIME\n   UNION ALL SELECT 'May 14, 2018 9:46 PM' AS TIME);"
        },
        {
            "description": "How to retrieve the user's path in chronological order, grouped by their unique identifier.?",
            "sql": "SELECT a.uid,\n       string_agg(GROUPING, '-'\n                  ORDER BY date) AS PATH\nFROM `project.dataset.temp1` a\nGROUP BY a.uid;"
        },
        {
            "description": "How to retrieve the difference between the latest and earliest sale dates for each card, where the sales dates are represented in the format 'dd/mm/yyyy - dd/mm/yyyy'.?",
            "sql": "SELECT card,\n       DATE_DIFF(PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(1)]), PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(0)]), DAY) days,\n       STR\nFROM\n  (SELECT card,\n          STRING_AGG(saledate, ' - '\n                     ORDER BY PARSE_DATE('%d/%m/%Y', saledate)\n                     LIMIT 2) STR\n   FROM `project.dataset.your_table`\n   GROUP BY card)\nWHERE NOT SPLIT(STR, ' - ')[SAFE_OFFSET(1)] IS NULL;"
        },
        {
            "description": "How to calculate the days between the first and second sale for each card?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'AA687980' card,\n                     '11/03/2017' saledate\n   UNION ALL SELECT 'AA890785',\n                    '21/05/2016'\n   UNION ALL SELECT 'AA687980',\n                    '30/05/2017'\n   UNION ALL SELECT 'BBY679088',\n                    '04/04/2018'\n   UNION ALL SELECT 'AA687980',\n                    '29/05/2018')\nSELECT card,\n       DATE_DIFF(PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(1)]), PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(0)]), DAY) days,\n       STR\nFROM\n  (SELECT card,\n          STRING_AGG(saledate, ' - '\n                     ORDER BY PARSE_DATE('%d/%m/%Y', saledate)\n                     LIMIT 2) STR\n   FROM `project.dataset.your_table`\n   GROUP BY card)\nWHERE NOT SPLIT(STR, ' - ')[SAFE_OFFSET(1)] IS NULL;"
        },
        {
            "description": "How to retrieve the list of datasets and their contents?",
            "sql": "SELECT `dataset_id`\nFROM `bigquery-public-data.utility_us.utility_summary`\nGROUP BY `dataset_id`;"
        },
        {
            "description": "How to export all the cluster partitions in a table for a specified date range to a test project and dataset?",
            "sql": "SELECT CONCAT('bq cp <srcproj>:<dataset>.<table>$', partname, ' <testproj>:<dataset>.<table>$', partname)\nFROM\n  (SELECT DISTINCT FORMAT_DATETIME('%Y%m%d', CAST(_PARTITIONDATE AS datetime)) partname\n   FROM `<srcproj>.<dataset>.<table>`\n   WHERE _PARTITIONTIME >= \"2018-05-10 00:00:00\"\n     AND _PARTITIONTIME < \"2018-05-13 00:00:00\");"
        },
        {
            "description": "How to retrieve a list of job IDs of running jobs.?",
            "sql": "SELECT job_id\nFROM `bigquery-public-data.jobs.runs`\nWHERE state = 'running';"
        },
        {
            "description": "How to parse a string with a specific date time format into a timestamp?",
            "sql": "SELECT PARSE_TIMESTAMP(\"%B %e, %Y %I:%M %p\", TIME)\nFROM\n  (SELECT 'May 14, 2018 9:46 AM' AS TIME\n   UNION ALL SELECT 'May 14, 2018 9:46 PM' AS TIME);"
        },
        {
            "description": "How to retrieve a list of unique user IDs (uid) along with a concatenated list of all grouping values (path) grouped by user ID, with each group sorted by date in descending order.?",
            "sql": "SELECT a.uid,\n       string_agg(GROUPING, '-'\n                  ORDER BY date) AS PATH\nFROM `project.dataset.temp1` a\nGROUP BY a.uid;"
        },
        {
            "description": "How to get the count of days between the most recent sale date and the second most recent sale date for each card?",
            "sql": "SELECT card,\n       DATE_DIFF(PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(1)]), PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(0)]), DAY) days,\n       STR\nFROM\n  (SELECT card,\n          STRING_AGG(saledate, ' - '\n                     ORDER BY PARSE_DATE('%d/%m/%Y', saledate)\n                     ) STR\n   FROM `project.dataset.your_table`\n   GROUP BY card)\nWHERE NOT SPLIT(STR, ' - ')[SAFE_OFFSET(1)] IS NULL;"
        },
        {
            "description": "How to retrieve information about card owners who used the card at least twice, including the number of days between purchases.?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'AA687980' card,\n                     '11/03/2017' saledate\n   UNION ALL SELECT 'AA890785',\n                    '21/05/2016'\n   UNION ALL SELECT 'AA687980',\n                    '30/05/2017'\n   UNION ALL SELECT 'BBY679088',\n                    '04/04/2018'\n   UNION ALL SELECT 'AA687980',\n                    '29/05/2018')\nSELECT card,\n       DATE_DIFF(PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(1)]), PARSE_DATE('%d/%m/%Y', SPLIT(STR, ' - ')[SAFE_OFFSET(0)]), DAY) days,\n       STR\nFROM\n  (SELECT card,\n          STRING_AGG(saledate, ' - '\n                     ORDER BY PARSE_DATE('%d/%m/%Y', saledate)\n                     LIMIT 2) STR\n   FROM `project.dataset.your_table`\n   GROUP BY card)\nWHERE NOT SPLIT(STR, ' - ')[SAFE_OFFSET(1)] IS NULL;"
        },
        {
            "description": "How to copy data from a partitioned table in one project to another project?",
            "sql": "SELECT CONCAT('bq cp <srcproj>:<dataset>.<table>$', partname, ' <testproj>:<dataset>.<table>$', partname)\nFROM\n  (SELECT DISTINCT FORMAT_DATETIME('%Y%m%d', CAST(_PARTITIONDATE AS datetime)) partname\n   FROM `<srcproj>.<dataset>.<table>`\n   WHERE _PARTITIONTIME >= \"2018-05-10 00:00:00\"\n     AND _PARTITIONTIME < \"2018-05-13 00:00:00\");"
        },
        {
            "description": "How to retrieve the number of trips by tip amount range, the total tips earned in each range, and the average tip percentage in each range for yellow taxi trips in New York City in 2015 where the trip distance was greater than 0 and the fare amount per mile was between $2 and $10.?",
            "sql": "SELECT (CASE\n            WHEN tip_amount = 0 THEN 'No Tip'\n            WHEN tip_amount > 0\n                 AND tip_amount <= 5 THEN '0-5'\n            WHEN tip_amount > 5\n                 AND tip_amount <= 10 THEN '5-10'\n            WHEN tip_amount > 10\n                 AND tip_amount <= 20 THEN '10-20'\n            WHEN tip_amount > 20 THEN '> 20'\n            ELSE 'other'\n        END) AS Tipbin,\n       COUNT(*) AS num,\n       SUM(tip_amount) AS Tips,\n       ROUND(avg((tip_amount)/(total_amount-tip_amount))*100, 3) AS TipPercentage\nFROM `bigquery-public-data.new_york.tlc_yellow_trips_2015`\nWHERE trip_distance > 0\n  AND fare_amount/trip_distance BETWEEN 2 AND 10\n  AND dropoff_datetime > pickup_datetime\nGROUP BY TIpBin\nORDER BY MIN(tip_amount);"
        },
        {
            "description": "How to retrieve data from the table mapped to serialized_row, deserializing the data into the provided type using the provided parser function?",
            "sql": "SELECT *\nFROM ``project.dataset.__TABLE__`;"
        },
        {
            "description": "How to retrieve the top destinations for a specific dfa, adContent ad campaign and session with timestamp.?",
            "sql": "SELECT trafficSource.source AS SOURCE,\n       trafficSource.adContent AS adContent,\n\n  (SELECT ANY_VALUE(hcd.value)\n   FROM UNNEST(hits) AS hit,\n        UNNEST(hit.customdimensions) AS hcd\n   WHERE hcd.index = 10) Destination,\n       COUNT(DISTINCT CONCAT(fullVisitorId, CAST(visitStartTime AS STRING))) Sessions,\n       SUM(totals.transactions) transactions\nFROM `cc-bigquery-venture.534939.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170101' AND '20170131'\nGROUP BY SOURCE,\n         adContent,\n         Destination\nHAVING Destination IS NOT NULL\nAND Destination !=''\nAND SOURCE = 'dfa'\nAND adContent = 'vacationcore'\nORDER BY Destination ASC;"
        },
        {
            "description": "How many customers purchased any one of the given styles?",
            "sql": "SELECT CONCAT(\"SELECT Customer_ID,\", STRING_AGG(CONCAT(\"COUNTIF(Style='\", Style, \"') \", Style)), \" FROM `project.dataset.your_table` GROUP BY Customer_ID ORDER BY Customer_ID\")\nFROM\n  (SELECT DISTINCT Style\n   FROM `project.dataset.your_table`\n   ORDER BY Style);"
        },
        {
            "description": "How to use dynamic SQL to create a query that counts the occurrences of each style for each customer?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'MEM014' Customer_ID,\n                   'BLS87' Style\n   UNION ALL SELECT 'KAR810',\n                    'DR126'\n   UNION ALL SELECT 'NIKE61',\n                    'MMQ5'\n   UNION ALL SELECT 'NIKE61',\n                    'MMQ5'\n   UNION ALL SELECT 'STT019',\n                    'BLS83'\n   UNION ALL SELECT 'STT019',\n                    'BLS84'\n   UNION ALL SELECT 'STT019',\n                    'BLS87')\nSELECT CONCAT(\"SELECT Customer_ID\", STRING_AGG(CONCAT(\"COUNTIF(Style='\", Style, \"') \", Style)), \" FROM `project.dataset.your_table` GROUP BY Customer_ID\")\nFROM\n  (SELECT DISTINCT Style\n   FROM `project.dataset.your_table`\n   ORDER BY Style);"
        },
        {
            "description": "How to retrieve a breakdown of the quantity of products per customer for each of the following styles: BLS83, BLS84, BLS87, DR126, and MMQ5?",
            "sql": "SELECT Customer_ID,\n       COUNTIF(Style='BLS83') BLS83,\n       COUNTIF(Style='BLS84') BLS84,\n       COUNTIF(Style='BLS87') BLS87,\n       COUNTIF(Style='DR126') DR126,\n       COUNTIF(Style='MMQ5') MMQ5\nFROM `project.dataset.your_table`\nGROUP BY Customer_ID;"
        },
        {
            "description": "How to retrieve information about a timestamp converted from a millisecond timestamp.?",
            "sql": "SELECT MSEC_TO_TIMESTAMP(1522865628160);"
        },
        {
            "description": "How to retrieve the number of people affected by each virus, grouped by the number of viruses they have.?",
            "sql": "SELECT VIRUS_COUNT,\n       COUNT(*) AS person_count,\n       MIN(user_id),\n       MAX(user_id)\nFROM\n  (SELECT user_id,\n          COUNT(*) AS VIRUS_COUNT\n   FROM t\n   WHERE Virus_id IN (43598435,\n                      24343,\n                      45413,\n                      2455,\n                      54574511,\n                      2074123,\n                      34351153)\n   GROUP BY user_id) t\nGROUP BY VIRUS_COUNT\nORDER BY VIRUS_COUNT;"
        },
        {
            "description": "How to retrieve all rows from the specified legacy SQL view?",
            "sql": "SELECT *\nFROM `project.dataset.legacy_sql_view`;"
        },
        {
            "description": "How to create a new BigQuery table with non-nullable columns from an existing table?",
            "sql": "CREATE TABLE `project.dataset.my_new_table` (no_more_null INT64 NOT NULL) AS\nSELECT contains_null AS no_more_null\nFROM dataset.my_old_table\nWHERE contains_null IS NOT NULL;"
        },
        {
            "description": "How to retrieve a count of exposure types for individuals exposed to either a virus or fungus.?",
            "sql": "SELECT CASE\n           WHEN had_virus + had_fungus = 2 THEN 'Both'\n           WHEN had_fungus = 1 THEN 'Fungus'\n           ELSE 'Virus'\n       END AS exposure_type,\n       COUNT(*) AS exposure_count\nFROM\n  (SELECT Name,\n          MAX(CASE\n                  WHEN illness IN (342, 2345, 9282) THEN 1\n              END) AS had_virus,\n          MAX(CASE\n                  WHEN illness IN (987, 457, 1283, 2212) THEN 1\n              END) AS had_fungus\n   FROM diseases\n   WHERE illness IN (342,\n                     2345,\n                     9282)\n     OR illness IN (987,\n                    457,\n                    1283,\n                    2212)\n   GROUP BY Name) AS IndividualSummary\nGROUP BY exposure_type;"
        },
        {
            "description": "How to retrieve the formatted date and month for a given datetime.?",
            "sql": "SELECT FORMAT_DATETIME(\"%B, %Y\", DATETIME \"2018-05-09 15:30:00\")\nFROM `project.dataset.yourTable`;"
        },
        {
            "description": "How to insert a row into a table using the insertAll() method?",
            "sql": "INSERT INTO `project.dataset.tableId` (booleanField, bytesField, recordField)\nVALUES (TRUE, \"Cg0NDg0=\", ((\"stringField\", \"Hello, World!\"),;"
        },
        {
            "description": "How to retrieve the distinct names associated with each app instance ID where the number of distinct names is equal to the total of distinct names for that app instance?",
            "sql": "SELECT app_instance_id,\n       name\nFROM\n  (SELECT app_instance_id,\n          COUNT(1) cnt,\n          ARRAY_CONCAT_AGG(NAMES) NAMES\n   FROM\n     (SELECT user_dim.app_info.app_instance_id,\n             ARRAY\n        (SELECT DISTINCT name\n         FROM UNNEST(event_dim) dim) NAMES\n      FROM `project.dataset.your_table`)\n   GROUP BY app_instance_id), UNNEST(NAMES) name\nGROUP BY app_instance_id,\n         name\nHAVING COUNT(1) = ANY_VALUE(cnt);"
        },
        {
            "description": "How to retrieve all events for each app instance?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT STRUCT<app_info STRUCT<app_instance_id STRING>>(STRUCT('1234')) user_dim,\n                                                         [STRUCT<name STRING>('os_update'), STRUCT('initialized_rh_api')] event_dim\n   UNION ALL SELECT STRUCT(STRUCT('1234')) user_dim,\n                    [STRUCT<name STRING>('os_update')] event_dim\n   UNION ALL SELECT STRUCT(STRUCT('5678')) user_dim,\n                    [STRUCT<name STRING>('os_update'), STRUCT('initialized_rh_api')] event_dim\n   UNION ALL SELECT STRUCT(STRUCT('5678')) user_dim,\n                    [STRUCT<name STRING>('other_action')] event_dim)\nSELECT app_instance_id,\n       name\nFROM\n  (SELECT app_instance_id,\n          COUNT(1) cnt,\n          ARRAY_CONCAT_AGG(NAMES) NAMES\n   FROM\n     (SELECT user_dim.app_info.app_instance_id,\n             ARRAY\n        (SELECT DISTINCT name\n         FROM UNNEST(event_dim) dim) NAMES\n      FROM `project.dataset.your_table`)\n   GROUP BY app_instance_id), UNNEST(NAMES) name\nGROUP BY app_instance_id,\n         name\nHAVING COUNT(1) = ANY_VALUE(cnt);"
        },
        {
            "description": "How to retrieve App instances for which OS updates have not been installed for the past 7 days?",
            "sql": "SELECT app_instance_id,\n       name\nFROM `bigquery-public-data.os_config.os_inventory_windows`;"
        },
        {
            "description": "How to retrieve the total number of rows in a table with null values for specified columns.?",
            "sql": "WITH table1 AS\n  (SELECT \"somename\" AS name,\n          \"someaddress\" AS adrs\n   UNION ALL SELECT NULL,\n                    NULL\n   UNION ALL SELECT NULL,\n                    NULL)\nSELECT COUNTIF(name IS NULL) + COUNTIF(adrs IS NULL) AS null_count\nFROM table1;"
        },
        {
            "description": "How to retrieve a list of distinct baskets and the fruits present in each basket. Also, get an array of apples present in each basket.?",
            "sql": "WITH table1 AS\n  (SELECT \"basket_1\" AS basket,\n          \"apple\" AS fruit\n   UNION ALL SELECT \"basket_1\",\n                    \"mango\" AS fruit\n   UNION ALL SELECT \"basket_2\",\n                    \"apple\" AS fruit\n   UNION ALL SELECT \"basket_2\",\n                    \"Apple\" AS fruit\n   UNION ALL SELECT \"basket_2\",\n                    \"pine_apple\" AS fruit\n   UNION ALL SELECT \"basket_2\",\n                    \"pine_apple\" AS fruit\n   UNION ALL SELECT \"basket_1\",\n                    \"orange\" AS fruit)\nSELECT basket,\n       STRING_AGG(fruit) AS fruits_in_each_basket,\n       ARRAY_AGG(IF(LOWER(fruit) = 'apple', fruit, NULL)\n                 IGNORE NULLS) AS apple\nFROM table1\nGROUP BY basket;"
        },
        {
            "description": "How to retrieve the implications associated with each name in your table?",
            "sql": "SELECT name,\n       implies\nFROM `project.dataset.your_table`\nLEFT JOIN UNNEST(implies) AS implies;"
        },
        {
            "description": "How to retrieve all implied values based on a specific name?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'Foo' name, [] implies\n   UNION ALL SELECT 'Bar',\n                    ['Foo']\n   UNION ALL SELECT 'Baz',\n                    ['Foo', 'Bar'])\nSELECT name,\n       implies\nFROM `project.dataset.your_table`\nLEFT JOIN UNNEST(implies) AS implies;"
        },
        {
            "description": "How to replace the category in a product with a value from the map if the productCategory matches raw_name, otherwise use productCategoryAttribute?",
            "sql": "UPDATE `project.dataset.your_table` t\nSET hits = ARRAY\n  (SELECT AS STRUCT * REPLACE(ARRAY\n                                (SELECT AS STRUCT product.* REPLACE(CASE\n                                                                        WHEN map.raw_name = product.productCategory THEN category\n                                                                        ELSE productCategoryAttribute\n                                                                    END AS productCategoryAttribute)\n                                 FROM UNNEST(product) product\n                                 LEFT JOIN UNNEST(agg_map.map) map ON map.raw_name = product.productCategory) AS product)\n   FROM UNNEST(hits) hit)\nFROM\n  (SELECT ARRAY_AGG(ROW) map\n   FROM `project.dataset.map` ROW) agg_map\nWHERE TRUE;"
        },
        {
            "description": "How to insert data into a table called 'results_table', select specific columns from 'BMI_Data' and 'Member_Details' tables where the BMI in 'Member_Details' is less than the Target_BMI in 'BMI_Data'?",
            "sql": "INSERT INTO `project.dataset.results_table` (Member_ID, First_Name, BMI)\nSELECT md2.member_ID,\n       md2.First_Name,\n       md2.BMI\nFROM BMI_Data bd\nINNER JOIN\n  (SELECT DISTINCT md.member_ID,\n                   md.First_Name,\n\n     (SELECT top 1 BMI\n      FROM Member_Details\n      WHERE member_ID = md.member_ID\n      ORDER BY Date DESC) BMI\n   FROM Member_Details md) md2 ON md2.member_ID = bd.member_ID\nWHERE md2.BMI < bd.Target_BMI;"
        },
        {
            "description": "How to retrieve the unique rows and their corresponding counts from a table where the count is greater than 1.?",
            "sql": "SELECT TO_JSON_STRING(t) AS ROW,\n       COUNT(1) AS total\nFROM `project.dataset.your_table` t\nGROUP BY ROW\nHAVING total > 1;"
        },
        {
            "description": "How to retrieve JSON row and count of duplicate rows having the same MD5 hash of the serialized JSON of the row.?",
            "sql": "SELECT MD5(TO_JSON_STRING(t)) AS id,\n       ANY_VALUE(TO_JSON_STRING(t)) AS ROW,\n       COUNT(1) AS total\nFROM `project.dataset.your_table` t\nGROUP BY id\nHAVING total > 1;"
        },
        {
            "description": "How to extract data from an array of records inside a BigQuery table?",
            "sql": "SELECT EmpNo,\n       Age,\n       Name,\n       s.*\nFROM `project.dataset.your_table` t,\n     UNNEST(Salary) s;"
        },
        {
            "description": "How to use UNNEST to unnest STRUCT ARRAY and project each element as a new column?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 EmpNo,\n          25 Age,\n          'Alex' Name,\n                 [STRUCT<Month STRING, Amt INT64>('Jan', 2000), ('Feb', 3000), ('Mar', 3500)] Salary\n   UNION ALL SELECT 2,\n                    26,\n                    'Teresa',\n                    [STRUCT<Month STRING, Amt INT64>('Jan', 1000), ('Feb', 2000), ('Mar', 3000)])\nSELECT EmpNo,\n       Age,\n       Name,\n       s.*\nFROM `project.dataset.your_table` t,\n     UNNEST(Salary) s;"
        },
        {
            "description": "How to retrieve the total amount spent by employee Alex?",
            "sql": "SELECT Name,\n       SUM(Amt) AS Total_Amt\nFROM `project.dataset.ROW`\nWHERE Name = 'Alex'\nGROUP BY Name;"
        },
        {
            "description": "How to find the total sum of values in a nested array column?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 EmpNo,\n          25 Age,\n          'Alex' Name,\n                 [STRUCT<Month STRING, Amt INT64>('Jan', 2000), ('Feb', 3000), ('Mar', 3500)] Salary\n   UNION ALL SELECT 2,\n                    26,\n                    'Teresa',\n                    [STRUCT<Month STRING, Amt INT64>('Jan', 1000), ('Feb', 2000), ('Mar', 3000)])\nSELECT EmpNo,\n       Age,\n       Name,\n\n  (SELECT SUM(Amt)\n   FROM UNNEST(Salary)) Total\nFROM `project.dataset.your_table`;"
        },
        {
            "description": "How to retrieve the current datetime and datetime one hour ago?",
            "sql": "SELECT CURRENT_DATETIME(),\n       DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 1 HOUR);"
        },
        {
            "description": "How to get the current timestamp and one hour less timestamp in BigQuery?",
            "sql": "SELECT CURRENT_TIMESTAMP(),\n       TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR);"
        },
        {
            "description": "How to count the unique values that appear for a given time frame?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT TIME '05:20:19' t,\n                          4 x\n   UNION ALL SELECT TIME '05:37:18',\n                         7\n   UNION ALL SELECT TIME '05:45:14',\n                         4\n   UNION ALL SELECT TIME '05:56:04',\n                         4\n   UNION ALL SELECT TIME '06:18:48',\n                         5\n   UNION ALL SELECT TIME '06:48:34',\n                         3\n   UNION ALL SELECT TIME '07:52:48',\n                         1)\nSELECT t,\n       x,\n\n  (SELECT COUNT(DISTINCT y)\n   FROM UNNEST(arr) y) uniques\nFROM\n  (SELECT t,\n          x,\n          ARRAY_AGG(x) OVER(\n                            ORDER BY TIME_DIFF(t, TIME '00:00:00', SECOND) RANGE BETWEEN 3600 PRECEDING AND CURRENT ROW) arr\n   FROM `project.dataset.your_table`);"
        },
        {
            "description": "How to retrieve the number of unique values in an array column within a 3600-second window for each row in a table?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT TIMESTAMP '2018-01-05 05:20:19' t,\n                                          4 x\n   UNION ALL SELECT TIMESTAMP '2018-01-05 05:37:18', 7\n   UNION ALL SELECT TIMESTAMP '2018-01-05 05:45:14', 4\n   UNION ALL SELECT TIMESTAMP '2018-01-05 05:56:04', 4\n   UNION ALL SELECT TIMESTAMP '2018-01-05 06:18:48', 5\n   UNION ALL SELECT TIMESTAMP '2018-01-05 06:48:34', 3\n   UNION ALL SELECT TIMESTAMP '2018-01-05 07:52:48', 1)\nSELECT t,\n       x,\n\n  (SELECT COUNT(DISTINCT y)\n   FROM UNNEST(arr) y) uniques\nFROM\n  (SELECT t,\n          x,\n          ARRAY_AGG(x) OVER(\n                            ORDER BY TIMESTAMP_DIFF(t, TIMESTAMP '2000-01-01 00:00:00', SECOND) RANGE BETWEEN 3600 PRECEDING AND CURRENT ROW) arr\n   FROM `project.dataset.your_table`);"
        },
        {
            "description": "How to count the number of unique elements in an array of values for each row, with a sliding window of 1 hour, randomly shifted?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT TIME '05:20:19' t,\n                          4 x\n   UNION ALL SELECT TIME '05:20:19',\n                         5\n   UNION ALL SELECT TIME '05:37:18',\n                         7\n   UNION ALL SELECT TIME '05:45:14',\n                         4\n   UNION ALL SELECT TIME '05:56:04',\n                         4\n   UNION ALL SELECT TIME '06:18:48',\n                         6\n   UNION ALL SELECT TIME '06:48:34',\n                         3\n   UNION ALL SELECT TIME '07:52:48',\n                         1)\nSELECT t,\n       x,\n\n  (SELECT COUNT(DISTINCT y)\n   FROM UNNEST(arr) y) uniques\nFROM\n  (SELECT t,\n          x,\n          ARRAY_AGG(x) OVER(\n                            ORDER BY TIME_DIFF(t, TIME '00:00:00', MILLISECOND) + 1000 * RAND() RANGE BETWEEN 3600000 PRECEDING AND CURRENT ROW) arr\n   FROM `project.dataset.your_table`);"
        },
        {
            "description": "How to retrieve the number of unique elements in a group of timestamps within a given time range.?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT TIME '05:20:19' t,\n                          4 x\n   UNION ALL SELECT TIME '05:20:19',\n                         5\n   UNION ALL SELECT TIME '05:37:18',\n                         7\n   UNION ALL SELECT TIME '05:45:14',\n                         4\n   UNION ALL SELECT TIME '05:56:04',\n                         4\n   UNION ALL SELECT TIME '06:18:48',\n                         6\n   UNION ALL SELECT TIME '06:48:34',\n                         3\n   UNION ALL SELECT TIME '07:52:48',\n                         1)\nSELECT t,\n       x,\n\n  (SELECT COUNT(DISTINCT y)\n   FROM UNNEST(arr) y) uniques\nFROM\n  (SELECT t,\n          x,\n          ARRAY_AGG(x) OVER(\n                            ORDER BY ms RANGE BETWEEN 3600000 PRECEDING AND CURRENT ROW) arr\n   FROM\n     (SELECT t,\n             x,\n             TIME_DIFF(t, TIME '00:00:00', MILLISECOND) + 1000 * RAND() ms\n      FROM `project.dataset.your_table`));"
        },
        {
            "description": "How to retrieve data from a table represented by a case class named \"Clazz\"?",
            "sql": "SELECT *\nFROM `project.dataset.Clazz`;"
        },
        {
            "description": "How to retrieve maximum file sizes for load jobs in BigQuery?",
            "sql": "SELECT 'Load jobs per table per day' AS `Limit`,\n       '1,000'` AS `Maximum value`,      'Maximum columns per table' AS `\nLIMIT`,    '10,000'` AS `Maximum value`,\n     'Maximum size per load job' AS `Limit`,\n     '15 TB'` AS `Maximum value`,      'Maximum number of files per load job' AS `\nLIMIT`,    '10 Million'` AS `Maximum value`,\n     'Max file size for JSON/CSV compressed' AS `Limit`,\n     '4 GB'` AS `Maximum value`,      'Max file size for JSON/CSV uncompressed' AS `\nLIMIT`,    '5 TB'` AS `Maximum value`;"
        },
        {
            "description": "How to extract the name and code for each id, start, and end group with the highest code value?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 id,\n          1000 START, 1001 `end`,\n                      'ABC1' name,\n                             'A' code\n   UNION ALL SELECT 1,\n                    1000,\n                    1001,\n                    'FSD1',\n                    'B'\n   UNION ALL SELECT 2,\n                    1200,\n                    1201,\n                    'CC12',\n                    'A'\n   UNION ALL SELECT 3,\n                    4000,\n                    4002,\n                    'GF41',\n                    'B'\n   UNION ALL SELECT 3,\n                    4000,\n                    4002,\n                    'ML65',\n                    'A')\nSELECT id,\nSTART, `end`,\n       ARRAY_AGG(STRUCT(name, code)\n                 ORDER BY code DESC\n                 LIMIT 1)[OFFSET(0)].*\nFROM `project.dataset.your_table`\nGROUP BY id,\nSTART, `end`;"
        },
        {
            "description": "How to retrieve the IDs of rows from a table where a specified column contains a particular value?",
            "sql": "SELECT ROW_ID() AS RID\nFROM `project.dataset.tablename`\nWHERE COLUMN_NAME = specific_value;"
        },
        {
            "description": "How to retrieve the row with the latest code value for matching ID, START and END pairs?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 id,\n          1000 START, 1001 `end`,\n                      'ABC1' name,\n                             'A' code\n   UNION ALL SELECT 1,\n                    1000,\n                    1001,\n                    'FSD1',\n                    'B'\n   UNION ALL SELECT 2,\n                    1200,\n                    1201,\n                    'CC12',\n                    'A'\n   UNION ALL SELECT 3,\n                    4000,\n                    4002,\n                    'GF41',\n                    'B'\n   UNION ALL SELECT 3,\n                    4000,\n                    4002,\n                    'ML65',\n                    'A')\nSELECT row.*\nFROM\n  (SELECT ARRAY_AGG(t\n                    ORDER BY code DESC\n                    LIMIT 1)[OFFSET(0)] ROW\n   FROM `project.dataset.your_table` t\n   GROUP BY id, START, `end`);"
        },
        {
            "description": "How to retrieve a list of country names, sorted by the second letter of the name.?",
            "sql": "WITH table1 AS\n  (SELECT \"America\" AS country_name\n   UNION ALL SELECT \"Germany\" AS country_name\n   UNION ALL SELECT \"England\" AS country_name\n   UNION ALL SELECT \"Nauru\" AS country_name\n   UNION ALL SELECT \"Brunei\" AS country_name\n   UNION ALL SELECT \"Kiribati\" AS country_name\n   UNION ALL SELECT \"Djibouti\" AS country_name\n   UNION ALL SELECT \"Malta\" AS country_name)\nSELECT *\nFROM table1\nORDER BY CASE\n             WHEN LOWER(SUBSTR(country_name, 1, 1)) IN ('a',\n                                                        'g',\n                                                        'e') THEN CONCAT(' ', country_name)\n             ELSE country_name\n         END;"
        },
        {
            "description": "How to retrieve the list of countries that have fewer than 5 characters.?",
            "sql": "SELECT country_name\nFROM `bigquery-public-data.utility_us.country_code_iso`\nWHERE LENGTH(country_name) < 5;"
        },
        {
            "description": "How to retrieve distinct country names starting with 'A', 'G' or 'E' using a Google BigQuery SQL SELECT statement?",
            "sql": "WITH table1 AS\n  (SELECT \"America\" AS country_name\n   UNION ALL SELECT \"Germany\" AS country_name\n   UNION ALL SELECT \"England\" AS country_name\n   UNION ALL SELECT \"Nauru\" AS country_name\n   UNION ALL SELECT \"Brunei\" AS country_name\n   UNION ALL SELECT \"Kiribati\" AS country_name\n   UNION ALL SELECT \"Djibouti\" AS country_name\n   UNION ALL SELECT \"Malta\" AS country_name)\nSELECT *\nFROM table1\nWHERE LOWER(SUBSTR(country_name, 1, 1)) IN ('a',\n                                            'g',\n                                            'e');"
        },
        {
            "description": "How to retrieve all country names starting with either 'A', 'G', or 'E'?",
            "sql": "WITH table1 AS\n  (SELECT \"America\" AS country_name\n   UNION ALL SELECT \"Germany\" AS country_name\n   UNION ALL SELECT \"England\" AS country_name\n   UNION ALL SELECT \"Nauru\" AS country_name\n   UNION ALL SELECT \"Brunei\" AS country_name\n   UNION ALL SELECT \"Kiribati\" AS country_name\n   UNION ALL SELECT \"Djibouti\" AS country_name\n   UNION ALL SELECT \"Malta\" AS country_name)\nSELECT *\nFROM table1\nWHERE REGEXP_CONTAINS(country_name, r'(?i)^(a|g|e)');"
        },
        {
            "description": "How to retrieve the names of all the countries in the table?",
            "sql": "SELECT country_name\nFROM [bigquery-public-data:utility_us.country_code_iso];"
        },
        {
            "description": "How to selectively retrieve rows from a table based on a small, random probability?",
            "sql": "SELECT *\nEXCEPT (rnd)\nFROM\n  (SELECT rand() rnd,\n          *\n   FROM `project.dataset.your_table`)\nWHERE rnd < 0.02;"
        },
        {
            "description": "How to retrieve a list of spreadsheet filenames in a dataset, along with the spreadsheet with the most similar name and the number of words the two filenames have in common.?",
            "sql": "WITH `project.dataset.spreadsheets` AS\n  (SELECT 1 AS id,\n          'Quality Control.xlsx' AS spreadsheet\n   UNION ALL SELECT 2,\n                    'Product Structure.xlsx'\n   UNION ALL SELECT 3,\n                    'Invoices Sent April.xslx'\n   UNION ALL SELECT 4,\n                    'Invoices Sent March.xlsx'\n   UNION ALL SELECT 5,\n                    'Total Costs April.xlsx'\n   UNION ALL SELECT 6,\n                    'Total Costs March.xlsx'\n   UNION ALL SELECT 7,\n                    'Process of Quality Control.xlsx')\nSELECT id,\n       s1 spreadsheet,\n       IF(words = 0, NULL, s2) matching_spreadsheet,\n       words\nFROM\n  (SELECT id,\n          s1,\n          ARRAY_AGG(STRUCT(s2, words)\n                    ORDER BY words DESC\n                    LIMIT 1)[OFFSET(0)].*\n   FROM\n     (SELECT t1.id,\n             t1.spreadsheet s1,\n             t2.spreadsheet s2,\n\n        (SELECT COUNTIF(word != 'xlsx')\n         FROM UNNEST(REGEXP_EXTRACT_ALL(t1.spreadsheet, r'\\w+')) word\n         JOIN UNNEST(REGEXP_EXTRACT_ALL(t2.spreadsheet, r'\\w+')) word USING(word)) words\n      FROM `project.dataset.spreadsheets` t1\n      CROSS JOIN `project.dataset.spreadsheets` t2\n      WHERE t1.spreadsheet != t2.spreadsheet)\n   GROUP BY id,\n            s1);"
        },
        {
            "description": "How to retrieve spreadsheet names that contain words that match other spreadsheet names in a BigQuery table?",
            "sql": "SELECT rowid, spreadsheet,\n              matching_spreadsheet,\n              CASE\n                  WHEN spreadsheet LIKE '%' || matching_spreadsheet || '%' THEN 1\n                  ELSE 0\n              END AS words\nFROM\n  (SELECT *,\n          IFNULL(REGEXP_EXTRACT(spreadsheet, r\"(.*)(?i)(?=.*(\\w+))\\2.*\"), '') AS matching_spreadsheet\n   FROM `bigquery-public-data.utility_us.crossword`)\nGROUP BY 2,\n         3\nHAVING COUNT(spreadsheet) > 1;"
        },
        {
            "description": "How to join two BigQuery tables, tbl1 and tbl2, on the pid column and specify additional filtering?",
            "sql": "SELECT *\nFROM\n  (SELECT *\n   FROM `my_project.my_dataset.my_table_1`) AS tbl1\nLEFT JOIN\n  (SELECT *\n   FROM `my_project.my_dataset.my_table_2`) AS tbl2 USING(pid)\nWHERE tbl1.category LIKE '111002%';"
        },
        {
            "description": "How to retrieve rows from two tables using a LEFT JOIN and a WHERE clause with LIKE operator?",
            "sql": "SELECT tbl1,\n       tbl2\nFROM\n  (SELECT *\n   FROM `my_project.my_dataset.my_table_1`) AS tbl1\nLEFT JOIN\n  (SELECT *\n   FROM `my_project.my_dataset.my_table_2`) AS tbl2 USING(pid)\nWHERE tbl1.category LIKE '111002%';"
        },
        {
            "description": "How to retrieve a view with a name that includes the name of a partitioned BigQuery table?",
            "sql": "CREATE VIEW `fh-bigquery.views.wikipedia_views_test_ddl` AS\nSELECT PARSE_TIMESTAMP('%Y%m%d-%H%M%S', REGEXP_EXTRACT(_FILE_NAME, '[0-9]+-[0-9]+')) datehour ,\n       _FILE_NAME filename ,\n       LINE\nFROM `fh-bigquery.views.wikipedia_views_gcs`;"
        },
        {
            "description": "How to retrieve all rows from the `wikipedia_views_test_ddl` with a datehour corresponding to October 21, 2015 at 7:00am?",
            "sql": "SELECT *\nFROM `fh-bigquery.views.wikipedia_views_test_ddl`\nWHERE EXTRACT(YEAR\n              FROM datehour)=2015\n  AND EXTRACT(MONTH\n              FROM datehour)=10\n  AND EXTRACT(DAY\n              FROM datehour)=21\n  AND EXTRACT(HOUR\n              FROM datehour)=7;"
        },
        {
            "description": "How to retrieve all intervals from a table that overlap with a given range.?",
            "sql": "SELECT t.id,\n       StartPoint,\n       EndPoint,\n       interval_start,\n       interval_end\nFROM\n  (SELECT id,\n          CAST(StartPoint AS INT64) StartPoint,\n          CAST(EndPoint AS INT64) EndPoint\n   FROM `project.dataset.intervals` t,\n        UNNEST(SPLIT(StartPoints)) StartPoint WITH\n   OFFSET pos1\n   JOIN UNNEST(SPLIT(EndPoints)) EndPoint WITH\n   OFFSET pos2 ON pos1 = pos2) t\nJOIN `project.dataset.checks` c ON c.id = t.id\nAND (interval_start BETWEEN StartPoint AND EndPoint\n     OR interval_end BETWEEN StartPoint AND EndPoint);"
        },
        {
            "description": "How to retrieve a list of intervals and the checks that overlap the intervals.?",
            "sql": "WITH `project.dataset.intervals` AS\n  (SELECT 1000 id,\n          '94994731,94997876,94998645,95001520,95005812,95007092' StartPoints,\n                                                                  '94996152,94998036,94998824,95001720,95005924,95007413' EndPoints\n   UNION ALL SELECT 2000 id,\n                    '74994731' StartPoints,\n                               '74996152' EndPoints),\n     `project.dataset.checks` AS\n  (SELECT 1000 id,\n          95005812 interval_start,\n          95005815 interval_end)\nSELECT t.id,\n       StartPoint,\n       EndPoint,\n       interval_start,\n       interval_end\nFROM\n  (SELECT id,\n          CAST(StartPoint AS INT64) StartPoint,\n          CAST(EndPoint AS INT64) EndPoint\n   FROM `project.dataset.intervals` t,\n        UNNEST(SPLIT(StartPoints)) StartPoint WITH\n   OFFSET pos1\n   JOIN UNNEST(SPLIT(EndPoints)) EndPoint WITH\n   OFFSET pos2 ON pos1 = pos2) t\nJOIN `project.dataset.checks` c ON c.id = t.id\nAND (interval_start BETWEEN StartPoint AND EndPoint\n     OR interval_end BETWEEN StartPoint AND EndPoint);"
        },
        {
            "description": "How to retrieve the interval_start for a given row id?",
            "sql": "SELECT row_id,\n       interval_start\nFROM UNNEST([STRUCT<start_point INT64, end_point INT64,interval_start INT64,interval_end INT64>(95005812, 95005924, 95005812, 95005815)]) AS interval_range\nWHERE row_id = 1000;"
        },
        {
            "description": "How to retrieve a string representation of the SQL type?",
            "sql": "SELECT CASE\n           WHEN isinstance(object_type, int) THEN 'INTEGER'\n           WHEN isinstance(object_type, float) THEN 'FLOAT'\n           WHEN isinstance(object_type, bool) THEN 'BOOLEAN'\n       END\nFROM UNNEST(GENERATE_ARRAY(STRUCT(STRUCT(1 AS id), STRUCT(1 AS object_type)), STRUCT(STRUCT(2 AS id), STRUCT(2 AS object_type)), STRUCT(STRUCT(3 AS id), STRUCT(TRUE AS object_type)))) AS t\nORDER BY t.id;"
        },
        {
            "description": "How to retrieve the result of isinstance(True, int) using BigQuery SQL?",
            "sql": "SELECT CAST(isinstance(TRUE, INT64) AS STRING);"
        },
        {
            "description": "How to get a list of all data sources associated with a particular parameter along with the top-most used data source and total sessions?",
            "sql": "SELECT\n  (SELECT datasource\n   FROM t.hits\n   GROUP BY 1\n   ORDER BY COUNT(1) DESC\n   LIMIT 1) mostFrequDatasource ,\n\n  (SELECT STRING_AGG(DISTINCT datasource)\n   FROM t.hits) allDataSources ,\n       SUM(totals.visits) sessions\nFROM `ga_sessions` t\nGROUP BY 1,\n         2;"
        },
        {
            "description": "How to update the CBSA_CODE field to '54620' for all rows in the dataset.people table where the zip field starts with '99047%'?",
            "sql": "UPDATE `project.dataset.people`\nSET CBSA_CODE = '54620'\nWHERE zip LIKE '99047%';"
        },
        {
            "description": "How to update CBSA_CODE for specific ZIP codes?",
            "sql": "UPDATE `project.dataset.people`\nSET CBSA_CODE = CASE SUBSTR(zip, 1, 5)\n                    WHEN '99047' THEN '54620'\n                    WHEN '45700' THEN '31793'\n                END\nWHERE SUBSTR(zip, 1, 5) IN ('99047',\n                            '45700');"
        },
        {
            "description": "How to retrieve the visitor_id of visitors that either made a booking or searched for flights to or from JFK, LGA, EWR, or MSY, grouped by visitor_id?",
            "sql": "SELECT visitor_id,\n       'Y' = MAX(booked) booked,\n       1 < COUNTIF(searched_to IN ('JFK', 'LGA', 'EWR', 'MSY')\n                   OR searched_from IN ('JFK', 'LGA', 'EWR', 'MSY')) EXTENDED\nFROM `project.dataset.your_table`\nGROUP BY visitor_id;"
        },
        {
            "description": "How to retrieve the unique visitor_ids that booked a flight?",
            "sql": "SELECT DISTINCT visitor_id\nFROM `project.dataset.your_table`\nWHERE booked = 'Y';"
        },
        {
            "description": "How to retrieve visitor IDs of those who extended the booked stay.?",
            "sql": "SELECT visitor_id\nFROM `project.dataset.t`\nWHERE booked = TRUE\n  AND EXTENDED = TRUE;"
        },
        {
            "description": "How to retrieve the count of users who searched for or booked flights to the NYC metro area airport codes ('JFK', 'LGA', 'EWR', 'MSY')?",
            "sql": "SELECT EXTENDED,\n       booked,\n       COUNT(1) cnt\nFROM\n  (SELECT visitor_id,\n          'Y' = MAX(booked) booked,\n          1 < COUNTIF(searched_to IN ('JFK', 'LGA', 'EWR', 'MSY')\n                      OR searched_from IN ('JFK', 'LGA', 'EWR', 'MSY')) EXTENDED\n   FROM `project.dataset.your_table`\n   GROUP BY visitor_id)\nGROUP BY EXTENDED,\n         booked;"
        },
        {
            "description": "How to retrieve the count of rows with specific combinations of extended, booked, and cnt values?",
            "sql": "SELECT EXTENDED,\n       booked,\n       cnt,\n       COUNT(*)\nFROM `project.dataset.tablename`\nGROUP BY 1,\n         2,\n         3;"
        },
        {
            "description": "How many users have searched for at least one airport in the list of extended airports, and out of those how many have booked?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 11 visitor_id,\n          'JFK' searched_to,\n                'LCY' searched_from,\n                      'N' booked\n   UNION ALL SELECT 11,\n                    'LGA',\n                    'LCY',\n                    'N'\n   UNION ALL SELECT 11,\n                    'EWR',\n                    'LCY',\n                    'N'\n   UNION ALL SELECT 12,\n                    'JFK',\n                    'LCY',\n                    'N'\n   UNION ALL SELECT 13,\n                    'MSY',\n                    'LTN',\n                    'Y'\n   UNION ALL SELECT 14,\n                    'JFK',\n                    'LTN',\n                    'N'\n   UNION ALL SELECT 14,\n                    'JFK',\n                    'LGW',\n                    'N'\n   UNION ALL SELECT 14,\n                    'EWR',\n                    'LCY',\n                    'Y'\n   UNION ALL SELECT 15,\n                    'GOA',\n                    'MSY',\n                    'N')\nSELECT EXTENDED,\n       booked,\n       COUNT(1) cnt\nFROM\n  (SELECT visitor_id,\n          'Y' = MAX(booked) booked,\n          1 < COUNTIF(searched_to IN ('JFK', 'LGA', 'EWR', 'MSY')\n                      OR searched_from IN ('JFK', 'LGA', 'EWR', 'MSY')) EXTENDED\n   FROM `project.dataset.your_table`\n   GROUP BY visitor_id)\nGROUP BY EXTENDED,\n         booked;"
        },
        {
            "description": "How to fill NULLs with the most recent non-NULL value in a table with duplicate 'id' values?",
            "sql": "SELECT id,\n       IFNULL(col_1, FIRST_VALUE(col_1\n                                 IGNORE NULLS) OVER(win)) col_1,\n       IFNULL(col_2, FIRST_VALUE(col_2\n                                 IGNORE NULLS) OVER(win)) col_2,\n       updated\nFROM `project.dataset.your_table` WINDOW win AS (PARTITION BY id\n                                                 ORDER BY updated DESC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING);"
        },
        {
            "description": "How to use `FIRST_VALUE` to fill in missing data for each ID based on the latest update?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 id,\n          'first_data' col_1,\n                       NULL col_2,\n                            '4/22' updated\n   UNION ALL SELECT 1,\n                    NULL,\n                    'old',\n                    '4/23'\n   UNION ALL SELECT 1,\n                    NULL,\n                    'correct',\n                    '4/24'\n   UNION ALL SELECT 1,\n                    'next_data',\n                    NULL,\n                    '4/25'\n   UNION ALL SELECT 1,\n                    NULL,\n                    NULL,\n                    '4/26')\nSELECT id,\n       IFNULL(col_1, FIRST_VALUE(col_1\n                                 IGNORE NULLS) OVER(win)) col_1,\n       IFNULL(col_2, FIRST_VALUE(col_2\n                                 IGNORE NULLS) OVER(win)) col_2,\n       updated\nFROM `project.dataset.your_table` WINDOW win AS (PARTITION BY id\n                                                 ORDER BY updated DESC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING)\nORDER BY id,\n         updated;"
        },
        {
            "description": "How to retrieve only the latest data in each set of data?",
            "sql": "SELECT *\nFROM\n  (SELECT *,\n          ROW_NUMBER() OVER (PARTITION BY col_1\n                             ORDER BY updated DESC) AS latest_row\n   FROM your_table)\nWHERE latest_row=1;"
        },
        {
            "description": "How to retrieve a list of the products and their total unit sales for each year in descending order, with the product with the highest sales in each year listed first.?",
            "sql": "WITH table1 AS\n  (SELECT \"ProductA\" AS Product,\n          80000 AS units_sold,\n          \"2016\" AS YEAR\n   UNION ALL SELECT \"ProductB\" AS Product,\n                    75000 AS units_sold,\n                    \"2016\" AS YEAR\n   UNION ALL SELECT \"ProductC\" AS Product,\n                    15000 AS units_sold,\n                    \"2016\" AS YEAR),\n     table2 AS\n  (SELECT \"ProductA\" AS Product,\n          60000 AS units_sold,\n          \"2017\" AS YEAR\n   UNION ALL SELECT \"ProductB\" AS Product,\n                    120000 AS units_sold,\n                    \"2017\" AS YEAR\n   UNION ALL SELECT \"ProductC\" AS Product,\n                    70000 AS units_sold,\n                    \"2017\" AS YEAR)\nSELECT ARRAY_AGG(STRUCT(Product, units_sold)\n                 ORDER BY units_sold DESC)[OFFSET(0)].*,\n       YEAR\nFROM\n  (SELECT Product,\n          YEAR,\n          SUM(units_sold) units_sold\n   FROM\n     (SELECT *\n      FROM table1\n      UNION ALL SELECT *\n      FROM table2)\n   GROUP BY Product,\n            YEAR)\nGROUP BY YEAR\nORDER BY YEAR;"
        },
        {
            "description": "How to retrieve all rows from the nested table in a specific dataset where the `title` field of any comments list has the value 'Hello'?",
            "sql": "SELECT *\nFROM `project.dataset.nested`\nWHERE EXISTS\n    (SELECT 1\n     FROM UNNEST(comments)\n     WHERE title = 'Hello');"
        },
        {
            "description": "How to how to remove everything in a string after the first question mark ('?')?",
            "sql": "SELECT REGEXP_REPLACE(longstringcolumn, '\\?.*', '') AS newstring\nFROM `project.dataset.tablename`;"
        },
        {
            "description": "How to remove all substrings matching a regular expression from a long string column?",
            "sql": "SELECT REGEXP_REPLACE(longstringcolumn, r'\\?.*', '') AS newstring\nFROM `project.dataset.tablename`;"
        },
        {
            "description": "How to remove all characters after a question mark (?) from a string in a BigQuery table?",
            "sql": "WITH tablename AS\n  (SELECT 'is this a question?abc ' AS longstringcolumn\n   UNION ALL SELECT 'this is not a question'\n   UNION ALL SELECT'http://example.com/one/two/three?lang=en&region=CN')\nSELECT REGEXP_REPLACE(longstringcolumn, r'\\?.*', '') AS newstring\nFROM tablename;"
        },
        {
            "description": "How to retrieve rows where the \"newstring\" column matches a question.?",
            "sql": "SELECT *\nFROM `project.dataset.your_table`\nWHERE newstring LIKE '%?%';"
        },
        {
            "description": "How to retrieve the JSON representation of the array of structs within your table.?",
            "sql": "WITH yourTable AS\n  (SELECT ARRAY<STRUCT<id INT64,\n                       TYPE STRING>>[(1, 'abc'), (2, 'xyz')] instances)\nSELECT TO_JSON_STRING(t)\nFROM yourTable t;"
        },
        {
            "description": "How to retrieve all instances and their types from a JSON object?",
            "sql": "SELECT id,\n       TYPE\nFROM JSON_VALUE('{\"instances\":[{\"id\":1,\"type\":\"abc\"},{\"id\":2,\"type\":\"xyz\"}]}');"
        },
        {
            "description": "How to retrieve a JSON string from a table.?",
            "sql": "SELECT TO_JSON_STRING(t)\nFROM `yourproject.yourdataset.yourtable` AS t\nWHERE end_time >='2018-04-19'\n;"
        },
        {
            "description": "How to retrieve one instance of a JSON stored in a table with a given end time.?",
            "sql": "SELECT [TO_JSON_STRING(t)] AS INSTANCE\nFROM `yourproject.yourdataset.yourtable` t\nWHERE end_time >='2018-04-19'\n;"
        },
        {
            "description": "How many Active records are assigned to each Employee in 'TABLE_2'?",
            "sql": "SELECT \"Active\" AS TYPE,\n       COUNT(CASE\n                 WHEN status = 0 THEN 1\n             END) AS total,\n       t2.display_name AS name\nFROM `TABLE_1` t1\nJOIN `TABLE_2` t2 ON t1.assigned_employee_id = t2.id\nGROUP BY t2.display_name;"
        },
        {
            "description": "How to retrieve the monthly distribution of comments created in August 2017?",
            "sql": "SELECT DATE_TRUNC(DATE(TIMESTAMP_SECONDS(created_utc)), MONTH)\nFROM `fh-bigquery.reddit_comments.2017_08`\n;"
        },
        {
            "description": "How to retrieve the date of the created_utc column for this table, expressed in the YYY-MM-DD format?",
            "sql": "SELECT DATE_FROM_UNIX_DATE(CAST(created_utc/86400 AS INT64))\nFROM `fh-bigquery.reddit_comments.2017_08`;"
        },
        {
            "description": "How to how to create an array of dates based on a start date and a range of months?",
            "sql": "SELECT(DATE_ADD(DATE(start_date), INTERVAL 1* n MONTH)) AS date\nFROM `project.dataset.ExistingTable`,\n     UNNEST(GENERATE_ARRAY(0, 12, 1)) n;"
        },
        {
            "description": "How to retrieve a list of dates starting from a given start date, with each date being one month apart from the previous one.?",
            "sql": "SELECT(DATE_ADD(DATE(\n                       (SELECT start_date\n                        FROM `project.dataset.ExistingTable`)), INTERVAL 1* n MONTH)) AS date\nFROM UNNEST(GENERATE_ARRAY(0, 12, 1)) n;"
        },
        {
            "description": "How to retrieve a table with categories extracted using REGEXP_EXTRACT_ALL from a column with multiple categories.?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT \"452\" ID,\n          \"France\" LOCATION,\n                   400 Calories,\n                   \"/ brown / nutty / salty /\" Categories\n   UNION ALL SELECT \"288\",\n                    \"UK\",\n                    800,\n                    \"/ brown / roasted / nutty /\")\nSELECT ID,\n       LOCATION,\n       Calories,\n       Category\nFROM `project.dataset.your_table`,\n     UNNEST(REGEXP_EXTRACT_ALL(Categories, r' (\\w+) ')) Category;"
        },
        {
            "description": "How to group rows with the same Row ID, Location, Calories, and Category?",
            "sql": "SELECT Row_ID,\n       LOCATION,\n       Calories,\n       Category,\n       SUM(Calories) OVER (PARTITION BY Row_ID) AS TotalCalories\nFROM project.dataset.DATA`;"
        },
        {
            "description": "How to retrieve all combinations of rows from the 'inv' and 'prof' tables, including rows with matching values in all three columns and rows with unmatched values.?",
            "sql": "WITH inv AS\n  (SELECT'001' AS company,\n         'abc' AS vendor,\n         800.00 AS TRANSACTION,\n         'inv' AS TYPE\n   UNION ALL SELECT'002' AS company,\n                   'efg' AS vendor,\n                   23.4 AS TRANSACTION,\n                   'inv' AS TYPE),\n     prof AS\n  (SELECT'001' AS company,\n         'abc' AS vendor,\n         800.00 AS TRANSACTION,\n         'prof' AS TYPE\n   UNION ALL SELECT'002' AS company,\n                   'efg' AS vendor,\n                   23.4 AS TRANSACTION,\n                   'prof' AS TYPE)\nSELECT inv,\n       prof\nFROM inv\nFULL JOIN prof USING (company,\n                      vendor,\n                      TRANSACTION);"
        },
        {
            "description": "How to retrieve the values from all columns in the 'inv' table but only columns 'company' and 'type' from the 'prof' table.?",
            "sql": "SELECT inv.company,\n       inv.vendor,\n       inv.transaction,\n       inv.type,\n       prof.company,\n       prof.type\nFROM `inv`\nJOIN `prof` ON inv.company = prof.company;"
        },
        {
            "description": "How to update a column using a defined, substring-based expression?",
            "sql": "UPDATE `possible-stock-172109.180417Page_dataset.page`\nSET unique_id = SUBSTR(page, 5, 22)\nWHERE Product = \"HT_AMP\";"
        },
        {
            "description": "Retrieve a list of timestamps between two dates, but with an interval offset?",
            "sql": "SELECT TIMESTAMP_ADD('2018-04-01', INTERVAL 15 * x MINUTE)\nFROM UNNEST(GENERATE_ARRAY(0, 13)) AS x;"
        },
        {
            "description": "How to generate an array of minute timestamps between two given timestamps?",
            "sql": "CREATE TEMP FUNCTION GenerateMinuteTimestampArray(t0 TIMESTAMP, t1 TIMESTAMP, minutes INT64) AS (ARRAY\n                                                                                                   (SELECT TIMESTAMP_ADD(t0, INTERVAL minutes * x MINUTE)\n                                                                                                    FROM UNNEST(GENERATE_ARRAY(0, TIMESTAMP_DIFF(t1, t0, MINUTE))) AS x));\n\nSELECT ts\nFROM UNNEST(GenerateMinuteTimestampArray('2018-04-01', '2018-04-01 12:00:00', 15)) AS ts;"
        },
        {
            "description": "How to retrieve an array of timestamps, with a 15-minute interval, between two specified timestamps?",
            "sql": "SELECT GENERATE_TIMESTAMP_ARRAY('2016-10-18', '2016-10-19', INTERVAL 15 MINUTE);"
        },
        {
            "description": "How to retrieve the current day of the week as a number (1-7)?",
            "sql": "SELECT EXTRACT(DAYOFWEEK\n               FROM CURRENT_DATE());"
        },
        {
            "description": "How to calculate the last week's sales total for each item in the table?",
            "sql": "SELECT *,\n       IFNULL(SUM(sales_total) OVER(rolling_last_week), 0) last_week\nFROM `project.dataset.your_table` WINDOW rolling_last_week AS (PARTITION BY id\n                                                               ORDER BY DATE_DIFF(PARSE_DATE('%m-%d-%y', sales_date), '2000-01-01', WEEK) RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING)\nORDER BY id,\n         sales_date;"
        },
        {
            "description": "How to retrieve last week's sales total for each week for a given ID.?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 id,\n          '01-01-17' sales_date,\n                     1 weeknumber,\n                     5 sales_total\n   UNION ALL SELECT 1,\n                    '01-02-17',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    '01-03-17',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    '01-04-17',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    '01-05-17',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    '01-06-17',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    '01-07-17',\n                    1,\n                    5\n   UNION ALL SELECT 1,\n                    '01-08-17',\n                    2,\n                    10\n   UNION ALL SELECT 1,\n                    '01-09-17',\n                    2,\n                    10\n   UNION ALL SELECT 1,\n                    '01-10-17',\n                    2,\n                    10\n   UNION ALL SELECT 1,\n                    '01-11-17',\n                    2,\n                    10\n   UNION ALL SELECT 1,\n                    '01-12-17',\n                    2,\n                    10\n   UNION ALL SELECT 1,\n                    '01-13-17',\n                    2,\n                    10\n   UNION ALL SELECT 1,\n                    '01-14-17',\n                    2,\n                    10)\nSELECT *,\n       IFNULL(SUM(sales_total) OVER(rolling_last_week), 0) last_week\nFROM `project.dataset.your_table` WINDOW rolling_last_week AS (PARTITION BY id\n                                                               ORDER BY DATE_DIFF(PARSE_DATE('%m-%d-%y', sales_date), '2000-01-01', WEEK) RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING)\nORDER BY id,\n         sales_date;"
        },
        {
            "description": "How to retrieve the total sum of sales for the current week and last week.?",
            "sql": "SELECT sum(sales_total)\nFROM `project.dataset.my_table`\nWHERE weeknumber = current_week_number\nUNION\nSELECT sum(sales_total)\nFROM project.dataset.my_table`\nWHERE weeknumber = current_week_number - 1;"
        },
        {
            "description": "How to retrieve the current status and the status from the previous day for each account.?",
            "sql": "SELECT t.*,\n       nth_value(status, 1) OVER (PARTITION BY accountkey\n                                  ORDER BY date DESC) AS current_status,\n       nth_value(status, 2) OVER (PARTITION BY accountkey\n                                  ORDER BY date DESC) AS current_status_but_one\nFROM t;"
        },
        {
            "description": "How to retrieve created table and its configuration by specifying the table ID string and schema information?",
            "sql": "SELECT *\nFROM `bigquery-public-data.utility_us.country_code_iso`;"
        },
        {
            "description": "How to retrieve the row with the highest value in each group?",
            "sql": "SELECT ROW[OFFSET(0)].*\nFROM\n  (SELECT ARRAY_AGG(t\n                    ORDER BY value DESC\n                    ) ROW\n   FROM `project.dataset.table_with_dups` t\n   GROUP BY id);"
        },
        {
            "description": "How to select rows with the maximum value for each group?",
            "sql": "WITH `project.dataset.table_with_dups` AS\n  (SELECT 1 id,\n          2 value\n   UNION ALL SELECT 1,\n                    3\n   UNION ALL SELECT 1,\n                    4\n   UNION ALL SELECT 2,\n                    5\n   UNION ALL SELECT 3,\n                    6\n   UNION ALL SELECT 3,\n                    7\n   UNION ALL SELECT 4,\n                    8\n   UNION ALL SELECT 5,\n                    9\n   UNION ALL SELECT 5,\n                    10)\nSELECT ROW[OFFSET(0)].*\nFROM\n  (SELECT ARRAY_AGG(t\n                    ORDER BY value DESC\n                    LIMIT 1) ROW\n   FROM `project.dataset.table_with_dups` t\n   GROUP BY id);"
        },
        {
            "description": "How to retrieve the yearly global CO2 emissions from fossil fuels, sea level, and average global temperature since 1983?",
            "sql": "SELECT t1.year,\n       gas_fuel,\n       liquid_fuel,\n       solid_fuel,\n       cement,\n       annual_anomaly ,\n\n  (SELECT avg(TEMP)\n   FROM `bigquery-public-data.noaa_gsod.gsod*`\n   WHERE YEAR = t1.year) AS average_temperature\nFROM `cs779-term-project.CO2_FossilFuel.GlobalEmissions` AS t1\nJOIN `cs779-term-project.CO2_FossilFuel.SeaLevels` AS t2 ON t1.year = t2.year\nWHERE t1.year > 1982\nORDER BY t1.year ASC;"
        },
        {
            "description": "How to find the average sales for the five most recent business days from the current date for each `id` in `tableA`?",
            "sql": "SELECT id,\n       dt,\n       sales,\n       AVG(sales) OVER (PARTITION BY id\n                        ORDER BY dt ROWS BETWEEN 4 PRECEDING AND 1 PRECEDING) AS projected_sale\nFROM `project.dataset.tableA`,\n  (SELECT 1 id,\n          '01-05-17' dt,\n                     0 sales);"
        },
        {
            "description": "How to retrieve the sales information for a specific time range and for the previous four time periods?",
            "sql": "SELECT id,\n       dt,\n       sales,\n       AVG(sales) OVER (PARTITION BY id\n                        ORDER BY dt ROWS BETWEEN 4 PRECEDING AND 1 PRECEDING) AS projected_sale\nFROM\n  (SELECT *\n   FROM\n     (SELECT 1 id,\n             '01-01-17' dt,\n                        5 sales),\n     (SELECT 1 id,\n             '01-02-17' dt,\n                        6 sales),\n     (SELECT 1 id,\n             '01-03-17' dt,\n                        7 sales),\n     (SELECT 1 id,\n             '01-04-17' dt,\n                        10 sales)) tableA,\n  (SELECT 1 id,\n          '01-05-17' dt,\n                     0 sales);"
        },
        {
            "description": "How to retrieve the total for each date when there's a corresponding entry in the first table.?",
            "sql": "SELECT a.total,\n       b.\"date\"\nFROM b\nLEFT JOIN a ON a.\"date\" = b.\"date\";"
        },
        {
            "description": "How to retrieve the average sales total for the past three previous same weekdays, for each id and weekday combination.?",
            "sql": "SELECT id,\n       sales_date,\n       weekday,\n       sales_total,\n       AVG(sales_total) OVER(rolling_3_previous_same_weekdays) rolling_avg\nFROM\n  (SELECT *,\n          EXTRACT(DAYOFWEEK\n                  FROM sales_date) weekday\n   FROM t)WINDOW rolling_3_previous_same_weekdays AS (PARTITION BY id,\n                                                                   weekday\n                                                      ORDER BY sales_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)\nORDER BY weekday,\n         sales_date;"
        },
        {
            "description": "How to compute the rolling 3-day average daily sales for each day of the week?",
            "sql": "WITH t AS\n  (SELECT 1 id,\n          1 AS sales_total, DATE '2017-01-01' sales_date\n   UNION ALL SELECT 1,\n                    2, DATE '2017-01-02'\n   UNION ALL SELECT 1,\n                    3, DATE '2017-01-03'\n   UNION ALL SELECT 1,\n                    4, DATE '2017-01-04'\n   UNION ALL SELECT 1,\n                    5, DATE '2017-01-05'\n   UNION ALL SELECT 1,\n                    6, DATE '2017-01-06'\n   UNION ALL SELECT 1,\n                    7, DATE '2017-01-07'\n   UNION ALL SELECT 1,\n                    8, DATE '2017-01-08'\n   UNION ALL SELECT 1,\n                    9, DATE '2017-01-09'\n   UNION ALL SELECT 1,\n                    10, DATE '2017-01-10'\n   UNION ALL SELECT 1,\n                    11, DATE '2017-01-11'\n   UNION ALL SELECT 1,\n                    12, DATE '2017-01-12'\n   UNION ALL SELECT 1,\n                    13, DATE '2017-01-13'\n   UNION ALL SELECT 1,\n                    14, DATE '2017-01-14'\n   UNION ALL SELECT 1,\n                    15, DATE '2017-01-15'\n   UNION ALL SELECT 1,\n                    16, DATE '2017-01-16'\n   UNION ALL SELECT 1,\n                    17, DATE '2017-01-17'\n   UNION ALL SELECT 1,\n                    18, DATE '2017-01-18'\n   UNION ALL SELECT 1,\n                    19, DATE '2017-01-19'\n   UNION ALL SELECT 1,\n                    20, DATE '2017-01-20'\n   UNION ALL SELECT 1,\n                    21, DATE '2017-01-21'\n   UNION ALL SELECT 1,\n                    22, DATE '2017-01-22'\n   UNION ALL SELECT 1,\n                    23, DATE '2017-01-23'\n   UNION ALL SELECT 1,\n                    24, DATE '2017-01-24'\n   UNION ALL SELECT 1,\n                    25, DATE '2017-01-25'\n   UNION ALL SELECT 1,\n                    26, DATE '2017-01-26'\n   UNION ALL SELECT 1,\n                    27, DATE '2017-01-27'\n   UNION ALL SELECT 1,\n                    28, DATE '2017-01-28'\n   UNION ALL SELECT 1,\n                    29, DATE '2017-01-29'\n   UNION ALL SELECT 1,\n                    30, DATE '2017-01-30'\n   UNION ALL SELECT 1,\n                    31, DATE '2017-01-31')\nSELECT id,\n       sales_date,\n       weekday,\n       sales_total,\n       AVG(sales_total) OVER(rolling_3_previous_same_weekdays) rolling_avg\nFROM\n  (SELECT *,\n          EXTRACT(DAYOFWEEK\n                  FROM sales_date) weekday\n   FROM `project.dataset.your_table) WINDOW rolling_3_previous_same_weekdays AS (PARTITION BY id,\n                                                                                              weekday\n                                                                                 ORDER BY sales_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)\nORDER BY weekday,\n         sales_date;"
        },
        {
            "description": "How to aggregate values in a table by month?",
            "sql": "WITH `mytablehere` AS\n  (SELECT '2018-01-01' AS receivedOn,\n          1 amount\n   UNION ALL SELECT '2018-01-02' AS receivedOn,\n                    2 amount\n   UNION ALL SELECT '2018-03-04' AS receivedOn,\n                    4 amount\n   UNION ALL SELECT '2018-05-10' AS receivedOn,\n                    3 amount\n   UNION ALL SELECT '2018-05-11',\n                    5),\n     months AS\n  (SELECT MONTH\n   FROM\n     (SELECT MIN(PARSE_DATE('%Y-%m-%d', receivedOn)) AS min_month,\n             MAX(PARSE_DATE('%Y-%m-%d', receivedOn)) AS max_month\n      FROM `mytablehere`), UNNEST(GENERATE_DATE_ARRAY(min_month, max_month, INTERVAL 1 MONTH)) MONTH)\nSELECT FORMAT_DATE('%Y-%m', MONTH) AS DATE,\n       SUM(amount) amount\nFROM months\nLEFT JOIN `mytablehere` ON FORMAT_DATE('%Y-%m', PARSE_DATE('%Y-%m-%d', receivedOn)) = FORMAT_DATE('%Y-%m', MONTH)\nGROUP BY DATE\nORDER BY DATE ASC;"
        },
        {
            "description": "How to retrieve the names of objects in a JSON-formatted field.?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 1 obj_id,\n          '{\"10037\":{\"id\":\"10550\",\"name\":\"Original\",\"index\":0},\"10403\":{\"id\":\"104470\",\"name\":\"Original\",\"index\":0},\"105852\":{\"id\":\"10608\",\"name\":\"Success\",\"index\":1},\"1052\":{\"id\":\"105993\",\"name\":\"Promo\",\"index\":0}}' AS OBJECT)\nSELECT obj_id,\n       name\nFROM `project.dataset.your_table`,\n     UNNEST(REGEXP_EXTRACT_ALL(OBJECT, r'\"name\":\"(\\w+)\"')) name;"
        },
        {
            "description": "How to retrieve the distinct values of the 'name' column for all rows where 'obj_id' is 1.?",
            "sql": "SELECT DISTINCT name\nFROM `project.dataset.ROW`\nWHERE obj_id = 1;"
        },
        {
            "description": "How to calculate the rolling six-day moving average for a given metric?",
            "sql": "SELECT id,\n       ref_month,\n       ROUND(SUM(value) OVER (rolling_six_days) / (LAST_VALUE(month_pos) OVER (rolling_six_days) - FIRST_VALUE(month_pos) OVER (rolling_six_days) + 1)) AS correct_moving_avg\nFROM\n  (SELECT id,\n          ref_month,\n          value,\n          DATE_DIFF(ref_month, '2016-01-01', MONTH) month_pos\n   FROM dummy_data) WINDOW rolling_six_days AS (PARTITION BY id\n                                                ORDER BY month_pos RANGE BETWEEN 5 PRECEDING AND CURRENT ROW);"
        },
        {
            "description": "How to calculate a correct moving average of a dataset with missing data?",
            "sql": "WITH dummy_data AS\n  (SELECT DATE '2017-01-01' AS ref_month,\n          18 AS value,\n          1 AS id\n   UNION ALL SELECT DATE '2017-02-01' AS ref_month,\n                    20 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-03-01' AS ref_month,\n                    22 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-05-01' AS ref_month,\n                    30 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-06-01' AS ref_month,\n                    37 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-07-01' AS ref_month,\n                    42 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-10-01' AS ref_month,\n                    51 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-11-01' AS ref_month,\n                    57 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-12-01' AS ref_month,\n                    56 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-01-01' AS ref_month,\n                    18 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-02-01' AS ref_month,\n                    20 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-03-01' AS ref_month,\n                    22 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-04-01' AS ref_month,\n                    28 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-07-01' AS ref_month,\n                    42 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-08-01' AS ref_month,\n                    55 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-09-01' AS ref_month,\n                    49 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-11-01' AS ref_month,\n                    57 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-12-01' AS ref_month,\n                    56 AS value,\n                    2 AS id)\nSELECT id,\n       ref_month,\n       ROUND(SUM(value) OVER (rolling_six_days) / (LAST_VALUE(month_pos) OVER (rolling_six_days) - FIRST_VALUE(month_pos) OVER (rolling_six_days) + 1)) AS correct_moving_avg\nFROM\n  (SELECT id,\n          ref_month,\n          value,\n          DATE_DIFF(ref_month, '2016-01-01', MONTH) month_pos\n   FROM dummy_data) WINDOW rolling_six_days AS (PARTITION BY id\n                                                ORDER BY month_pos RANGE BETWEEN 5 PRECEDING AND CURRENT ROW)\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to calculate the moving sum and average of a rolling window of 6 months?",
            "sql": "WITH dummy_data AS\n  (SELECT DATE '2017-01-01' AS ref_month,\n          18 AS value,\n          1 AS id\n   UNION ALL SELECT DATE '2017-02-01' AS ref_month,\n                    20 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-03-01' AS ref_month,\n                    22 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-05-01' AS ref_month,\n                    30 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-06-01' AS ref_month,\n                    37 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-07-01' AS ref_month,\n                    42 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-10-01' AS ref_month,\n                    51 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-11-01' AS ref_month,\n                    57 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-12-01' AS ref_month,\n                    56 AS value,\n                    1 AS id\n   UNION ALL SELECT DATE '2017-01-01' AS ref_month,\n                    18 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-02-01' AS ref_month,\n                    20 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-03-01' AS ref_month,\n                    22 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-04-01' AS ref_month,\n                    28 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-07-01' AS ref_month,\n                    42 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-08-01' AS ref_month,\n                    55 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-09-01' AS ref_month,\n                    49 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-11-01' AS ref_month,\n                    57 AS value,\n                    2 AS id\n   UNION ALL SELECT DATE '2017-12-01' AS ref_month,\n                    56 AS value,\n                    2 AS id)\nSELECT id,\n       ref_month,\n       value,\n       moving_sum,\n       first_month,\n       last_month,\n       ROUND(moving_sum / (last_month - first_month + 1)) AS correct_moving_avg,\n       moving_avg\nFROM\n  (SELECT id,\n          ref_month,\n          value,\n          SUM(value) OVER (rolling_six_days) AS moving_sum,\n          FIRST_VALUE(month_pos) OVER (rolling_six_days) AS first_month,\n          LAST_VALUE(month_pos) OVER (rolling_six_days) AS last_month,\n          AVG(value) OVER (rolling_six_days) AS moving_avg\n   FROM\n     (SELECT id,\n             ref_month,\n             value,\n             DATE_DIFF(ref_month, '2016-01-01', MONTH) month_pos\n      FROM dummy_data) WINDOW rolling_six_days AS (PARTITION BY id\n                                                   ORDER BY month_pos RANGE BETWEEN 5 PRECEDING AND CURRENT ROW))\nORDER BY 1,\n         2;"
        },
        {
            "description": "How to retrieve the sum of values for the last 3 months for each unique id and month.?",
            "sql": "SELECT id,\n       ref_month,\n       SUM(value) OVER(PARTITION BY id\n                       ORDER BY ref_month RANGE BETWEEN INTERVAL 3 MONTH PRECEDING AND CURRENT ROW) AS moving_sum\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to retrieve the fullVisitorId, visitNumber, pageviews, and client_id from a BigQuery table for a given date range, where the client_id is in a list of values in the 'table' table.?",
            "sql": "SELECT fullVisitorId,\n       visitNumber,\n       totals.pageviews,\n       customDimensions.value AS client_id\nFROM FLATTEN(\n               (SELECT *\n                FROM TABLE_DATE_RANGE([xxxxxxx.ga_sessions_], TIMESTAMP('2017-01-01'), TIMESTAMP('2018-01-01'))), customDimensions)\nWHERE customDimensions.index = 2\n  AND customDimensions.value IN\n    (SELECT STRING(id)\n     FROM [table])\nGROUP BY 1,\n         2,\n         3,\n         4;"
        },
        {
            "description": "How to retrieve the first, second, and third values from a string split into an array?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'Tim' name,\n                '63 > 89 > 90' score\n   UNION ALL SELECT 'James',\n                    '67 > 44')\nSELECT name,\n       score[SAFE_OFFSET(0)] AS score_1,\n       score[SAFE_OFFSET(1)] AS score_2,\n       score[SAFE_OFFSET(2)] AS score_3\nFROM\n  (SELECT name,\n          SPLIT(score, ' > ') score\n   FROM `project.dataset.your_table`);"
        },
        {
            "description": "How to retrieve all rows in the table ordered by the 'score_1' column in descending order.?",
            "sql": "SELECT *\nFROM `project.dataset.ROW`\nORDER BY score_1 DESC;"
        },
        {
            "description": "How to split a string column based on the delimiter, then get the first of the array elements?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'Tim' name,\n                '63 > 89 > 90' score\n   UNION ALL SELECT 'James',\n                    '67 > 44')\nSELECT name,\n       score\nFROM `project.dataset.your_table`,\n     UNNEST(SPLIT(score, ' > ')) score;"
        },
        {
            "description": "How to retrieve the maximum score for each unique row name.?",
            "sql": "SELECT row_name,\n       MAX(score) AS max_score\nFROM\n  (SELECT row_name,\n          score\n   FROM t\n   ORDER BY row_name,\n            score DESC)\nGROUP BY row_name;"
        },
        {
            "description": "How to retrieve a schema from a JSON object.?",
            "sql": "SELECT *\nFROM json_query(\"{\\\"fields\\\": [{\\\"name\\\": \\\"date2\\\", \\\"type\\\": \\\"DATE\\\"}, {\\\"name\\\":\\\"username\\\", \\\"type\\\": \\\"STRING\\\"}, {\\\"name\\\": \\\"age\\\", \\\"type\\\": \\\"INTEGER\\\"}, {\\\"name\\\": \\\"favorite_number\\\", \\\"type\\\": \\\"FLOAT\\\"} ] }\", '$') AS SCHEMA;"
        },
        {
            "description": "How to retrieve all data from tables whose date ranges fall within a date interval?",
            "sql": "SELECT *\nFROM `Costdata_*`\nWHERE _table_suffix BETWEEN '20180401' AND '20180413';"
        },
        {
            "description": "How to how to update the consumer segment to \"Found\" for all records in `MyTableLongNameA` that have matching `consumerID` records in `MyTableLongNameB`?",
            "sql": "UPDATE `MyTableLongNameA` AS TableA\nSET TableA.consumerSegment = \"Found\"\nWHERE EXISTS\n    (SELECT 1\n     FROM `MyTableLongNameB` AS TableB\n     WHERE TableA.consumerID = TableB.ConsumerID);"
        },
        {
            "description": "How to retrieve the total amount for each check?",
            "sql": "WITH `project.dataset.your_table` AS\n  (SELECT 'ban1' bank,\n                 'user1' USER,\n                         '11111' chqno,\n                                 '12.12.2017' chqdated,\n                                              200 Amount\n   UNION ALL SELECT 'ban1',\n                    'user1',\n                    '11111',\n                    '12.12.2017',\n                    300\n   UNION ALL SELECT 'ban1',\n                    'user2',\n                    '22332',\n                    '12.12.2017',\n                    300)\nSELECT bank,\n       USER,\n       chqno,\n       chqdated,\n       SUM(Amount) Amount\nFROM `project.dataset.your_table`\nGROUP BY bank,\n         USER,\n         chqno,\n         chqdated;"
        },
        {
            "description": "How to retrieve the UserID from the customDimension with index 2?",
            "sql": "SELECT customDimension.value AS UserID\nFROM `my.project.data` AS t\nCROSS JOIN UNNEST(t.customdimensions) AS customDimension\nWHERE customDimension.index = 2;"
        },
        {
            "description": "How many distinct users posted questions on Stack Overflow in the last 90 days, 30 days, and 7 days?",
            "sql": "SELECT DATE_SUB(date, INTERVAL i DAY) date_grp ,\n       COUNT(DISTINCT owner_user_id) unique_90_day_users ,\n       COUNT(DISTINCT IF(i<31, owner_user_id, NULL)) unique_30_day_users ,\n       COUNT(DISTINCT IF(i<8, owner_user_id, NULL)) unique_7_day_users\nFROM\n  (SELECT DATE(creation_date) date, owner_user_id\n   FROM `bigquery-public-data.stackoverflow.posts_questions`\n   WHERE EXTRACT(YEAR\n                 FROM creation_date)=2017\n   GROUP BY 1,\n            2), UNNEST(GENERATE_ARRAY(1, 90)) i\nGROUP BY 1\nORDER BY date_grp;"
        },
        {
            "description": "How to how to obtain the unique number of users for a StackOverflow dataset posted in the year 2017, grouped by date, within the last 7, 30, and 90 days.?",
            "sql": "SELECT DATE_SUB(date, INTERVAL i DAY) date_grp ,\n       HLL_COUNT.MERGE(sketch) unique_90_day_users ,\n       HLL_COUNT.MERGE(DISTINCT IF(i<31, sketch, NULL)) unique_30_day_users ,\n       HLL_COUNT.MERGE(DISTINCT IF(i<8, sketch, NULL)) unique_7_day_users\nFROM\n  (SELECT DATE(creation_date) date, HLL_COUNT.INIT(owner_user_id) sketch\n   FROM `bigquery-public-data.stackoverflow.posts_questions`\n   WHERE EXTRACT(YEAR\n                 FROM creation_date)=2017\n   GROUP BY 1), UNNEST(GENERATE_ARRAY(1, 90)) i\nGROUP BY 1\nORDER BY date_grp;"
        },
        {
            "description": "How to retrieve unique user counts over 90, 30, and 7-day intervals, grouped by date.?",
            "sql": "SELECT DATE_SUB(date, INTERVAL i DAY) date_grp ,\n       HLL_COUNT.MERGE(sketch) unique_90_day_users ,\n       HLL_COUNT.MERGE(DISTINCT IF(i<31, sketch, NULL)) unique_30_day_users ,\n       HLL_COUNT.MERGE(DISTINCT IF(i<8, sketch, NULL)) unique_7_day_users ,\n       COUNT(*) window_days\nFROM\n  (SELECT DATE(creation_date) date, HLL_COUNT.INIT(owner_user_id) sketch\n   FROM `bigquery-public-data.stackoverflow.posts_questions`\n   WHERE EXTRACT(YEAR\n                 FROM creation_date)=2017\n   GROUP BY 1), UNNEST(GENERATE_ARRAY(1, 90)) i\nGROUP BY 1\nHAVING window_days=90\nORDER BY date_grp;"
        },
        {
            "description": "How to retrieve the total number of visits to a specific project on a given date, excluding visits from other projects.?",
            "sql": "SELECT date, SUM(IF(isProject1\n                    AND NOT isAnyOtherProject, totals.visits, 0)) AS visits,\n             project\nFROM\n  (SELECT date, totals.visits,\n                MAX(IF(hits.customDimensions.index=9\n                       AND REGEXP_MATCH(hits.customDimensions.value, 'project1'), TRUE, FALSE)) WITHIN RECORD AS isProject1,\n                                                                                                       MAX(IF(...same AS above WITH different regex identifying other projects...)) isAnyOtherProject\n   FROM (TABLE_DATE_RANGE([project:dataset.ga_sessions_], TIMESTAMP('2018-03-31'), TIMESTAMP('2018-03-31'))))\nGROUP BY project;"
        },
        {
            "description": "How to retrieve total profit per company over a given time period?",
            "sql": "SELECT company,\n       SUM(profit) AS total_profit\nFROM `project.dataset.table3`\nGROUP BY company;"
        },
        {
            "description": "How to retrieve the total profit for each company within a specific date range?",
            "sql": "SELECT company,\n       SUM(profit) profit\nFROM `project.dataset.table3`\nWHERE PARSE_DATE('%m-%d-%Y', profit_date) BETWEEN DATE '2017-01-01' AND DATE '2017-04-30'\nGROUP BY company;"
        },
        {
            "description": "How to retrieve the row number, company, and profit.?",
            "sql": "SELECT ROW_NUMBER() OVER() AS ROW,\n       company,\n       profit\nFROM your_table;"
        },
        {
            "description": "How to retrieve the total profit for each company between January 1, 2017 and April 30, 2017.?",
            "sql": "WITH table4 AS\n  (SELECT \"A\" AS company,\n          345 AS profit,\n          DATE '2017-01-31' AS profit_date\n   UNION ALL SELECT \"A\",\n                    456, DATE '2017-02-28'\n   UNION ALL SELECT \"A\",\n                    543, DATE '2017-03-31'\n   UNION ALL SELECT \"A\",\n                    987, DATE '2017-04-30'\n   UNION ALL SELECT \"B\",\n                    405, DATE '2017-01-31'\n   UNION ALL SELECT \"B\",\n                    956, DATE '2017-02-28'\n   UNION ALL SELECT \"B\",\n                    673, DATE '2017-03-31'\n   UNION ALL SELECT \"B\",\n                    907, DATE '2017-04-30'\n   UNION ALL SELECT \"C\",\n                    745, DATE '2017-01-31'\n   UNION ALL SELECT \"C\",\n                    476, DATE '2017-02-28'\n   UNION ALL SELECT \"C\",\n                    323, DATE '2017-03-31'\n   UNION ALL SELECT \"C\",\n                    477, DATE '2017-04-30')\nSELECT company,\n       SUM(profit) profit\nFROM table4\nWHERE profit_date BETWEEN DATE '2017-01-01' AND DATE '2017-04-30'\nGROUP BY company;"
        },
        {
            "description": "How to retrieve the current datetime and source from a table called 'test_table' in dataset 'my_dataset'.?",
            "sql": "SELECT CURRENT_DATETIME() AS Datetime,\n       'CRON' AS SOURCE\nFROM `my_project.my_dataset.test_table`;"
        },
        {
            "description": "How to parse dates and extract the year from the parsed date?",
            "sql": "WITH `project.dataset.table1` AS\n  (SELECT \"2017/1/1\" AS doj\n   UNION ALL SELECT \"2017/2/3\" AS doj\n   UNION ALL SELECT \"2017/3/5\" AS doj\n   UNION ALL SELECT \"2017/4/7\" AS doj\n   UNION ALL SELECT \"2017/6/9\" AS doj)\nSELECT PARSE_DATE(\"%Y/%m/%d\", doj) doj_as_date,\n       EXTRACT(YEAR\n               FROM PARSE_DATE(\"%Y/%m/%d\", doj)) YEAR\nFROM `project.dataset.table1`;"
        },
        {
            "description": "How to calculate the number of working days (MON-FRI) between two dates, excluding weekends and holidays?",
            "sql": "CREATE\nTEMPORARY FUNCTION working_days_diff(the_date DATE, num_of_days INT64) AS (DATE_SUB(CASE\n                                                                                        WHEN EXTRACT(DAYOFWEEK\n                                                                                                     FROM the_date) IN (2, 3, 4, 5, 6, 7) THEN CASE\n                                                                                                                                                   WHEN (EXTRACT(DAYOFWEEK\n                                                                                                                                                                 FROM the_date) - MOD(num_of_days, 5)) > 1 THEN DATE_SUB(the_date, INTERVAL MOD(num_of_days, 5) DAY)\n                                                                                                                                                   ELSE DATE_SUB(the_date, INTERVAL (MOD(num_of_days, 5) + 2) DAY)\n                                                                                                                                               END\n                                                                                        ELSE DATE_SUB(the_date, INTERVAL (MOD(num_of_days, 5) +1) DAY)\n                                                                                    END, INTERVAL DIV(num_of_days, 5) WEEK));"
        },
        {
            "description": "How to retrieve the working days difference for the given input dates and number of days.?",
            "sql": "CREATE\nTEMPORARY FUNCTION working_days_diff(the_date DATE, num_of_days INT64) AS (DATE_SUB(CASE\n                                                                                        WHEN EXTRACT(DAYOFWEEK\n                                                                                                     FROM the_date) IN (2, 3, 4, 5, 6, 7) THEN CASE\n                                                                                                                                                   WHEN (EXTRACT(DAYOFWEEK\n                                                                                                                                                                 FROM the_date) - MOD(num_of_days, 5)) > 1 THEN DATE_SUB(the_date, INTERVAL MOD(num_of_days, 5) DAY)\n                                                                                                                                                   ELSE DATE_SUB(the_date, INTERVAL (MOD(num_of_days, 5) + 2) DAY)\n                                                                                                                                               END\n                                                                                        ELSE DATE_SUB(the_date, INTERVAL (MOD(num_of_days, 5) +1) DAY)\n                                                                                    END, INTERVAL DIV(num_of_days, 5) WEEK));\n\nSELECT working_days_diff(DATE(\"2018-04-12\"), 3)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 4)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 5)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 6)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 7)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 8)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 9)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 10)\nUNION ALL\nSELECT working_days_diff(DATE(\"2018-04-12\"), 20);"
        },
        {
            "description": "How to retrieve the value 1 if all rows in Latest_LI are not present in PRIOR_LI; otherwise, retrieve the value 2 if any rows in Latest_LI are present in PRIOR_LI.?",
            "sql": "SELECT CASE\n           WHEN\n                  (SELECT COUNT(1)\n                   FROM\n                     (SELECT *\n                      FROM `project.dataset.Latest_LI`\n                      EXCEPT DISTINCT SELECT *\n                      FROM `project.dataset.PRIOR_LI`)) = 0 THEN 1\n           WHEN\n                  (SELECT COUNT(1)\n                   FROM\n                     (SELECT *\n                      FROM `project.dataset.Latest_LI` INTERSECT DISTINCT SELECT *\n                      FROM `project.dataset.PRIOR_LI`)) > 0 THEN 2\n       END;"
        },
        {
            "description": "How to retrieve a flag indicating whether the latest and prior Legal Interests differ by counting the number of rows across the two tables and comparing the result to 0.?",
            "sql": "SELECT CASE\n                  (SELECT COUNT(1)\n                   FROM\n                     (SELECT *\n                      FROM `project.dataset.Latest_LI` INTERSECT DISTINCT SELECT *\n                      FROM `project.dataset.PRIOR_LI`))\n           WHEN 0 THEN 1\n           ELSE 2\n       END;"
        },
        {
            "description": "How to retrieve the date that is three days ago for each row in the table, accounting for the day of the week.?",
            "sql": "SELECT CASE\n           WHEN DAYOFWEEK(date) IN (2,\n                                    3,\n                                    4) THEN DATE_SUB(date, INTERVAL 5 DAY)\n           WHEN DAYOFWEEK(date) = 1 THEN DATE_SUB(date, INTERVAL 4 DAY)\n           ELSE DATE_SUB(date, INTERVAL 3 DAY)\n       END AS three_days_ago\nFROM `project.dataset.yourtable`;"
        },
        {
            "description": "How to reformat a date string from the format 'yyyyMMdd' to 'yyyy/MM/dd'?",
            "sql": "SELECT REGEXP_REPLACE('20170601', r\"^([0-9]{4})([0-9]{2})([0-9]{2})\", \"\\1/\\2/\\3\");"
        },
        {
            "description": "How to retrieve weekly start and end dates between a specific date range.?",
            "sql": "WITH `project.dataset.table` AS\n  (SELECT FORMAT_DATE('%a %b %d %Y GMT+0200', date) AS start_date,\n          FORMAT_DATE('%a %b %d %Y GMT+0200', DATE_ADD(date, INTERVAL MOD(OFF, 7) DAY)) AS end_date\n   FROM UNNEST(GENERATE_DATE_ARRAY('2017-09-01', '2018-04-11', INTERVAL 7 DAY)) AS date WITH\n   OFFSET OFF)\nSELECT start_date,\n       end_date\nFROM `project.dataset.table`;"
        },
        {
            "description": "How to create a temporary function to convert a string to a DATE using a regular expression?",
            "sql": "CREATE TEMP FUNCTION ConvertToDate(date_string STRING) AS (PARSE_DATE('%b %d %Y', REGEXP_EXTRACT(date_string, r'[^ ]+ (.*)00:00:00')));"
        },
        {
            "description": "How to retrieve a list of periods of dates using specific start and end dates and a given offset?",
            "sql": "CREATE TEMP FUNCTION ConvertToDate(date_string STRING) AS (PARSE_DATE('%b %d %Y', REGEXP_EXTRACT(date_string, r'[^ ]+ (.*)00:00:00')));\n\nWITH `project.dataset.table` AS\n  (SELECT FORMAT_DATE('%a %b %d %Y 00:00:00 GMT+0200', date) AS start_date,\n          FORMAT_DATE('%a %b %d %Y 00:00:00 GMT+0200', DATE_ADD(date, INTERVAL MOD(OFF, 7) DAY)) AS end_date\n   FROM UNNEST(GENERATE_DATE_ARRAY('2017-09-01', '2018-04-11', INTERVAL 7 DAY)) AS date WITH\n   OFFSET OFF)\nSELECT ConvertToDate(start_date) AS start_date,\n       ConvertToDate(end_date) AS end_date\nFROM `project.dataset.table`;"
        },
        {
            "description": "How do I get details about a BigQuery dataset's tables?",
            "sql": "SELECT table_id,\n       DATE(TIMESTAMP_MILLIS(creation_time)) AS creation_date,\n       DATE(TIMESTAMP_MILLIS(last_modified_time)) AS last_modified_date,\n       ROW_COUNT,\n       size_bytes,\n       CASE\n           WHEN TYPE = 1 THEN 'table'\n           WHEN TYPE = 2 THEN 'view'\n           WHEN TYPE = 3 THEN 'external'\n           ELSE '?'\n       END AS TYPE,\n       TIMESTAMP_MILLIS(creation_time) AS creation_time,\n       TIMESTAMP_MILLIS(last_modified_time) AS last_modified_time,\n       dataset_id,\n       project_id\nFROM `project.dataset.__TABLES__`;"
        },
        {
            "description": "How to retrieve the count of unique words in the corpus?",
            "sql": "SELECT COUNT(DISTINCT word)\nFROM `project.dataset.shakespeare`;"
        }
    ]
}